import ast
import calendar
import datetime
import json
import locale
import logging
import math
import traceback
import simplejson
import threading
import time
from copy import deepcopy
from datetime import timedelta
from dateutil.relativedelta import relativedelta
from decimal import Decimal
from django.db.models import Q, Sum, F
from django.contrib import messages
from django.contrib.auth.decorators import login_required
from django.contrib.auth.decorators import permission_required
from django.contrib.humanize.templatetags.humanize import intcomma
from django.core.exceptions import ObjectDoesNotExist
from django.core.urlresolvers import reverse
from django.db import transaction as transactionlib
from django.db.models.expressions import RawSQL
from django.forms.formsets import formset_factory
from django.http import HttpResponse, HttpResponsePermanentRedirect, HttpResponseRedirect, HttpResponseNotFound
from django.shortcuts import render_to_response, get_object_or_404, render, redirect
from django.template import RequestContext
from django.template.loader import render_to_string
from django.views.decorators.csrf import csrf_exempt
from accounting.classes.closing import C_Closing
from accounting.classes.gl_revaluation_ver3 import C_GL_Revaluation_ver3
from accounting.classes.revaluation_ver3 import C_Revaluation_ver3
from accounting.classes.reverse_transaction import C_Reverse_Transaction
from accounting.forms import ARInvoiceInfoForm, PaymentCode, APInvoiceInfoForm, PaymentCodeForm, ARReceiptInfoForm, \
    JournalGLForm, APPaymentInfoForm, BatchInfoForm, ReverseTransactionForm, FiscalCalendarForm, RecurringEntryForm, \
    ScheduleEntryForm, APInvoiceREForm, ARInvoiceREForm, ARReceiptREForm, APPaymentREForm, APOptionsNumberForm, \
    AROptionsNumberForm, APOptionsStatementForm, AROptionsStatementForm, RecBatchInfoForm
from accounting.models import Journal, Batch, DOCUMENT_TYPES, INPUT_TYPES, FiscalCalendar, Schedule, RecurringEntry, RecurringBatch, \
    RecurringEntryDetail, RevaluationLogs, RevaluationDetails, APGLIntegration, ARGLIntegration, APGLIntegrationDetail, ARGLIntegrationDetail, AROptions, APOptions
from accounts.models import Account, DistributionCode, AccountHistory, AccountSet, RevaluationCode, AccountCurrency
from banks.models import Bank
from companies.models import Company, CostCenters
from currencies.models import Currency, ExchangeRate
from customers.models import Customer
from inventory.models import StockTransaction, Incoming, Outgoing
from orders.models import Order
from suppliers.models import Supplier
from taxes.models import Tax, TaxAuthority
from inventory.views import calculate_cost_FIFO, update_balance_qty, calculate_cost_FIFO_reverse
from accounting.management.commands.migrationbatch import Migrate_GL, Migrate_GL_opening
from transactions.models import Transaction
from utilities.common import to_string, check_fiscal, generate_batch_number, add_one_month, update_next_doc_number, \
    AR_AP_generate_document_number, get_batch_journals, get_nearest_batches, round_number, generate_recurring_batch_number, \
    get_recurring_nearest_batches, get_related_batches, update_next_adj_number
from utilities.constants import AP_REPORT_LIST, AR_REPORT_LIST, BALANCE_TYPE, ACCOUNT_TYPE, DATE_TYPE, STATUS_TYPE, \
    SOURCE_TYPES, SOURCE_TYPES_AP, SOURCE_TYPES_AR, SOURCE_TYPES_GL, CURRENCY_REPORT_LIST, PAYMENT_TYPE, \
    GL_REPORT_LIST, PAYMENT_TRANSACTION_TYPES, RECEIPT_TRANSACTION_TYPES, CUR_TYPE, VEN_CUR_TYPE, AR_CUST_REPORT, ACCOUNT_TYPES, \
    AP_CUST_REPORT, ORDER_STATUS, ORDER_TYPE, STATUS_TYPE_DICT, INV_IN_OUT_FLAG, \
    DOCUMENT_TYPE_DICT, INPUT_TYPE_DICT, PAYMENT_TRANSACTION_TYPES_DICT, \
    RECEIPT_TRANSACTION_TYPES_DICT, SOURCE_LEDGER_DICT, BALANCE_TYPE_DICT, UNDEFINED_LIST, ACCOUNT_TYPE_DICT, \
    DIS_CODE_TYPE_DICT, TRANSACTION_TYPES, FLAG_TYPE, FLAG_TYPE_DICT, TAX_TRX_TYPES_DICT, RECURRING_PERIOD_DICT, \
    AR_GL_SOURCE_TYPE_DICT, AP_GL_SOURCE_TYPE_DICT, GL_INTEGRATION_OPTIONS_DICT, AR_TRANSACTION_SEGMENT_TYPES_DICT, \
    AP_TRANSACTION_SEGMENT_TYPES_DICT, TRANSACTION_TYPES_REVERSED, AR_GL_SOURCE_TYPE, AP_GL_SOURCE_TYPE, GL_INTEGRATION_OPTIONS
from utilities.messages import MESSAGE_SUCCES_CREATE_GL, MESSAGE_SUCCESS_ARAP, MESSAGE_ERROR_ARAP, MESSAGE_ERROR_1, FISCAL_UPDATED, \
    POST_BATCH_FAILED, UNBALANCE_JOURNAL, IC_LOCKED_SUCCESS, CHECK_IC_LOCKED, IC_DRAFT_CHECK, \
    SO_DRAFT_CHECK, PO_DRAFT_CHECK, GR_DRAFT_CHECK, DO_DRAFT_CHECK, SALE_NOTES_DRAFT_CHECK, \
    PURCHASE_NOTES_DRAFT_CHECK, CHECK_IC_LOCKED_FOR_SP, NO_EXCHANGE_RATE, CORRUPT_DATA, \
    UNBALANCE_INFO, DELETE_SUCCESS, RV_ERR_DUPLICATE_CURR, YEAR_END_CLOSING_FAILED, \
    YEAR_END_CLOSING_ERROR, YEAR_END_CLOSING_ERR2, YEAR_END_CLOSING_ERR3, \
    YEAR_END_CLOSING_ERR5, YEAR_END_CLOSING_WARN1, FISCAL_YEAR_OPEN_SUCCESS, FISCAL_YEAR_CLOSED_SUCCESS, \
    CLOSING_BATCH_CORRUPT, SP_LOCKED_SUCCESS, CHECK_SP_LOCKED, PERIOD_LOCKED_FAILED, \
    REFRESH_OR_GO_GET_SUPPORT, REVERSE_TRANSACTION_SUCCESS, REVERSE_TRANSACTION_FAILED, DELETE_BATCH_FAILED, \
    POST_BATCH_SUCCESS, REOPEN_BATCH_SUCCESS, UNEXPECTED_ACCOUNT_HISTORY_LENGTH, PERIOD_LOCKED_FAILED2, INVALID_FORM, \
    EXCEPTION_JOURNAL_ADD, MESSAGE_ERROR_REOPEN, \
    EXCEPTION_JOURNAL_EDIT, EXCEPTION_JOURNAL_VIEW, EXCEPTION_JOURNAL_DELETE, EXCEPTION_JOURNAL_POST

logger = logging.getLogger(__name__)


@login_required
def load_list(request, journal_type, batch_id):
    try:
        prev_batch = 0
        next_batch = 0
        first_batch = 0
        last_batch = 0
        company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
        company = Company.objects.get(pk=company_id)
        batch = Batch.objects.get(pk=batch_id)
        order_list = Journal.objects.filter(batch__id=batch.id, is_hidden=0, company_id=company_id) \
            .exclude(journal_type=dict(TRANSACTION_TYPES)['AD']) \
            .exclude(is_auto_reversed_entry=True)\
            .exclude(status=int(STATUS_TYPE_DICT['Auto Reverse Entry']))\
            .exclude(reference='REVERSING ENTRY')\
            .select_related('batch')
        journal_count = len(order_list)
        source_amount = functional_amount = 0
        for field in order_list:
            source_amt, functional_amt = get_func_source_amt(field, company_id)
            source_amount += source_amt
            functional_amount += functional_amt

        if int(batch.batch_type) in [dict(TRANSACTION_TYPES)['AR Invoice'], dict(TRANSACTION_TYPES)['AP Invoice']]:
            source_amount = round_number(source_amount)
        else:
            if batch.currency.is_decimal:
                source_amount = round_number(source_amount)
            else:
                source_amount = round_number(source_amount, 0)
        if company.currency.is_decimal:
            functional_amount = round_number(functional_amount)
        else:
            functional_amount = round_number(functional_amount, 0)
        
        status_list = [STATUS_TYPE_DICT['Open'],
                       STATUS_TYPE_DICT['Posted'],
                       STATUS_TYPE_DICT['Prov. Posted']]
        order_list = Batch.objects.filter(is_hidden=0, company_id=company_id, batch_type=int(batch.batch_type), status__in=status_list).order_by('-id')
        first_batch, prev_batch, next_batch, last_batch = get_related_batches(company_id, batch.batch_type, batch.batch_no)
        return render_to_response('journal_list.html', RequestContext(request, {'journal_type': journal_type,
                                                                                'journal_count': journal_count,
                                                                                'batch_id': batch_id, 'batch': batch,
                                                                                'status': int(batch.status),
                                                                                'batch_date': batch.batch_date.strftime(
                                                                                    "%d-%m-%Y"),
                                                                                'functional_amount': functional_amount,
                                                                                'source_amount': source_amount, 'order_list': order_list,
                                                                                'prev_batch': prev_batch, 'next_batch': next_batch,
                                                                                'first_batch': first_batch, 'last_batch': last_batch}))
    except ObjectDoesNotExist:
        messages_error = "Company and Staff information of Current User does not exist." \
                         "\nPlease input Company and Staff of Current User!"
        return render_to_response('404.html', RequestContext(request, {'messages_error': messages_error}))
    except Exception as e:
        print(e)
        messages_error = "Unexpected error in load_list. please contact your Administrator"
        return render_to_response('404.html', RequestContext(request, {'messages_error': messages_error}))


@login_required
def page_acc(request):
    try:
        # redirect to GL batch list page
        return redirect('/accounting/batch_list/5/')
    except ObjectDoesNotExist:
        messages_error = "Company and Staff information of Current User does not exist." \
                         "\nPlease input Company and Staff of Current User!"
        return render_to_response('404.html', RequestContext(request, {'messages_error': messages_error}))


def getTransactionDate(request, doc_date):
    last_day = request.session['session_date']
    try:
        year = int(doc_date.year)
        month = int(doc_date.month)
        _, num_days = calendar.monthrange(year, month)
        last_day = datetime.date(year, month, num_days)
    except:
        pass

    return last_day


@login_required
def batch_list(request, batch_type):
    try:
        # fix_payments_outs_amount(request, 'AP', [4532])
        company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
        status_list = [STATUS_TYPE_DICT['Open'],
                       STATUS_TYPE_DICT['Posted'],
                       STATUS_TYPE_DICT['Prov. Posted']]
        order_list = Batch.objects.filter(is_hidden=0, company_id=company_id, batch_type=int(batch_type), status__in=status_list).order_by('-id')


        return render_to_response('batch_list.html', RequestContext(request, {'batch_type': batch_type, 'order_list': order_list}))
    except ObjectDoesNotExist:
        messages_error = "Company and Staff information of Current User does not exist." \
                         "\nPlease input Company and Staff of Current User!"
        return render_to_response('404.html', RequestContext(request, {'messages_error': messages_error}))


def get_func_source_amt(field, company_id):
    source_amt = functional_amt = 0
    transactions = Transaction.objects.filter(is_hidden=False, company_id=company_id,
                                              journal_id=field.id,
                                              journal__status__in=(int(STATUS_TYPE_DICT['Open']),
                                                                   int(STATUS_TYPE_DICT['Posted']),
                                                                   int(STATUS_TYPE_DICT['Prov. Posted']),
                                                                   int(STATUS_TYPE_DICT['Draft'])))\
        .exclude(journal__reference='REVERSING ENTRY')\
        .exclude(journal__journal_type=dict(TRANSACTION_TYPES)['AD'])\
        .exclude(journal__is_auto_reversed_entry=True)\
        .select_related('journal')\
        .order_by('journal_id')

    if field.journal_type == dict(TRANSACTION_TYPES)['GL']:
        transactions = transactions.filter(is_debit_account=True)
        if not transactions:
            transactions = transactions.filter(is_credit_account=True)

    if transactions:
        last_j_id = 0
        for transaction in transactions:
            # src_amt = (round(float(transaction.amount + transaction.tax_amount), 2),
            #            round((float(transaction.functional_amount) / float(transaction.exchange_rate)) + round(
            #                float(transaction.tax_amount), 2), 2))[
            #     (transaction.amount + transaction.tax_amount) <= 0]
            if last_j_id != transaction.journal_id:
                src_amt = round_number(float(transaction.journal.amount) + float(transaction.journal.tax_amount))
                last_j_id = transaction.journal_id
            else:
                src_amt = 0
            # src_amt = round(float(transaction.amount + transaction.tax_amount), 2)
            func_amt = round_number(transaction.functional_amount)
            if transaction.journal.journal_type != dict(TRANSACTION_TYPES)['GL']:
                if transaction.journal.document_type and transaction.journal.document_type == DOCUMENT_TYPE_DICT['Credit Note']:
                    functional_amt -= func_amt
                    source_amt -= src_amt
                elif transaction.journal.journal_type in (dict(TRANSACTION_TYPES)['AP Payment'], dict(TRANSACTION_TYPES)['AR Receipt']) and \
                        transaction.related_invoice and transaction.related_invoice.document_type and \
                        transaction.related_invoice.document_type == DOCUMENT_TYPE_DICT['Credit Note']:
                    functional_amt -= func_amt
                    source_amt += src_amt
                else:
                    functional_amt += func_amt
                    source_amt += src_amt
            else:
                functional_amt += func_amt
                source_amt += src_amt
    else:
        source_amt = round_number(float(field.amount) + float(field.tax_amount))
        functional_amt = round_number(float(field.amount) + float(field.tax_amount))

    source_amt = (round_number(source_amt), 0)[field.status == int(STATUS_TYPE_DICT['Deleted'])]
    functional_amt = (round_number(functional_amt), 0)[field.status == int(STATUS_TYPE_DICT['Deleted'])]
    return source_amt, functional_amt


def get_rec_func_source_amt(field, company_id):
    source_amt = functional_amt = 0
    transactions = RecurringEntryDetail.objects.filter(is_hidden=False, company_id=company_id,
                                              rec_entry_id=field.id)\
        .select_related('rec_entry')\
        .order_by('rec_entry_id')

    if field.journal_type == dict(TRANSACTION_TYPES)['GL']:
        transactions = transactions.filter(is_debit_account=True)
        if not transactions:
            transactions = transactions.filter(is_credit_account=True)

    if transactions:
        last_j_id = 0
        for transaction in transactions:
            # src_amt = (round(float(transaction.amount + transaction.tax_amount), 2),
            #            round((float(transaction.functional_amount) / float(transaction.exchange_rate)) + round(
            #                float(transaction.tax_amount), 2), 2))[
            #     (transaction.amount + transaction.tax_amount) <= 0]
            if last_j_id != transaction.rec_entry_id:
                src_amt = round_number(float(transaction.rec_entry.amount) + float(transaction.rec_entry.tax_amount))
                last_j_id = transaction.rec_entry_id
            else:
                src_amt = 0
            # src_amt = round(float(transaction.amount + transaction.tax_amount), 2)
            if transaction.is_debit_account:
                func_amt = round_number(transaction.func_debit)
            else:
                func_amt = round_number(transaction.func_credit)
            if transaction.rec_entry.journal_type != dict(TRANSACTION_TYPES)['GL']:
                if transaction.rec_entry.document_type and transaction.rec_entry.document_type == DOCUMENT_TYPE_DICT['Credit Note']:
                    functional_amt -= func_amt
                    source_amt -= src_amt
                # elif transaction.rec_entr.journal_type in (dict(TRANSACTION_TYPES)['AP Payment'], dict(TRANSACTION_TYPES)['AR Receipt']) and \
                #         transaction.related_invoice and transaction.related_invoice.document_type and \
                #         transaction.related_invoice.document_type == DOCUMENT_TYPE_DICT['Credit Note']:
                #     functional_amt -= func_amt
                #     source_amt += src_amt
                else:
                    functional_amt += func_amt
                    source_amt += src_amt
            else:
                functional_amt += func_amt
                source_amt += src_amt
    else:
        source_amt = round_number(float(field.amount) + float(field.tax_amount))
        functional_amt = round_number(float(field.amount) + float(field.tax_amount))

    return source_amt, functional_amt


# Create your views here.
@login_required
def JournalList__asJson(request, journal_type, batch_id):
    draw = request.GET['draw']
    start = request.GET['start']
    length = request.GET['length']
    search = request.GET['search[value]']
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0

    company = Company.objects.get(pk=company_id)
    company_currency = Company.objects.filter(pk=company_id).values('currency', 'currency__code').first()

    if int(batch_id):
        batch = Batch.objects.get(id=batch_id)
        order_list = Journal.objects.filter(batch__id=batch.id, is_hidden=0, company_id=company_id) \
            .exclude(journal_type=dict(TRANSACTION_TYPES)['AD']) \
            .exclude(is_auto_reversed_entry=True)\
            .exclude(status=int(STATUS_TYPE_DICT['Auto Reverse Entry']))\
            .exclude(reference='REVERSING ENTRY')\
            .exclude(code__isnull=True)\
            .select_related('batch')
    else:
        order_list = Journal.objects.none()
    records_total = order_list.count()

    if search:  # Filter data base on search
        order_list = order_list.filter(Q(update_date__icontains=search) | Q(document_date__icontains=search) | Q(
            document_number__icontains=search) | Q(customer__name__icontains=search) | Q(
            supplier__name__icontains=search) | Q(code__icontains=search) | Q(payment_amount__icontains=search) | Q(
            payment_check_number__icontains=search) | Q(perd_year__icontains=search) | Q(perd_month__icontains=search))

    # All data
    records_filtered = order_list.count()
    # Order by list_limit base on order_dir and order_column
    if int(batch_id) and batch:
        journal_type = batch.batch_type
    if journal_type and journal_type != '':
        journal_type = int(journal_type)
    if journal_type == 3 or journal_type == 4:
        order_column_dict = {'status': 10, 'amount': 9, 'buyyer': 8, 'document_type': 7,
                            'document_date': 6, 'document_number': 4, 'code': 3}
    elif journal_type == 1 or journal_type == 2:
        order_column_dict = {'status': 9, 'amount': 8, 'buyyer': 7, 'document_type': 6,
                            'document_date': 5, 'document_number': 4, 'code': 3}
    else:
        order_column_dict = {'status': 9, 'amount': 8, 'buyyer': 7, 'source_type': 6,
                            'document_date': 5, 'document_number': 4, 'code': 3}
    

    order_column = request.GET['order[0][column]']
    column_name = ""
    if order_column == "1":
        column_name = "update_date"
    elif order_column == str(order_column_dict['code']):
        column_name = "code"
    elif order_column == str(order_column_dict['document_number']):
        column_name = "document_number"
    elif order_column == str(order_column_dict['document_date']):
        column_name = "document_date"
    elif journal_type in [1, 2, 3, 4] and order_column == str(order_column_dict['document_type']):
        column_name = "document_type"
    elif journal_type == 5 and order_column == str(order_column_dict['source_type']):
        column_name = "source_type"
    elif order_column == str(order_column_dict['buyyer']):
        column_name = "customer__name" if journal_type in [1, 3] else "supplier__name"
    elif order_column == str(order_column_dict['amount']):
        column_name = "amount"
    elif order_column == str(order_column_dict['status']):
        column_name = "status"
    order_dir = request.GET['order[0][dir]']

    list = []
    if order_dir == "asc":
        if column_name == 'code':
            list = sorted(order_list, key=lambda Journal: int(Journal.code))
            list = list[int(start):(int(start) + int(length))]
        else:
            list = order_list.order_by(column_name)[int(start):(int(start) + int(length))]
    elif order_dir == "desc":
        if column_name == 'code':
            list = sorted(order_list, key=lambda Journal: int(Journal.code), reverse=True)
            list = list[int(start):(int(start) + int(length))]
        else:
            list = order_list.order_by('-' + column_name)[int(start):(int(start) + int(length))]

    # Create data list
    array = []
    if int(journal_type) == dict(TRANSACTION_TYPES)['AR Receipt']:
        document_type_dict = dict(RECEIPT_TRANSACTION_TYPES)
    elif int(journal_type) == dict(TRANSACTION_TYPES)['AP Payment']:
        document_type_dict = dict(PAYMENT_TRANSACTION_TYPES)
    else:
        document_type_dict = dict(DOCUMENT_TYPES)

    for field in list:
        source_amt, functional_amt = get_func_source_amt(field, company_id)
        if not dict(TRANSACTION_TYPES)['GL'] and field.document_type == DOCUMENT_TYPE_DICT['Credit Note']:
            source_amt = -1 * source_amt
            functional_amt = -1 * functional_amt
        if company.currency.is_decimal:
            functional_amt = intcomma("%.2f" % functional_amt)
        else:
            functional_amt = intcomma(int(functional_amt))
        if field.currency.is_decimal:
            source_amt = intcomma("%.2f" % source_amt)
        else:
            source_amt = intcomma(int(source_amt))
        amount = functional_amt if int(journal_type) == dict(TRANSACTION_TYPES)['GL'] else source_amt
        data = {}
        data["update_date"] = field.update_date.strftime("%d-%m-%Y")
        data["id"] = str(field.id)
        data["code"] = str(field.code) if field.code is not None else ''
        data["document_number"] = field.document_number
        data["document_date"] = str(field.document_date.strftime("%d-%m-%Y"))
        data["amount"] = amount
        data["outstanding_amount"] = intcomma("%.2f" % field.outstanding_amount) if field.outstanding_amount else '0.00'
        data["status"] = str(field.status)
        data["flag"] = field.flag
        data["journal_type"] = field.journal_type
        data['batch_id'] = str(field.batch_id)
        data["name"] = field.name
        data["source_type"] = field.source_type
        data["currency_code"] = company_currency['currency__code'] if int(journal_type) == dict(TRANSACTION_TYPES)[
            'GL'] else ''
        data["batch_type"] = batch.batch_type
        data["cust_supp_name"] = ""
        data["cust_supp_code"] = ""
        data["check_number"] = field.payment_check_number if field.payment_check_number else ""
        data["reference"] = field.reference
        data["batch_number"] = batch.batch_no
        data["source_ledger"] = batch.source_ledger
        data["fiscal_year"] = field.perd_year
        data["fiscal_period"] = field.perd_month

        if int(journal_type) == dict(TRANSACTION_TYPES)['AR Receipt']:
            data["document_type"] = document_type_dict.get(field.transaction_type) if field.transaction_type else ''
        elif int(journal_type) == dict(TRANSACTION_TYPES)['AP Payment']:
            data["document_type"] = document_type_dict.get(field.transaction_type) if field.transaction_type else ''
        else:
            data["document_type"] = document_type_dict.get(field.document_type) if field.document_type else ''

        if int(journal_type) in (dict(TRANSACTION_TYPES)['AR Invoice'], dict(TRANSACTION_TYPES)['AR Receipt']):
            if field.customer:
                data["cust_supp_name"] = field.customer.name
                data["cust_supp_code"] = field.customer.code
        else:
            if field.supplier:
                data["cust_supp_name"] = field.supplier.name
                data["cust_supp_code"] = field.supplier.code

        array.append(data)

    content = {"draw": draw, "data": array, "recordsTotal": records_total, "recordsFiltered": records_filtered}
    json_content = json.dumps(content, ensure_ascii=False)
    return HttpResponse(json_content, content_type='application/json')


@login_required
@check_fiscal
def journal_AR_add(request, batch_id):
    try:
        company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
        distribution_code_list = DistributionCode.objects.filter(is_hidden=False, is_active=True, company_id=company_id,
                                                                 type=DIS_CODE_TYPE_DICT['AR Distribution Code'])
        account_list = Account.objects.filter(is_hidden=False, is_active=True, company_id=company_id).order_by('account_segment', 'code')
        tax_list = Tax.objects.filter(
            is_hidden=False,
            company_id=company_id,
            tax_group__company_id=company_id,
            tax_group__transaction_type=int(TAX_TRX_TYPES_DICT['Sales'])
        )

        company = Company.objects.get(pk=company_id)
        distribution_code_list_ar = []
        for dist_code_list in distribution_code_list:
            distribution_code_list_obj = {'id': dist_code_list.id,
                                          'code': dist_code_list.code,
                                          'name': dist_code_list.name,
                                          'gl_account_id': dist_code_list.gl_account_id,
                                          'tax_id': None}
            for tax_code in tax_list:
                if tax_code.distribution_code_id:
                    if tax_code.distribution_code_id == dist_code_list.id:
                        distribution_code_list_obj['tax_id'] = tax_code.id
                        break
            distribution_code_list_ar.append(distribution_code_list_obj)

        form = ARInvoiceInfoForm(company_id=company_id, session_date=request.session['session_date'])
        journal_list = Journal.objects.none()
        prev_batch = 0
        next_batch = 0
        prev_journal = 0
        next_journal = 0
        first_journal = 0
        last_journal = 0
        if batch_id and int(batch_id) > 0:
            batch = Batch.objects.get(pk=batch_id)
            batch_form = BatchInfoForm(instance=batch)
            journal_list = Journal.objects.filter(batch_id=batch_id, company_id=company_id, is_hidden=0)
            prev_journal, next_journal, first_journal, last_journal = get_batch_journals(batch.id, None, False)
            prev_batch, next_batch = get_nearest_batches(company_id, dict(TRANSACTION_TYPES)['AR Invoice'], batch.batch_no)
        else:
            batch = Batch()
            batch_form = BatchInfoForm(session_date=request.session['session_date'])
            prev_batch, next_batch = get_nearest_batches(company_id, dict(TRANSACTION_TYPES)['AR Invoice'], None)

        if request.method == 'POST':
            new_post = []
            for old_trx in ast.literal_eval(request.POST['transaction_list_data']):
                list_1 = {}
                list_1['amount'] = old_trx['amount'].replace(",", "")
                list_1['base_tax_amount'] = old_trx['base_tax_amount'].replace(",", "")
                list_1['id'] = old_trx['id'] if old_trx['id'] else None
                list_1['distribution_id'] = old_trx['distribution_id']
                list_1['distribution_code'] = old_trx['distribution_code']
                list_1['distribution_name'] = old_trx['distribution_name']
                list_1['account_id'] = old_trx['account_id']
                list_1['account_code'] = old_trx['account_code']
                list_1['account_name'] = old_trx['account_name']
                list_1['description'] = old_trx['description']
                list_1['tax_amount'] = old_trx['tax_amount'].replace(",", "")
                list_1['total_amount'] = old_trx['total_amount'].replace(",", "")
                list_1['delete'] = old_trx['delete']
                list_1['is_tax_included'] = int(old_trx['is_tax_included'])
                list_1['is_tax_transaction'] = int(old_trx['is_tax_transaction'])
                list_1['is_manual_tax_input'] = int(old_trx['is_manual_tax_input'])
                list_1['tax_id'] = old_trx['tax_id']

                new_post.append(list_1)

            # request.POST['transaction_list_data'] = new_post.append(new_post)
            tot_amu = request.POST.get('total_amount', '')
            tot_amu_1 = tot_amu.replace(",", "")
            amu = request.POST.get('amount', '')
            amu_1 = amu.replace(",", "")
            batch_amu = request.POST.get('batch_amount', '')
            batch_amu_1 = batch_amu.replace(",", "")
            doc_amount = request.POST.get('document_amount', '')
            doc_amount_1 = doc_amount.replace(",", "")

            post = request.POST.copy()  # to make it mutable

            post.update({
                'total_amount': tot_amu_1,
                'amount': amu_1,
                'batch_amount': batch_amu_1,
                'document_amount': doc_amount_1
            })
            request.POST = post
            request.POST['transaction_list_data'] = new_post
            with transactionlib.atomic():
                form = ARInvoiceInfoForm(data=request.POST, company_id=company_id)
                batch_form = BatchInfoForm(data=request.POST, instance=batch)
                if 'is_locked' in request.session and request.session['is_locked']:
                    context = {'form': form, 'batch_form': batch_form, 'distribution_code_list': distribution_code_list_ar,
                        'account_list': account_list, 'tax_list': tax_list, 'batch': batch, 'batch_id': batch_id, 'is_locked': 1,
                        'company_currency': company.currency_id, 'next_journal': next_journal, 'prev_journal': prev_journal,
                        'first_journal': first_journal, 'last_journal': last_journal, 'next_batch': next_batch, 'prev_batch': prev_batch}
                    return render(request, 'AR_entry.html', context)
                if form.is_valid() and batch_form.is_valid():
                    Batch_Entry = batch_form.save(commit=False)
                    AR_Invoice_Entry = form.save(commit=False)

                    # Save Batch Info
                    # Batch_Entry.batch_date = datetime.datetime.today()
                    Batch_Entry.create_date = datetime.datetime.today()
                    Batch_Entry.update_by = request.user.id
                    if batch_id and int(batch_id) > 0:
                        Batch_Entry.no_entries = journal_list.filter(is_hidden=0).count() + 1
                    else:
                        Batch_Entry.batch_no = generate_batch_number(company_id, dict(TRANSACTION_TYPES)['AR Invoice'])
                        Batch_Entry.status = int(STATUS_TYPE_DICT['Open'])
                        Batch_Entry.company_id = company_id
                        Batch_Entry.is_hidden = False
                        Batch_Entry.input_type = INPUT_TYPE_DICT['Manual Entry']
                        Batch_Entry.document_type = DOCUMENT_TYPE_DICT['Invoice']
                        Batch_Entry.batch_type = dict(TRANSACTION_TYPES)['AR Invoice']
                        Batch_Entry.no_entries = 1
                        Batch_Entry.batch_amount = 0
                        Batch_Entry.currency_id = company.currency_id
                        Batch_Entry.source_ledger = SOURCE_LEDGER_DICT['Account Receivable']
                    document_type = request.POST['document_type']
                    if document_type == DOCUMENT_TYPE_DICT['Credit Note']:
                        Batch_Entry.batch_amount = batch.batch_amount - AR_Invoice_Entry.total_amount
                    else:
                        Batch_Entry.batch_amount = batch.batch_amount + AR_Invoice_Entry.total_amount
                    Batch_Entry.save()

                    # Save Journal Info
                    if 'is_posted' in request.POST:
                        AR_Invoice_Entry.status = int(STATUS_TYPE_DICT['Posted'])
                    else:
                        AR_Invoice_Entry.status = int(STATUS_TYPE_DICT['Open'])
                    AR_Invoice_Entry.journal_type = dict(TRANSACTION_TYPES)['AR Invoice']
                    AR_Invoice_Entry.update_by = request.user.id
                    AR_Invoice_Entry.company_id = company_id

                    AR_Invoice_Entry.is_hidden = False
                    AR_Invoice_Entry.outstanding_amount = AR_Invoice_Entry.total_amount
                    AR_Invoice_Entry.real_outstanding = AR_Invoice_Entry.total_amount
                    try:
                        if request.POST['due_date']:
                            AR_Invoice_Entry.due_date = datetime.datetime.strptime(request.POST.get('due_date'), '%d-%m-%Y')
                        else:
                            AR_Invoice_Entry.due_date = AR_Invoice_Entry.document_date + timedelta(
                                int(AR_Invoice_Entry.customer.payment_term)) if AR_Invoice_Entry.customer.payment_term else None
                    except:
                        AR_Invoice_Entry.due_date = AR_Invoice_Entry.document_date
                    AR_Invoice_Entry.orig_exch_rate = 0
                    AR_Invoice_Entry.save()
                    if batch_id and int(batch_id) > 0:
                        AR_Invoice_Entry.code = generate_entry_number(company_id, batch_id)
                    else:
                        AR_Invoice_Entry.code = Batch_Entry.no_entries
                    AR_Invoice_Entry.batch_id = Batch_Entry.id
                    AR_Invoice_Entry.orig_exch_rate_fk_id = request.POST['orig_rate_pk'] \
                        if request.POST['orig_rate_pk'] != '' \
                        else AR_Invoice_Entry.exchange_rate_fk_id
                    AR_Invoice_Entry.save()

                    if 'is_posted' in request.POST:
                        GL_AR_Invoice_Entry = deepcopy(AR_Invoice_Entry)
                        GL_AR_Invoice_Entry.pk = None
                        GL_AR_Invoice_Entry.journal_type = dict(TRANSACTION_TYPES)['GL']
                        GL_AR_Invoice_Entry.status = int(STATUS_TYPE_DICT['Open'])
                        GL_AR_Invoice_Entry.save()

                    # get latest exchange rate
                    AR_Invoice_Entry.currency_id = AR_Invoice_Entry.customer.currency_id
                    AR_Invoice_Entry.save()
                    from_currency = AR_Invoice_Entry.customer.currency_id
                    to_currency = company.currency_id
                    if request.POST['exchange_rate']:
                        if 'exchange_rate_fk' in request.POST and request.POST['exchange_rate_fk']:
                            exchange_rate = ExchangeRate.objects.get(pk=request.POST['exchange_rate_fk'])
                            if request.POST['exchange_rate'] != exchange_rate.rate:
                                # exchange_rate = ExchangeRate()
                                # exchange_rate.from_currency_id = from_currency
                                # exchange_rate.to_currency_id = to_currency
                                # exchange_rate.company_id = company.id
                                # exchange_rate.rate = request.POST['exchange_rate']
                                # exchange_rate.is_hidden = 0
                                # exchange_rate.flag = 'ACCOUNTING'
                                # exchange_rate.save()
                                AR_Invoice_Entry.exchange_rate = request.POST['exchange_rate']
                                AR_Invoice_Entry.exchange_rate_fk_id = None
                                exchange_rate = None
                            else:
                                AR_Invoice_Entry.exchange_rate = exchange_rate.rate
                                AR_Invoice_Entry.exchange_rate_fk_id = exchange_rate.id
                        else:
                            AR_Invoice_Entry.exchange_rate = request.POST['exchange_rate']
                            AR_Invoice_Entry.exchange_rate_fk_id = None
                            exchange_rate = None
                    else:
                        exchange_rate = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                                    from_currency_id=from_currency,
                                                                    to_currency_id=to_currency,
                                                                    exchange_date__lte=AR_Invoice_Entry.document_date,
                                                                    flag='ACCOUNTING').order_by('exchange_date').last()
                        if not exchange_rate:
                            if from_currency == to_currency:
                                # exchange_rate = ExchangeRate()
                                # exchange_rate.from_currency_id = from_currency
                                # exchange_rate.to_currency_id = to_currency
                                # exchange_rate.company_id = company.id
                                # exchange_rate.rate = 1
                                # exchange_rate.is_hidden = 0
                                # exchange_rate.flag = 'ACCOUNTING'
                                # exchange_rate.save()
                                AR_Invoice_Entry.exchange_rate = 1
                                AR_Invoice_Entry.exchange_rate_fk_id = None
                            else:
                                try:
                                    transactionlib.rollback()
                                except:
                                    pass
                                messages.error(request, NO_EXCHANGE_RATE)
                                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
                        else:
                            AR_Invoice_Entry.exchange_rate = exchange_rate.rate
                            AR_Invoice_Entry.exchange_rate_fk_id = exchange_rate.id
                    if 'orig_rate' in request.POST:
                        AR_Invoice_Entry.orig_exch_rate = request.POST['orig_rate'] if request.POST['orig_rate'] != '' else AR_Invoice_Entry.exchange_rate
                    else:
                        AR_Invoice_Entry.orig_exch_rate = AR_Invoice_Entry.exchange_rate

                    perd_month, perd_year = get_fiscal_year_period(company_id, AR_Invoice_Entry.document_date)
                    if perd_month and perd_year:
                        AR_Invoice_Entry.perd_month = perd_month
                        AR_Invoice_Entry.perd_year = perd_year
                    else:
                        AR_Invoice_Entry.perd_month = int(request.POST.get('perd_month'))
                        AR_Invoice_Entry.perd_year = int(request.POST.get('perd_year'))
                    AR_Invoice_Entry.save()

                    if AR_Invoice_Entry.account_set_id and AR_Invoice_Entry.customer.account_set_id == None:
                        AR_Invoice_Entry.customer.account_set_id = AR_Invoice_Entry.account_set_id
                        AR_Invoice_Entry.customer.save()

                    transaction_list_new = request.POST['transaction_list_data']
                    for transaction in transaction_list_new:
                        trans = Transaction()
                        trans.distribution_code_id = transaction['distribution_id'] if transaction.get(
                            'distribution_id') else None
                        # trans.remark = transaction['description']
                        trans.description = transaction['description']
                        trans.account_id = transaction['account_id']
                        trans.amount = transaction['amount']
                        trans.base_tax_amount = transaction['base_tax_amount']
                        trans.tax_amount = transaction['tax_amount']
                        trans.total_amount = transaction['total_amount']
                        if transaction['tax_id'] and transaction['tax_id'] is not '0' and transaction['tax_id'] is not '':
                            trans.tax_id = int(transaction['tax_id'])
                        trans.currency_id = request.POST['currency']
                        trans.journal_id = AR_Invoice_Entry.id
                        trans.order_id = AR_Invoice_Entry.order_id if AR_Invoice_Entry.order else None
                        trans.company_id = company_id
                        trans.is_debit_account = (False, True)[AR_Invoice_Entry.document_type == DOCUMENT_TYPE_DICT['Credit Note']]
                        trans.is_credit_account = (True, False)[AR_Invoice_Entry.document_type == DOCUMENT_TYPE_DICT['Credit Note']]
                        trans.is_tax_include = int(transaction['is_tax_included'])
                        trans.is_tax_transaction = int(transaction['is_tax_transaction'])
                        trans.is_manual_tax_input = int(transaction['is_manual_tax_input'])
                        trans.functional_balance_type = (BALANCE_TYPE_DICT['Credit'],
                                                         BALANCE_TYPE_DICT['Debit'])[trans.is_debit_account]
                        trans.update_by = request.user.id
                        id_invoice_apply = request.POST['id_related_invoice']
                        try:
                            id_invoice_apply = int(id_invoice_apply)
                            journal_id_related = Journal.objects.get(pk=id_invoice_apply)
                            journal_id_related.is_fully_paid = False
                            journal_id_related.fully_paid_date = None
                            journal_id_related.save()
                            trans.related_invoice = journal_id_related
                        except:
                            trans.related_invoice = None
                        trans.exchange_rate = AR_Invoice_Entry.exchange_rate
                        trans.functional_currency_id = company.currency_id
                        trans.functional_amount = float(round_number(float(trans.total_amount) * float(AR_Invoice_Entry.exchange_rate)))
                        if exchange_rate:
                            trans.rate_date = exchange_rate.exchange_date
                        else:
                            try:
                                split_date = str(AR_Invoice_Entry.document_date).split('-')
                                trans.rate_date = split_date[0] + '-' + split_date[1] + '-01'
                            except:
                                trans.rate_date = AR_Invoice_Entry.document_date
                        trans.transaction_date = getTransactionDate(request, AR_Invoice_Entry.document_date)
                        trans.save()

                    # return redirect('/accounting/list/1/' + str(batch.id) + '/')
                    messages.success(request, "AR entry is created successfully")
                    return redirect('/accounting/add/AR/' + str(batch.id) + '/')
                else:
                    print(INVALID_FORM, ' Form error: ', form.errors, ' Batch error: ', batch_form.errors)
                    messages.error(request, INVALID_FORM)
                    # end transaction atomic
        # end if POST

        if batch_id and int(batch_id) > 0:
            batch = Batch.objects.get(pk=batch_id)
            if not batch.currency.is_decimal:
                batch.batch_amount = round_number(batch.batch_amount)
            batch_form = BatchInfoForm(instance=batch)
        if 'is_locked' in request.session and request.session['is_locked']:
            is_locked = 1
        else:
            is_locked = 0
        context = {'form': form, 'batch_form': batch_form, 'distribution_code_list': distribution_code_list_ar,
                   'account_list': account_list, 'tax_list': tax_list, 'batch': batch, 'batch_id': batch_id, 'is_locked': is_locked,
                   'company_currency': company.currency_id, 'next_journal': next_journal, 'prev_journal': prev_journal,
                   'first_journal': first_journal, 'last_journal': last_journal, 'next_batch': next_batch, 'prev_batch': prev_batch}
        return render(request, 'AR_entry.html', context)
    # end try
    except Exception as e:
        print(EXCEPTION_JOURNAL_ADD % ('AR Invoice'), e)
        logging.error(traceback.format_exc())
        messages.error(request, EXCEPTION_JOURNAL_ADD % ('AR Invoice'))
        return redirect('/accounting/list/1/' + str(batch_id + '/'))


@login_required
@check_fiscal
def journal_AR_edit(request, journal_id):
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    company = Company.objects.get(pk=company_id)
    journal = Journal.objects.get(pk=journal_id)
    form = ARInvoiceInfoForm(journal_id, instance=journal, company_id=company_id)
    prev_batch = 0
    next_batch = 0
    prev_journal = 0
    next_journal = 0
    first_journal = 0
    last_journal = 0

    if journal and journal.batch:
        batch = Batch.objects.get(pk=journal.batch_id)
        batch_form = BatchInfoForm(instance=batch)
        prev_journal, next_journal, first_journal, last_journal = get_batch_journals(batch.id, journal, False)
        prev_batch, next_batch = get_nearest_batches(company_id, dict(TRANSACTION_TYPES)['AR Invoice'], batch.batch_no)
    else:
        batch = Batch()
        batch_form = BatchInfoForm()
        prev_batch, next_batch = get_nearest_batches(company_id, dict(TRANSACTION_TYPES)['AR Invoice'], None)
    distribution_code_list_ar = []
    account_list = Account.objects.filter(is_hidden=False, is_active=True, company_id=company_id).order_by('account_segment', 'code')
    tax_list = Tax.objects.filter(
        is_hidden=False,
        company_id=company_id,
        tax_group__company_id=company_id,
        tax_group__transaction_type=int(TAX_TRX_TYPES_DICT['Sales']))

    transaction_list = Transaction.objects.filter(is_hidden=False, company_id=company_id, journal_id=journal_id)
    # if journal.account_set:
    #     transaction_list = all_transaction_list.exclude(account_id=journal.account_set.control_account_id)
    # else:
    #     transaction_list = None
    
    # if not transaction_list:
    #     transaction_list = all_transaction_list
    deleted_transaction_list = transaction_list
    id_inv = ''
    inv_name = ''
    for trx in transaction_list:
        if trx.related_invoice:
            id_inv = trx.related_invoice.id
            inv_name = trx.related_invoice.document_number

    try:
        with transactionlib.atomic():
            distribution_code_list = DistributionCode.objects.filter(is_hidden=False, is_active=True,
                                                                     company_id=company_id,
                                                                     type=DIS_CODE_TYPE_DICT['AR Distribution Code'])

            for dist_code_list in distribution_code_list:
                distribution_code_list_obj = {'id': dist_code_list.id,
                                              'code': dist_code_list.code,
                                              'name': dist_code_list.name,
                                              'gl_account_id': dist_code_list.gl_account_id,
                                              'tax_id': None}
                for tax_code in tax_list:
                    if tax_code.distribution_code_id:
                        if tax_code.distribution_code_id == dist_code_list.id:
                            distribution_code_list_obj['tax_id'] = tax_code.id
                            break
                distribution_code_list_ar.append(distribution_code_list_obj)

            if journal.order_id:
                j_order_id = journal.order_id
            else:
                j_order_id = None

            if journal.status == int(STATUS_TYPE_DICT['Draft']):
                j_status = int(STATUS_TYPE_DICT['Draft'])
            else:
                j_status = None

            if request.method == 'POST':
                new_post = []
                for old_trx in ast.literal_eval(request.POST['transaction_list_data']):
                    list_1 = {}
                    list_1['amount'] = old_trx['amount'].replace(",", "")
                    list_1['base_tax_amount'] = old_trx['base_tax_amount'].replace(",", "")
                    list_1['id'] = old_trx['id'] if old_trx['id'] else None
                    list_1['distribution_id'] = old_trx['distribution_id']
                    list_1['distribution_code'] = old_trx['distribution_code']
                    list_1['distribution_name'] = old_trx['distribution_name']
                    list_1['account_id'] = old_trx['account_id']
                    list_1['account_code'] = old_trx['account_code']
                    list_1['account_name'] = old_trx['account_name']
                    list_1['description'] = old_trx['description']
                    list_1['tax_amount'] = old_trx['tax_amount'].replace(",", "")
                    list_1['total_amount'] = old_trx['total_amount'].replace(",", "")
                    list_1['delete'] = old_trx['delete']
                    list_1['is_tax_included'] = old_trx['is_tax_included']
                    list_1['is_tax_transaction'] = old_trx['is_tax_transaction']
                    list_1['is_manual_tax_input'] = int(old_trx['is_manual_tax_input'])
                    list_1['tax_id'] = old_trx['tax_id']

                    new_post.append(list_1)

                tot_amu = request.POST.get('total_amount', '')
                tot_amu_1 = tot_amu.replace(",", "")
                amu = request.POST.get('amount', '')
                amu_1 = amu.replace(",", "")
                batch_amu = request.POST.get('batch_amount', '')
                batch_amu_1 = batch_amu.replace(",", "")
                doc_amount = request.POST.get('document_amount', '')
                doc_amount_1 = doc_amount.replace(",", "")

                post = request.POST.copy()  # to make it mutable

                post.update({

                    'total_amount': tot_amu_1,
                    'amount': amu_1,
                    'batch_amount': batch_amu_1,
                    'document_amount': doc_amount_1

                })
                request.POST = post
                request.POST['transaction_list_data'] = new_post
                form = ARInvoiceInfoForm(data=request.POST, instance=journal,
                                         company_id=company_id)
                batch_form = BatchInfoForm(data=request.POST, instance=batch)

                if 'is_locked' in request.session and request.session['is_locked']:
                    due_date = journal.due_date.strftime(
                        '%d-%m-%Y') if journal.due_date else journal.document_date.strftime('%d-%m-%Y')
                    payment_terms = 30
                    try:
                        payment_terms = journal.customer.payment_term
                    except:
                        pass
                    context = {'form': form, 'batch_form': batch_form, 'distribution_code_list': distribution_code_list_ar,
                            'account_list': account_list, 'tax_list': tax_list, 'transactions': transaction_list, 'journal': journal,
                            'journal_type': journal.journal_type, 'batch': batch, 'batch_id': batch.id, 'is_locked': 1,
                            'company_currency': company.currency_id, 'id_inv': id_inv, 'inv_name': inv_name,
                            'next_journal': next_journal, 'prev_journal': prev_journal, 'first_journal': first_journal, 'last_journal': last_journal,
                            'next_batch': next_batch, 'prev_batch': prev_batch, 'due_date': due_date, 'payment_terms': payment_terms}
                    return render(request, 'AR_entry.html', context)
                locale.setlocale(locale.LC_ALL, 'en_US.UTF-8')
                if form.is_valid() and batch_form.is_valid():
                    AR_Invoice_Entry = form.save(commit=False)
                    Batch_Entry = batch_form.save(commit=False)
                    batch_id = journal.batch_id
                    batch = Batch.objects.get(id=batch_id)
                    order_list2 = Journal.objects.filter(is_hidden=0, company_id=company_id, batch_id=batch_id).exclude(
                        pk=journal_id)
                    jou_array = []
                    for ls in order_list2:
                        list_obj = {}
                        if ls.document_type == DOCUMENT_TYPE_DICT['Credit Note']:
                            list_obj['total_amount'] = str(-1 * float(ls.total_amount))
                        else:
                            list_obj['total_amount'] = str(ls.total_amount)
                        list_obj['id'] = ls.id
                        list_obj['document_type'] = ls.document_type
                        jou_array.append(list_obj)
                    amo_new = 0
                    for amo in jou_array:
                        amo_new += float(amo['total_amount'])
                    if request.POST['document_type'] == '3':
                        new_amount_journal = str(-1 * float(request.POST['total_amount']))
                    else:
                        new_amount_journal = str(request.POST['total_amount'])
                    new_total_amount = Decimal(round_number(float(amo_new) + float(new_amount_journal), 6))
                    Batch_Entry.batch_amount = new_total_amount
                    Batch_Entry.update_by = request.user.id
                    # Batch_Entry.currency_id = AR_Invoice_Entry.currency_id
                    Batch_Entry.source_ledger = SOURCE_LEDGER_DICT['Account Receivable']
                    Batch_Entry.save()

                    # Save Journal Info
                    if 'is_posted' in request.POST:
                        AR_Invoice_Entry.status = int(STATUS_TYPE_DICT['Posted'])
                    else:
                        if j_status is None:
                            AR_Invoice_Entry.status = int(STATUS_TYPE_DICT['Open'])
                    AR_Invoice_Entry.journal_type = dict(TRANSACTION_TYPES)['AR Invoice']
                    AR_Invoice_Entry.update_by = request.user.id
                    AR_Invoice_Entry.company_id = company_id
                    AR_Invoice_Entry.is_hidden = False
                    AR_Invoice_Entry.outstanding_amount = AR_Invoice_Entry.total_amount
                    AR_Invoice_Entry.real_outstanding = AR_Invoice_Entry.total_amount
                    try:
                        if request.POST['due_date']:
                            AR_Invoice_Entry.due_date = datetime.datetime.strptime(request.POST.get('due_date'), '%d-%m-%Y')
                        else:
                            payment_term = int(AR_Invoice_Entry.customer.payment_term)
                            date_pay = (AR_Invoice_Entry.document_date + datetime.timedelta(days=payment_term))
                            due_date = datetime.datetime.strftime(date_pay, "%Y-%m-%d")
                            AR_Invoice_Entry.due_date = due_date if AR_Invoice_Entry.customer.payment_term else AR_Invoice_Entry.document_date
                    except:
                        AR_Invoice_Entry.due_date = AR_Invoice_Entry.document_date
                    AR_Invoice_Entry.batch_id = Batch_Entry.id
                    AR_Invoice_Entry.orig_exch_rate_fk_id = request.POST['orig_rate_pk'] if request.POST[
                        'orig_rate_pk'] != 'None' else AR_Invoice_Entry.exchange_rate_fk_id
                    AR_Invoice_Entry.orig_exch_rate = 0
                    AR_Invoice_Entry.has_old_rate = False
                    AR_Invoice_Entry.save()
                    if 'is_posted' in request.POST:
                        GL_AR_Invoice_Entry = deepcopy(AR_Invoice_Entry)
                        GL_AR_Invoice_Entry.pk = None
                        GL_AR_Invoice_Entry.journal_type = dict(TRANSACTION_TYPES)['GL']
                        GL_AR_Invoice_Entry.status = int(STATUS_TYPE_DICT['Open'])
                        GL_AR_Invoice_Entry.save()

                    # get latest exchange rate
                    AR_Invoice_Entry.currency_id = AR_Invoice_Entry.customer.currency_id
                    AR_Invoice_Entry.save()
                    from_currency = AR_Invoice_Entry.customer.currency_id
                    to_currency = company.currency_id
                    if request.POST['exchange_rate']:
                        if 'exchange_rate_fk' in request.POST and request.POST['exchange_rate_fk']:
                            exchange_rate = ExchangeRate.objects.get(pk=request.POST['exchange_rate_fk'])
                            if request.POST['exchange_rate'] != exchange_rate.rate:
                                # exchange_rate = ExchangeRate()
                                # exchange_rate.from_currency_id = from_currency
                                # exchange_rate.to_currency_id = to_currency
                                # exchange_rate.company_id = company.id
                                # exchange_rate.rate = request.POST['exchange_rate']
                                # exchange_rate.is_hidden = 0
                                # exchange_rate.flag = 'ACCOUNTING'
                                # exchange_rate.save()
                                AR_Invoice_Entry.exchange_rate = request.POST['exchange_rate']
                                AR_Invoice_Entry.exchange_rate_fk_id = None
                                exchange_rate = None
                            else:
                                AR_Invoice_Entry.exchange_rate = exchange_rate.rate
                                AR_Invoice_Entry.exchange_rate_fk_id = exchange_rate.id
                        else:
                            AR_Invoice_Entry.exchange_rate = request.POST['exchange_rate']
                            AR_Invoice_Entry.exchange_rate_fk_id = None
                            exchange_rate = None
                    else:
                        exchange_rate = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                                    from_currency_id=from_currency,
                                                                    to_currency_id=to_currency,
                                                                    exchange_date__lte=AR_Invoice_Entry.document_date,
                                                                    flag='ACCOUNTING').order_by('exchange_date').last()
                        if not exchange_rate:
                            if from_currency == to_currency:
                                # exchange_rate = ExchangeRate()
                                # exchange_rate.from_currency_id = from_currency
                                # exchange_rate.to_currency_id = to_currency
                                # exchange_rate.company_id = company.id
                                # exchange_rate.rate = 1
                                # exchange_rate.is_hidden = 0
                                # exchange_rate.flag = 'ACCOUNTING'
                                # exchange_rate.save()
                                AR_Invoice_Entry.exchange_rate = 1
                                AR_Invoice_Entry.exchange_rate_fk_id = None
                            else:
                                try:
                                    transactionlib.rollback()
                                except:
                                    pass
                                messages.error(request, NO_EXCHANGE_RATE)
                                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

                        else:
                            AR_Invoice_Entry.exchange_rate = exchange_rate.rate
                            AR_Invoice_Entry.exchange_rate_fk_id = exchange_rate.id
                    if 'orig_rate' in request.POST:
                        AR_Invoice_Entry.orig_exch_rate = request.POST['orig_rate'] if request.POST['orig_rate'] != '' else AR_Invoice_Entry.exchange_rate
                    else:
                        AR_Invoice_Entry.orig_exch_rate = AR_Invoice_Entry.exchange_rate

                    perd_month, perd_year = get_fiscal_year_period(company_id, AR_Invoice_Entry.document_date)
                    if perd_month and perd_year:
                        AR_Invoice_Entry.perd_month = perd_month
                        AR_Invoice_Entry.perd_year = perd_year
                    else:
                        AR_Invoice_Entry.perd_month = int(request.POST.get('perd_month'))
                        AR_Invoice_Entry.perd_year = int(request.POST.get('perd_year'))
                    AR_Invoice_Entry.save()
                    # Update related DO Order Entry
                    if j_order_id:
                        try:
                            do_order = Order.objects.get(pk=j_order_id)
                            do_order.document_date = request.POST.get('document_date')
                            do_order.subtotal = request.POST.get('amount')
                            do_order.total = request.POST.get('total_amount')
                            do_order.balance = request.POST.get('total_amount')
                            do_order.tax_amount = request.POST.get('tax_amount')
                            do_order.exchange_rate = AR_Invoice_Entry.exchange_rate
                            do_order.save()
                        except Exception as e:
                            do_order = None
                            print(EXCEPTION_JOURNAL_EDIT % ('DO Entry Update for AR Invoice'), e)
                    else:
                        do_order = None

                    transaction_list_new = request.POST['transaction_list_data']
                    for transaction in transaction_list_new:

                        trans = None
                        if transaction['id']:

                            # get a list of deleted old_transaction
                            if deleted_transaction_list:
                                deleted_transaction_list = deleted_transaction_list.exclude(pk=transaction['id'])
                            trans = Transaction.objects.get(pk=transaction['id'])
                            trans.distribution_code_id = transaction['distribution_id'] if transaction.get(
                                'distribution_id') else None
                            # trans.remark = transaction['description']
                            trans.description = transaction['description']
                            trans.account_id = transaction['account_id']
                            trans.amount = locale.atof(transaction['amount'])
                            trans.base_tax_amount = locale.atof(transaction['base_tax_amount'])
                            trans.tax_amount = locale.atof(transaction['tax_amount'])
                            trans.total_amount = locale.atof(transaction['total_amount'])
                            if transaction['tax_id'] and transaction['tax_id'] is not '0' and transaction['tax_id'] is not '':
                                trans.tax_id = int(transaction['tax_id'])
                            else:
                                trans.tax_id = None
                            trans.currency_id = request.POST['currency']
                            id_invoice_apply = request.POST['id_related_invoice']
                            try:
                                id_invoice_apply = int(id_invoice_apply)
                                journal_id_related = Journal.objects.get(pk=id_invoice_apply)
                                journal_id_related.is_fully_paid = False
                                journal_id_related.fully_paid_date = None
                                journal_id_related.save()
                                trans.related_invoice = journal_id_related
                            except:
                                trans.related_invoice = None
                            trans.is_tax_include = int(transaction['is_tax_included'])
                            trans.is_tax_transaction = int(transaction['is_tax_transaction'])
                            trans.is_manual_tax_input = int(transaction['is_manual_tax_input'])
                            trans.exchange_rate = AR_Invoice_Entry.exchange_rate
                            trans.functional_currency_id = company.currency_id
                            trans.functional_amount = float(round_number(float(trans.total_amount) * float(AR_Invoice_Entry.exchange_rate)))
                            trans.is_debit_account = (False, True)[AR_Invoice_Entry.document_type == DOCUMENT_TYPE_DICT['Credit Note']]
                            trans.is_credit_account = (True, False)[AR_Invoice_Entry.document_type == DOCUMENT_TYPE_DICT['Credit Note']]
                            trans.functional_balance_type = (BALANCE_TYPE_DICT['Credit'],
                                                             BALANCE_TYPE_DICT['Debit'])[trans.is_debit_account]
                            if exchange_rate:
                                trans.rate_date = exchange_rate.exchange_date
                            else:
                                try:
                                    split_date = str(AR_Invoice_Entry.document_date).split('-')
                                    trans.rate_date = split_date[0] + '-' + split_date[1] + '-01'
                                except:
                                    trans.rate_date = AR_Invoice_Entry.document_date

                            trans.save()
                        else:
                            trans = Transaction()
                            trans.distribution_code_id = transaction['distribution_id'] if transaction.get(
                                'distribution_id') else None
                            # trans.remark = transaction['description']
                            trans.description = transaction['description']
                            trans.account_id = transaction['account_id']
                            trans.amount = locale.atof(transaction['amount'])
                            trans.base_tax_amount = locale.atof(transaction['base_tax_amount'])
                            trans.tax_amount = transaction['tax_amount']
                            trans.total_amount = locale.atof(transaction['total_amount'])
                            if transaction['tax_id'] and transaction['tax_id'] is not '0' and transaction['tax_id'] is not '':
                                trans.tax_id = int(transaction['tax_id'])
                            else:
                                trans.tax_id = None
                            trans.currency_id = request.POST['currency']
                            trans.journal_id = AR_Invoice_Entry.id
                            trans.order_id = AR_Invoice_Entry.order_id if AR_Invoice_Entry.order else None
                            trans.company_id = company_id

                            id_invoice_apply = request.POST['id_related_invoice']
                            try:
                                id_invoice_apply = int(id_invoice_apply)
                                journal_id_related = Journal.objects.get(pk=id_invoice_apply)
                                journal_id_related.is_fully_paid = False
                                journal_id_related.fully_paid_date = None
                                journal_id_related.save()
                                trans.related_invoice = journal_id_related
                            except:
                                trans.related_invoice = None
                            trans.is_debit_account = (False, True)[AR_Invoice_Entry.document_type == DOCUMENT_TYPE_DICT['Credit Note']]
                            trans.is_credit_account = (True, False)[AR_Invoice_Entry.document_type == DOCUMENT_TYPE_DICT['Credit Note']]
                            trans.is_tax_include = int(transaction['is_tax_included'])
                            trans.is_tax_transaction = int(transaction['is_tax_transaction'])
                            trans.update_by = request.user.id

                            trans.exchange_rate = AR_Invoice_Entry.exchange_rate
                            trans.functional_currency_id = company.currency_id
                            trans.functional_amount = float(round_number(float(trans.total_amount) * float(AR_Invoice_Entry.exchange_rate)))
                            if exchange_rate:
                                trans.rate_date = exchange_rate.exchange_date
                            else:
                                try:
                                    split_date = str(AR_Invoice_Entry.document_date).split('-')
                                    trans.rate_date = split_date[0] + '-' + split_date[1] + '-01'
                                except:
                                    trans.rate_date = AR_Invoice_Entry.document_date

                            trans.functional_balance_type = (BALANCE_TYPE_DICT['Credit'],
                                                             BALANCE_TYPE_DICT['Debit'])[trans.is_debit_account]
                            trans.transaction_date = getTransactionDate(request, AR_Invoice_Entry.document_date)
                            trans.save()
                            if deleted_transaction_list:
                                deleted_transaction_list = deleted_transaction_list.exclude(pk=trans.id)

                        # Update related DO Order Entry
                        if do_order:
                            if transaction['distribution_id'] and transaction['distribution_id'] is not '0':
                                do_order.distribution_code_id = int(transaction['distribution_id'])
                            if transaction['tax_id'] and transaction['tax_id'] is not '0' and transaction['tax_id'] is not '':
                                do_order.tax_id = int(transaction['tax_id'])
                            do_order.save()

                    if deleted_transaction_list:
                        for deleted_transaction in deleted_transaction_list:
                            deleted_transaction.is_hidden = 1
                            deleted_transaction.save()

                    # return redirect('/accounting/list/1/' + str(journal.batch_id) + '/')
                    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
                else:
                    print(INVALID_FORM, ' Form error: ', form.errors, ' Batch error: ', batch_form.errors)
                    messages.error(request, INVALID_FORM)
    except Exception as e:
        print(EXCEPTION_JOURNAL_EDIT % ('AR Invoice'), e)
        logging.error(traceback.format_exc())
        messages.error(request, EXCEPTION_JOURNAL_EDIT % ('AR Invoice'))
    due_date = journal.due_date.strftime('%d-%m-%Y') if journal.due_date else journal.document_date.strftime('%d-%m-%Y')
    payment_terms = 30
    try:
        payment_terms = journal.customer.payment_term
    except:
        pass
    has_old_rate = 1 if journal.has_old_rate else 0
    if 'is_locked' in request.session and request.session['is_locked']:
        is_locked = 1
    else:
        is_locked = 0
    context = {'form': form, 'batch_form': batch_form, 'distribution_code_list': distribution_code_list_ar,
               'account_list': account_list, 'tax_list': tax_list, 'transactions': transaction_list, 'journal': journal,
               'journal_type': journal.journal_type, 'batch': batch, 'batch_id': batch.id, 'is_locked': is_locked,
               'company_currency': company.currency_id, 'id_inv': id_inv, 'inv_name': inv_name,
               'next_journal': next_journal, 'prev_journal': prev_journal, 'first_journal': first_journal, 'last_journal': last_journal,
               'next_batch': next_batch, 'prev_batch': prev_batch, 'due_date': due_date, 'payment_terms': payment_terms, 'has_old_rate': has_old_rate}
    return render(request, 'AR_entry.html', context)


@login_required
def journal_AR_delete(request, journal_id):
    try:
        with transactionlib.atomic():
            company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
            order_list = Journal.objects.get(pk=int(journal_id))
            batch_id = order_list.batch_id
            batch = Batch.objects.get(id=batch_id)
            delete = True

            user_journal_ids = Transaction.objects.filter(related_invoice_id=journal_id
                ).exclude(journal_id__isnull=True).exclude(journal__reverse_reconciliation=True
                ).exclude(journal__journal_type=dict(TRANSACTION_TYPES)['GL']
                ).exclude(is_hidden=True
                ).exclude(journal__is_hidden=True)
            if user_journal_ids.exists():
                delete = False
                msg = ''
                for trans in user_journal_ids:
                    msg += trans.journal.document_number + ', '
                messages.error(request, "Entry cannot be be deleted. Because these " + msg + "docs are using it")
                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
            
            if order_list and delete:
                jou_array = []

                order_list.is_hidden = 1
                order_list.update_date = datetime.datetime.now()
                order_list.update_by = request.user.id
                order_list.save()

                transactions = Transaction.objects.filter(company_id=company_id, is_hidden=0, journal_id=journal_id)
                for trans in transactions:
                    trans.is_hidden = True
                    trans.update_date = datetime.datetime.now()
                    trans.update_by = request.user.id
                    trans.save()
                    try:
                        if trans.related_invoice:
                            journal_id_related = Journal.objects.get(pk=trans.related_invoice_id)
                            journal_id_related.is_fully_paid = False
                            journal_id_related.save()
                    except:
                        pass

                order_list2 = Journal.objects.filter(is_hidden=0, company_id=company_id, batch_id=batch_id)
                for ls in order_list2:
                    list_obj = {}
                    if ls.document_type == DOCUMENT_TYPE_DICT['Credit Note']:
                        list_obj['total_amount'] = str(-1 * float(ls.total_amount))
                    else:
                        list_obj['total_amount'] = str(ls.total_amount)
                    list_obj['id'] = ls.id
                    list_obj['document_type'] = ls.document_type
                    jou_array.append(list_obj)
                amo_new = 0
                for amo in jou_array:
                    amo_new += float(amo['total_amount'])
                new_total_amount = round_number(amo_new, 6)
                batch.no_entries -= 1
                batch.batch_amount = new_total_amount
                batch.save()

                return redirect('/accounting/list/1/' + str(batch.id) + '/')

    except Exception as e:
        print(e)
        logging.error(traceback.format_exc())

    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))


@login_required
def create_migration(request):
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    year_list = AccountHistory.objects.filter(is_hidden=0, company_id__in=[company_id, None]).values(
        'period_year').distinct().order_by('-period_year')
    # with CLS
    # month_list = ['01','02','03','04','05','06','07','08','09','10','11','12','CLS']
    # without CLS
    month_list = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12']
    now = datetime.datetime.now()
    max_year = 0
    this_year = now.year
    for year in year_list:
        if int(year['period_year']) > int(max_year):
            max_year = year['period_year']
        if int(year['period_year']) == int(this_year):
            this_year = year['period_year']
    context = {
        'year_list': year_list,
        'max_year': max_year,
        'this_year': this_year,
        'month_list': month_list,
    }
    return render(request, 'create_migration.html', context)


@login_required
def Migrate_GL_closing(request, year):
    try:
        company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
        Migrate_GL(company_id, year, '12', True)
        messages.success(request, MESSAGE_SUCCES_CREATE_GL % ('Closing', str(year), '12'))

        return redirect('/accounting/batch_list/5/')
    except OSError as e:
        print(e)


@login_required
def Migrate_GL_open(request, year, month):
    try:
        company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
        if month == 'CLS':
            Migrate_GL_opening(company_id, year, month)
        else:  # Changing condition for month 0-9 because Opening can't use '01'
            Migrate_GL_opening(company_id, year, int(month))

        messages.success(request, MESSAGE_SUCCES_CREATE_GL % ('Opening ', str(year), str(month)))

        return redirect('/accounting/batch_list/5/')
    except OSError as e:
        print(e)


@login_required
def Migrate_GL_netchange(request, year, month):
    try:
        company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
        Migrate_GL(company_id, year, month)
        messages.success(request, MESSAGE_SUCCES_CREATE_GL % ('Net Change', str(year), str(month)))

        return redirect('/accounting/batch_list/5/')
    except OSError as e:
        print(e)


@login_required
# @transactionlib.atomic
def send_AR_invoice(request, journal_id, gl_batch_id):
    try:
        with transactionlib.atomic():
            company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
            journal = Journal.objects.get(pk=journal_id)
            transaction_list = Transaction.objects.filter(is_hidden=False, company_id=company_id,
                                                          journal_id=journal_id)
            credit_transaction_list = transaction_list.filter(is_credit_account=1)
            debit_transaction_list = transaction_list.filter(is_debit_account=1)
            company = Company.objects.get(pk=company_id)
            total_func_credit = 0.0

            # Save Journal Info
            journal.status = int(STATUS_TYPE_DICT['Posted'])
            journal.save()

            # Create Journal of GL
            GL_AR_Invoice_Entry = deepcopy(journal)
            GL_AR_Invoice_Entry.pk = None
            GL_AR_Invoice_Entry.journal_type = dict(TRANSACTION_TYPES)['GL']
            GL_AR_Invoice_Entry.status = int(STATUS_TYPE_DICT['Open'])
            GL_AR_Invoice_Entry.batch_id = gl_batch_id
            if journal.document_type == DOCUMENT_TYPE_DICT['Invoice']:
                GL_AR_Invoice_Entry.source_type = 'AR-IN'
            elif journal.document_type == DOCUMENT_TYPE_DICT['Debit Note']:
                GL_AR_Invoice_Entry.source_type = 'AR-DB'
            elif journal.document_type == DOCUMENT_TYPE_DICT['Credit Note']:
                GL_AR_Invoice_Entry.source_type = 'AR-CR'
            GL_AR_Invoice_Entry.save()

            # get latest exchange rate
            from_currency = journal.customer.currency_id
            to_currency = company.currency_id
            exchange_rate = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                        from_currency_id=from_currency, to_currency_id=to_currency,
                                                        flag='ACCOUNTING').order_by(
                'exchange_date').last()
            for transaction in credit_transaction_list:
                if transaction.is_tax_transaction:
                    gl_trans_tax = deepcopy(transaction)
                    gl_trans_tax.pk = None
                    # gl_trans_tax.reference = GL_AR_Invoice_Entry.document_number
                    gl_trans_tax.remark = GL_AR_Invoice_Entry.name + ' - ' + (
                        transaction.remark if transaction.remark else '')
                    gl_trans_tax.amount = transaction.tax_amount
                    gl_trans_tax.base_tax_amount = transaction.tax_amount
                    gl_trans_tax.tax_amount = 0
                    gl_trans_tax.total_amount = transaction.tax_amount
                    gl_trans_tax.journal_id = GL_AR_Invoice_Entry.id
                    gl_trans_tax.functional_amount = float(gl_trans_tax.total_amount) * float(
                        transaction.exchange_rate)
                    gl_trans_tax.save()
                    total_func_credit += float(gl_trans_tax.functional_amount)
                elif float(transaction.amount) == 0.000000 and float(transaction.tax_amount) != 0.000000:
                    gl_trans_tax = deepcopy(transaction)
                    gl_trans_tax.pk = None
                    # gl_trans_tax.reference = GL_AR_Invoice_Entry.document_number
                    gl_trans_tax.remark = GL_AR_Invoice_Entry.name + ' - ' + (
                        transaction.remark if transaction.remark else '')
                    gl_trans_tax.amount = transaction.tax_amount
                    gl_trans_tax.base_tax_amount = transaction.tax_amount
                    gl_trans_tax.tax_amount = 0
                    gl_trans_tax.total_amount = transaction.tax_amount
                    gl_trans_tax.journal_id = GL_AR_Invoice_Entry.id
                    gl_trans_tax.functional_amount = float(gl_trans_tax.total_amount) * float(
                        transaction.exchange_rate)
                    gl_trans_tax.save()
                    total_func_credit += float(gl_trans_tax.functional_amount)
                else:
                    gl_trans_credit = deepcopy(transaction)
                    gl_trans_credit.pk = None
                    # gl_trans_credit.reference = GL_AR_Invoice_Entry.document_number
                    gl_trans_credit.remark = GL_AR_Invoice_Entry.name + ' - ' + (
                        transaction.remark if transaction.remark else '')
                    gl_trans_credit.journal_id = GL_AR_Invoice_Entry.id
                    # if the tax_amount > 0, write a row for GST Output Tax transaction
                    if float(gl_trans_credit.tax_amount) > 0:
                        gl_trans_credit.total_amount = transaction.amount
                        gl_trans_credit.tax_amount = 0
                        gl_trans_credit.functional_amount = float(gl_trans_credit.total_amount) * float(exchange_rate.rate)

                        # create tax transaction
                        gl_trans_tax = deepcopy(gl_trans_credit)
                        gl_trans_tax.remark = GL_AR_Invoice_Entry.name
                        gl_trans_tax.amount = transaction.tax_amount
                        gl_trans_tax.base_tax_amount = transaction.tax_amount
                        gl_trans_tax.tax_amount = 0
                        gl_trans_tax.total_amount = transaction.tax_amount
                        gl_trans_tax.functional_amount = float(gl_trans_tax.total_amount) * float(exchange_rate.rate)
                        gl_trans_tax.account_id = transaction.tax.tax_account_code_id
                        gl_trans_tax.save()

                        total_func_credit += float(gl_trans_credit.functional_amount) + (
                            float(gl_trans_tax.functional_amount) if gl_trans_tax else 0)
                    else:
                        total_func_credit += float(gl_trans_credit.functional_amount)

                    gl_trans_credit.save()

            last_debit_transaction = debit_transaction_list.last()
            gl_trans_debit = deepcopy(last_debit_transaction)
            gl_trans_debit.pk = None
            # gl_trans_debit.reference = GL_AR_Invoice_Entry.document_number
            gl_trans_debit.remark = GL_AR_Invoice_Entry.name
            gl_trans_debit.journal_id = GL_AR_Invoice_Entry.id
            gl_trans_debit.save()

            # for rounding floating point when exchange currency
            if float(total_func_credit) != float(gl_trans_debit.functional_amount):
                try:
                    foreign_exchange_account = Account.objects.get(pk=journal.account_set.revaluation_rounding_id)
                except Exception as e:
                    print("Revaluation account couldn't be retrieved!!")
                    print(e)
                    logging.error(traceback.format_exc())
                    return False

                gl_exchange = Transaction()
                # gl_exchange.reference = GL_AR_Invoice_Entry.document_number
                gl_exchange.remark = GL_AR_Invoice_Entry.name
                gl_exchange.journal_id = GL_AR_Invoice_Entry.id
                gl_exchange.account_id = foreign_exchange_account.id if foreign_exchange_account else None
                gl_exchange.company_id = company_id
                gl_exchange.currency_id = last_debit_transaction.currency_id
                gl_exchange.update_by = last_debit_transaction.update_by
                gl_exchange.order_id = last_debit_transaction.order_id if last_debit_transaction.order else None
                if exchange_rate:
                    gl_exchange.exchange_rate = exchange_rate.rate
                    gl_exchange.functional_currency_id = company.currency_id
                    gl_exchange.rate_date = exchange_rate.exchange_date
                foreign_exchange_amount = float(gl_trans_debit.functional_amount) - float(total_func_credit)
                if foreign_exchange_amount > 0:
                    gl_exchange.is_credit_account = True
                    gl_exchange.functional_amount = foreign_exchange_amount
                else:
                    gl_exchange.is_debit_account = True
                    gl_exchange.functional_amount = math.fabs(foreign_exchange_amount)
                gl_exchange.functional_balance_type = (BALANCE_TYPE_DICT['Credit'],
                                                       BALANCE_TYPE_DICT['Debit'])[gl_exchange.is_debit_account]
                gl_exchange.transaction_date = request.session['session_date']
                gl_exchange.save()

    except Exception as e:
        print(e)
        logging.error(traceback.format_exc())
        return False
    return True

# Reopen ARAP


@login_required
def reopen_ARAP(request, batch_id):
    with transactionlib.atomic():
        try:
            company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
            related_invoice_list = []
            reopen_batch = Batch.objects.get(pk=batch_id)
            GL_batch = Batch.objects.filter(related_batch_id=batch_id).order_by('id').last()
            if GL_batch:
                if GL_batch.status in (int(STATUS_TYPE_DICT['Removed']), int(STATUS_TYPE_DICT['Deleted'])):

                    # Reopen Batch
                    # GL_batch.is_hidden = True
                    # GL_batch.status = int(STATUS_TYPE_DICT['Removed'])
                    # GL_batch.save()

                    reopen_batch.status = int(STATUS_TYPE_DICT['Open'])
                    messages.success(request, MESSAGE_SUCCESS_ARAP % (reopen_batch.batch_no))
                    reopen_batch.save()

                    # Reopen Journal
                    reopen_journals = Journal.objects.filter(batch_id=reopen_batch.id, is_hidden=False)
                    for reopen_journal in reopen_journals:
                        reopen_journal.status = int(STATUS_TYPE_DICT['Open'])
                        reopen_journal.save()

                        transaction_list = Transaction.objects.filter(is_hidden=False, company_id=company_id,
                                                                    journal_id=reopen_journal.id)\
                            .select_related('journal')\
                            .order_by('id')

                        # Adjustment transaction entry
                        if reopen_journal.journal_type == dict(TRANSACTION_TYPES)['AR Receipt']:
                            for trans in transaction_list:
                                if float(trans.adjustment_amount) != 0.000000:
                                    adj_journal = Journal.objects.filter(transaction_id=trans.id)
                                    if adj_journal:
                                        adj_journal = adj_journal.first()
                                        adj_journal.status = int(STATUS_TYPE_DICT['Open'])
                                        adj_journal.save()

                        if reopen_journal.journal_type in [dict(TRANSACTION_TYPES)['AP Payment']]:
                            for firstTrx in transaction_list:
                                if firstTrx.related_invoice_id:
                                    try:
                                        related_invoice = Journal.objects.get(pk=firstTrx.related_invoice_id)
                                        related_invoice.payment_number -= 1
                                        related_invoice.discount_amount = float(related_invoice.discount_amount) - float(firstTrx.discount_amount)
                                        related_invoice.paid_amount = float(related_invoice.paid_amount) - float(firstTrx.amount)
                                        related_invoice.outstanding_amount = float(related_invoice.outstanding_amount) + float(
                                            firstTrx.amount)

                                        real_outstanding_amount = float(related_invoice.outstanding_amount) - \
                                            float(related_invoice.discount_amount)

                                        if float(real_outstanding_amount) <= 0:
                                            related_invoice.is_fully_paid = True
                                            related_invoice.fully_paid_date = reopen_journal.document_date
                                            related_invoice.outstanding_amount = 0
                                        else:
                                            related_invoice.is_fully_paid = False
                                            related_invoice.fully_paid_date = None
                                        related_invoice.real_outstanding = related_invoice.outstanding_amount
                                        related_invoice.save()
                                        firstTrx.related_journal_outstanding = real_outstanding_amount
                                        firstTrx.save()
                                        # related_invoice_list.append(related_invoice.id)
                                    except Exception as e:
                                        print(e)
                        if reopen_journal.journal_type in [dict(TRANSACTION_TYPES)['AR Receipt']]:
                            for firstTrx in transaction_list:
                                if firstTrx.related_invoice_id:
                                    try:
                                        related_invoice = Journal.objects.get(pk=firstTrx.related_invoice_id)
                                        related_invoice.payment_number -= 1
                                        if related_invoice.journal_type == dict(TRANSACTION_TYPES)['AR Invoice']:
                                            related_invoice.paid_amount = float(related_invoice.paid_amount) - float(firstTrx.amount)
                                            related_invoice.discount_amount = float(related_invoice.discount_amount) - float(firstTrx.discount_amount)
                                            related_invoice.adjustment_amount = float(related_invoice.adjustment_amount) - float(firstTrx.adjustment_amount)
                                            related_invoice.outstanding_amount = float(related_invoice.outstanding_amount) + float(
                                                firstTrx.amount)

                                            real_outstanding_amount = float(related_invoice.outstanding_amount) + \
                                                float(related_invoice.adjustment_amount) - \
                                                float(related_invoice.discount_amount)

                                            if float(real_outstanding_amount) <= 0:
                                                related_invoice.outstanding_amount = 0  # force outstanding amount to 0
                                                related_invoice.is_fully_paid = True
                                                related_invoice.fully_paid_date = reopen_journal.document_date
                                            else:
                                                related_invoice.is_fully_paid = False
                                                related_invoice.fully_paid_date = None
                                            firstTrx.related_journal_outstanding = real_outstanding_amount
                                        else:
                                            related_invoice.paid_amount = float(related_invoice.paid_amount) - float(firstTrx.total_amount)
                                            related_invoice.discount_amount = float(related_invoice.discount_amount) - float(firstTrx.discount_amount)
                                            related_invoice.adjustment_amount = float(related_invoice.adjustment_amount) - float(firstTrx.adjustment_amount)

                                            real_document_amount = float(related_invoice.customer_unapplied) + \
                                                float(related_invoice.adjustment_amount) - \
                                                float(related_invoice.discount_amount)

                                            if float(real_document_amount) - float(related_invoice.paid_amount) <= 0:
                                                related_invoice.is_fully_paid = True
                                                related_invoice.outstanding_amount = 0
                                                related_invoice.fully_paid_date = reopen_journal.document_date
                                            else:
                                                related_invoice.is_fully_paid = False
                                                related_invoice.fully_paid_date = None
                                                related_invoice.outstanding_amount = float(real_document_amount) - float(related_invoice.paid_amount)
                                            firstTrx.related_journal_outstanding = related_invoice.outstanding_amount

                                        firstTrx.save()
                                        related_invoice.real_outstanding = related_invoice.outstanding_amount
                                        related_invoice.save()
                                        # related_invoice_list.append(related_invoice.id)
                                    except Exception as e:
                                        print(e)
                        elif reopen_journal.journal_type in [dict(TRANSACTION_TYPES)['AR Invoice'], dict(TRANSACTION_TYPES)['AP Invoice']]:
                            firstTrx = transaction_list.first()
                            if firstTrx.related_invoice_id:
                                try:
                                    related_invoice = Journal.objects.get(pk=firstTrx.related_invoice_id)

                                    if reopen_journal.document_type == DOCUMENT_TYPE_DICT['Debit Note']:
                                        if related_invoice.document_type == DOCUMENT_TYPE_DICT['Credit Note']:
                                            # related_invoice.payment_number -= 1
                                            # if related_invoice.outstanding_amount >= 0:
                                            if related_invoice.outstanding_amount >= 0:
                                                related_invoice.paid_amount += Decimal(reopen_journal.total_amount)
                                                related_invoice.outstanding_amount += Decimal(reopen_journal.total_amount)
                                            else:
                                                related_invoice.paid_amount -= Decimal(reopen_journal.total_amount)
                                                related_invoice.outstanding_amount -= Decimal(reopen_journal.total_amount)
                                        else:
                                            related_invoice.outstanding_amount -= Decimal(reopen_journal.total_amount)
                                    elif reopen_journal.document_type == DOCUMENT_TYPE_DICT['Credit Note']:
                                        if related_invoice.document_type == DOCUMENT_TYPE_DICT['Credit Note']:
                                            if related_invoice.outstanding_amount >= 0:
                                                related_invoice.outstanding_amount -= Decimal(reopen_journal.total_amount)
                                            else:
                                                related_invoice.outstanding_amount += Decimal(reopen_journal.total_amount)
                                        else:
                                            # related_invoice.payment_number -= 1
                                            # if related_invoice.outstanding_amount >= 0:
                                            related_invoice.paid_amount -= Decimal(reopen_journal.total_amount)
                                            related_invoice.outstanding_amount += Decimal(reopen_journal.total_amount)
                                    related_invoice.is_fully_paid = (False, True)[related_invoice.outstanding_amount == 0]
                                    if related_invoice.is_fully_paid:
                                        related_invoice.fully_paid_date = firstTrx.journal.document_date
                                    else:
                                        related_invoice.fully_paid_date = None
                                    related_invoice.real_outstanding = related_invoice.outstanding_amount
                                    related_invoice.save()
                                    related_invoice_list.append(related_invoice.id)

                                    if reopen_journal.document_type == DOCUMENT_TYPE_DICT['Credit Note']:
                                        reopen_journal.outstanding_amount -= reopen_journal.total_amount
                                    else:
                                        reopen_journal.outstanding_amount += reopen_journal.total_amount
                                    # reopen_journal.paid_amount += reopen_journal.total_amount
                                    reopen_journal.is_fully_paid = (False, True)[reopen_journal.outstanding_amount == 0]
                                    if not reopen_journal.is_fully_paid:
                                    #     reopen_journal.fully_paid_date = firstTrx.journal.document_date
                                    # else:
                                        reopen_journal.fully_paid_date = None
                                    reopen_journal.real_outstanding = reopen_journal.outstanding_amount
                                    reopen_journal.save()
                                except Exception as e:
                                    print(e)

                else:
                    messages.error(request, MESSAGE_ERROR_ARAP % (GL_batch.batch_no))
            else:
                reopen_batch.status = int(STATUS_TYPE_DICT['Open'])
                messages.success(request, MESSAGE_SUCCESS_ARAP % (reopen_batch.batch_no))
                reopen_batch.save()

                # Reopen Journal
                reopen_journals = Journal.objects.filter(batch_id=reopen_batch.id, is_hidden=False)
                for reopen_journal in reopen_journals:
                    reopen_journal.status = int(STATUS_TYPE_DICT['Open'])
                    reopen_journal.save()

                    transaction_list = Transaction.objects.filter(is_hidden=False, company_id=company_id,
                                                                journal_id=reopen_journal.id)\
                        .select_related('journal')\
                        .order_by('id')

                    # Adjustment transaction entry
                    if reopen_journal.journal_type == dict(TRANSACTION_TYPES)['AR Receipt']:
                        for trans in transaction_list:
                            if float(trans.adjustment_amount) != 0.000000:
                                adj_journal = Journal.objects.filter(transaction_id=trans.id)
                                if adj_journal:
                                    adj_journal = adj_journal.first()
                                    adj_journal.status = int(STATUS_TYPE_DICT['Open'])
                                    adj_journal.save()

                    if reopen_journal.journal_type in [dict(TRANSACTION_TYPES)['AP Payment']]:
                        for firstTrx in transaction_list:
                            if firstTrx.related_invoice_id:
                                try:
                                    related_invoice = Journal.objects.get(pk=firstTrx.related_invoice_id)
                                    related_invoice.payment_number -= 1
                                    related_invoice.discount_amount = float(related_invoice.discount_amount) - float(firstTrx.discount_amount)
                                    related_invoice.paid_amount = float(related_invoice.paid_amount) - float(firstTrx.amount)
                                    related_invoice.outstanding_amount = float(related_invoice.outstanding_amount) + float(
                                        firstTrx.amount)

                                    real_outstanding_amount = float(related_invoice.outstanding_amount) - \
                                        float(related_invoice.discount_amount)

                                    if float(real_outstanding_amount) <= 0:
                                        related_invoice.is_fully_paid = True
                                        related_invoice.fully_paid_date = reopen_journal.document_date
                                        related_invoice.outstanding_amount = 0
                                    else:
                                        related_invoice.is_fully_paid = False
                                        related_invoice.fully_paid_date = None
                                    related_invoice.real_outstanding = related_invoice.outstanding_amount
                                    related_invoice.save()
                                    # related_invoice_list.append(related_invoice.id)
                                    firstTrx.related_journal_outstanding = real_outstanding_amount
                                    firstTrx.save()
                                    # related_invoice_list.append(related_invoice.id)
                                except Exception as e:
                                    print(e)
                    if reopen_journal.journal_type in [dict(TRANSACTION_TYPES)['AR Receipt']]:
                        for firstTrx in transaction_list:
                            if firstTrx.related_invoice_id:
                                try:
                                    related_invoice = Journal.objects.get(pk=firstTrx.related_invoice_id)
                                    related_invoice.payment_number -= 1
                                    if related_invoice.journal_type == dict(TRANSACTION_TYPES)['AR Invoice']:
                                        related_invoice.paid_amount = float(related_invoice.paid_amount) - float(firstTrx.amount)
                                        related_invoice.discount_amount = float(related_invoice.discount_amount) - float(firstTrx.discount_amount)
                                        related_invoice.adjustment_amount = float(related_invoice.adjustment_amount) - float(firstTrx.adjustment_amount)
                                        related_invoice.outstanding_amount = float(related_invoice.outstanding_amount) + float(
                                            firstTrx.amount)

                                        real_outstanding_amount = float(related_invoice.outstanding_amount) + \
                                            float(related_invoice.adjustment_amount) - \
                                            float(related_invoice.discount_amount)

                                        if float(real_outstanding_amount) <= 0:
                                            related_invoice.outstanding_amount = 0  # force outstanding amount to 0
                                            related_invoice.is_fully_paid = True
                                            related_invoice.fully_paid_date = reopen_journal.document_date
                                        else:
                                            related_invoice.is_fully_paid = False
                                            related_invoice.fully_paid_date = None
                                        firstTrx.related_journal_outstanding = real_outstanding_amount
                                    else:
                                        related_invoice.paid_amount = float(related_invoice.paid_amount) - float(firstTrx.total_amount)
                                        related_invoice.discount_amount = float(related_invoice.discount_amount) - float(firstTrx.discount_amount)
                                        related_invoice.adjustment_amount = float(related_invoice.adjustment_amount) - float(firstTrx.adjustment_amount)

                                        real_document_amount = float(related_invoice.customer_unapplied) + \
                                            float(related_invoice.adjustment_amount) - \
                                            float(related_invoice.discount_amount)

                                        if float(real_document_amount) - float(related_invoice.paid_amount) <= 0:
                                            related_invoice.is_fully_paid = True
                                            related_invoice.outstanding_amount = 0
                                            related_invoice.fully_paid_date = reopen_journal.document_date
                                        else:
                                            related_invoice.is_fully_paid = False
                                            related_invoice.fully_paid_date = None
                                            related_invoice.outstanding_amount = float(real_document_amount) - float(related_invoice.paid_amount)
                                        firstTrx.related_journal_outstanding = related_invoice.outstanding_amount

                                    firstTrx.save()
                                    related_invoice.real_outstanding = related_invoice.outstanding_amount
                                    related_invoice.save()
                                    # related_invoice_list.append(related_invoice.id)
                                except Exception as e:
                                    print(e)
                    elif reopen_journal.journal_type in [dict(TRANSACTION_TYPES)['AR Invoice'], dict(TRANSACTION_TYPES)['AP Invoice']]:
                        firstTrx = transaction_list.first()
                        if firstTrx.related_invoice_id:
                            try:
                                related_invoice = Journal.objects.get(pk=firstTrx.related_invoice_id)
                                if reopen_journal.document_type == DOCUMENT_TYPE_DICT['Debit Note']:
                                    if related_invoice.document_type == DOCUMENT_TYPE_DICT['Credit Note']:
                                        # related_invoice.payment_number -= 1
                                        # if related_invoice.outstanding_amount >= 0:
                                        related_invoice.paid_amount -= Decimal(reopen_journal.total_amount)
                                        related_invoice.outstanding_amount -= Decimal(reopen_journal.total_amount)
                                    else:
                                        related_invoice.outstanding_amount -= Decimal(reopen_journal.total_amount)
                                elif reopen_journal.document_type == DOCUMENT_TYPE_DICT['Credit Note']:
                                    if related_invoice.document_type == DOCUMENT_TYPE_DICT['Credit Note']:
                                        related_invoice.outstanding_amount += Decimal(reopen_journal.total_amount)
                                    else:
                                        # related_invoice.payment_number -= 1
                                        # if related_invoice.outstanding_amount >= 0:
                                        related_invoice.paid_amount -= Decimal(reopen_journal.total_amount)
                                        related_invoice.outstanding_amount += Decimal(reopen_journal.total_amount)
                                related_invoice.is_fully_paid = (False, True)[related_invoice.outstanding_amount == 0]
                                if related_invoice.is_fully_paid:
                                    related_invoice.fully_paid_date = firstTrx.journal.document_date
                                else:
                                    related_invoice.fully_paid_date = None
                                related_invoice.real_outstanding = related_invoice.outstanding_amount
                                related_invoice.save()
                                related_invoice_list.append(related_invoice.id)

                                if reopen_journal.document_type == DOCUMENT_TYPE_DICT['Credit Note']:
                                    reopen_journal.outstanding_amount -= reopen_journal.total_amount
                                else:
                                    reopen_journal.outstanding_amount += reopen_journal.total_amount
                                reopen_journal.is_fully_paid = (False, True)[reopen_journal.outstanding_amount == 0]
                                reopen_journal.real_outstanding = reopen_journal.outstanding_amount
                                reopen_journal.save()
                            except Exception as e:
                                print(e)

            tType = 'AP'
            if reopen_batch.batch_type in [dict(TRANSACTION_TYPES)['AR Invoice'], dict(TRANSACTION_TYPES)['AR Receipt']]:
                tType = 'AR'

            # fix aging
            if len(related_invoice_list):
                update_aging_thread = threading.Thread(name='fix_payments_outs_amount',
                                                    target=fix_payments_outs_amount,
                                                    args=(request, tType, related_invoice_list, ), daemon=False)
                update_aging_thread.start()

        except Exception as e:
            print(e)
            transactionlib.set_rollback(True)
    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))


@login_required
@check_fiscal
# @transactionlib.atomic
def send_AR_batch(request, batch_id):
    try:
        with transactionlib.atomic():
            if 'is_locked' in request.session and request.session['is_locked']:
                return redirect('/accounting/list/1/' + str(batch_id) + '/')
            company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
            company = Company.objects.get(pk=company_id)
            session_date = request.session['session_date']
            ar_batch = Batch.objects.get(pk=batch_id)
            journal_list = Journal.objects.filter(is_hidden=0, batch_id=batch_id, company_id=company_id)\
                .select_related('batch')

            for journal_item in journal_list:
                if journal_item.total_amount != journal_item.document_amount:
                    messages.error(request, MESSAGE_ERROR_1 + ' of entry : ' + journal_item.code)
                    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
            # Update Status of AR Batch
            ar_batch.status = int(STATUS_TYPE_DICT['Posted'])
            ar_batch.save()

            # Create new GL Batch
            gl_batch = deepcopy(ar_batch)
            gl_batch.pk = None
            gl_batch.company_id = company_id
            gl_batch.batch_no = generate_batch_number(company_id, dict(TRANSACTION_TYPES)['GL'])
            gl_batch.description = 'Generated from AR Invoice ' + str(ar_batch.batch_date.strftime('%d/%m/%Y'))
            gl_batch.batch_type = dict(TRANSACTION_TYPES)['GL']
            gl_batch.document_type = int(DOCUMENT_TYPE_DICT['Invoice'])
            gl_batch.no_entries = journal_list.count()
            gl_batch.batch_amount = 0
            gl_batch.posting_sequence = 0
            gl_batch.input_type = int(INPUT_TYPE_DICT['Generated'])
            gl_batch.status = int(STATUS_TYPE_DICT['Open'])
            gl_batch.create_date = datetime.datetime.today()
            gl_batch.update_date = datetime.datetime.today()
            gl_batch.is_hidden = False
            gl_batch.related_batch_id = ar_batch.id
            gl_batch.save()

            for journal_item in journal_list:
                transaction_list = Transaction.objects.filter(is_hidden=False, company_id=company_id,
                                                              journal_id=journal_item.id)\
                    .select_related('journal')
                total_source = 0.0
                total_func = 0.0
                tax_source = 0.0
                tax_func = 0.0
                tax_id = None

                # Save Journal Info
                journal_item.status = int(STATUS_TYPE_DICT['Posted'])
                journal_item.update_by = request.user.id
                journal_item.update_date = datetime.datetime.now()
                journal_item.save()

                # Create Journal of GL
                GL_AR_Invoice_Entry = deepcopy(journal_item)
                GL_AR_Invoice_Entry.pk = None
                GL_AR_Invoice_Entry.journal_type = dict(TRANSACTION_TYPES)['GL']
                GL_AR_Invoice_Entry.status = int(STATUS_TYPE_DICT['Open'])
                GL_AR_Invoice_Entry.batch_id = gl_batch.id
                if journal_item.document_type == DOCUMENT_TYPE_DICT['Invoice']:
                    GL_AR_Invoice_Entry.source_type = 'AR-IN'
                elif journal_item.document_type == DOCUMENT_TYPE_DICT['Debit Note']:
                    GL_AR_Invoice_Entry.source_type = 'AR-DB'
                elif journal_item.document_type == DOCUMENT_TYPE_DICT['Credit Note']:
                    GL_AR_Invoice_Entry.source_type = 'AR-CR'
                GL_AR_Invoice_Entry.exchange_rate = 1
                GL_AR_Invoice_Entry.amount = float(round_number(math.fabs(journal_item.total_amount * journal_item.exchange_rate)))
                GL_AR_Invoice_Entry.total_amount = float(round_number(math.fabs(journal_item.total_amount * journal_item.exchange_rate)))
                GL_AR_Invoice_Entry.save()
                name = generate_description(company_id, journal_item, 'G/L Entry Description')
                if name and name != '':
                    GL_AR_Invoice_Entry.name = name
                else:
                    GL_AR_Invoice_Entry.name = ""
                GL_AR_Invoice_Entry.save()

                # Update batch_amount
                gl_batch.batch_amount += GL_AR_Invoice_Entry.total_amount
                gl_batch.save()

                # if transaction_list:
                #     lst_transaction = transaction_list.last()
                #     j_desc = generate_description(company_id, journal_item, 'G/L Detail Description', False, lst_transaction)
                #     j_reference = generate_description(company_id, journal_item, 'G/L Detail Reference', False, lst_transaction)
                #     j_remark = generate_description(company_id, journal_item, 'G/L Detail Comment', False, lst_transaction)

                # Create non-bank Transactions
                for trans_non_bank in transaction_list:
                    j_desc = generate_description(company_id, journal_item, 'G/L Detail Description', False, trans_non_bank)
                    j_reference = generate_description(company_id, journal_item, 'G/L Detail Reference', False, trans_non_bank)
                    j_remark = generate_description(company_id, journal_item, 'G/L Detail Comment', False, trans_non_bank)
                    desc = generate_description(company_id, journal_item, 'G/L Detail Description', True, trans_non_bank)
                    reference = generate_description(company_id, journal_item, 'G/L Detail Reference', True, trans_non_bank)
                    remark = generate_description(company_id, journal_item, 'G/L Detail Comment', True, trans_non_bank)
                    if trans_non_bank.is_tax_transaction:
                        # gl_trans_tax = deepcopy(trans_non_bank)
                        # gl_trans_tax.pk = None
                        # if desc != '':
                        #     gl_trans_tax.description = desc
                        # if reference != '':
                        #     gl_trans_tax.reference = reference
                        # if remark != '':
                        #     gl_trans_tax.remark = remark
                        # else:
                        #     gl_trans_tax.remark = GL_AR_Invoice_Entry.name + ' - ' + (
                        #         trans_non_bank.remark if trans_non_bank.remark else '')
                        # gl_trans_tax.amount = math.fabs(trans_non_bank.tax_amount)
                        # gl_trans_tax.base_tax_amount = math.fabs(trans_non_bank.tax_amount)
                        # gl_trans_tax.tax_amount = 0
                        # gl_trans_tax.total_amount = math.fabs(trans_non_bank.tax_amount)
                        # gl_trans_tax.journal_id = GL_AR_Invoice_Entry.id
                        # gl_trans_tax.source_type = GL_AR_Invoice_Entry.source_type
                        # gl_trans_tax.functional_amount = math.fabs(float(gl_trans_tax.total_amount) * float(
                        #     trans_non_bank.exchange_rate))
                        # if trans_non_bank.total_amount < 0:
                        #     if trans_non_bank.is_debit_account:
                        #         gl_trans_tax.is_debit_account = False
                        #         gl_trans_tax.is_credit_account = True
                        #         gl_trans_tax.functional_balance_type = BALANCE_TYPE_DICT['Credit']
                        #     else:
                        #         gl_trans_tax.is_debit_account = True
                        #         gl_trans_tax.is_credit_account = False
                        #         gl_trans_tax.functional_balance_type = BALANCE_TYPE_DICT['Debit']
                        #     total_source -= float(gl_trans_tax.amount)
                        #     total_func -= float(gl_trans_tax.functional_amount)
                        # else:
                        #     if trans_non_bank.is_debit_account:
                        #         gl_trans_tax.is_debit_account = True
                        #         gl_trans_tax.is_credit_account = False
                        #         gl_trans_tax.functional_balance_type = BALANCE_TYPE_DICT['Debit']
                        #     else:
                        #         gl_trans_tax.is_debit_account = False
                        #         gl_trans_tax.is_credit_account = True
                        #         gl_trans_tax.functional_balance_type = BALANCE_TYPE_DICT['Credit']
                        #     total_source += float(gl_trans_tax.amount)
                        #     total_func += float(gl_trans_tax.functional_amount)
                        # gl_trans_tax.save()
                        if trans_non_bank.tax and trans_non_bank.tax.tax_account_code_id:
                            tax_id = trans_non_bank.tax.tax_account_code_id
                        tax_source += float(trans_non_bank.tax_amount)
                        tax_func += float(trans_non_bank.tax_amount) * float(trans_non_bank.exchange_rate)
                        total_func += float(trans_non_bank.tax_amount) * float(trans_non_bank.exchange_rate)

                    elif float(trans_non_bank.amount) == 0.000000 and float(trans_non_bank.tax_amount) != 0.000000:
                        gl_trans_tax = deepcopy(trans_non_bank)
                        gl_trans_tax.pk = None
                        if desc != '':
                            gl_trans_tax.description = desc
                        else:
                            gl_trans_tax.description = ''
                        if reference != '':
                            gl_trans_tax.reference = reference
                        else:
                            gl_trans_tax.reference = ''
                        if remark != '':
                            gl_trans_tax.remark = remark
                        else:
                            gl_trans_tax.remark = ''
                        gl_trans_tax.amount = math.fabs(trans_non_bank.tax_amount)
                        gl_trans_tax.base_tax_amount = math.fabs(trans_non_bank.tax_amount)
                        gl_trans_tax.tax_amount = 0
                        gl_trans_tax.total_amount = math.fabs(trans_non_bank.tax_amount)
                        gl_trans_tax.journal_id = GL_AR_Invoice_Entry.id
                        gl_trans_tax.source_type = GL_AR_Invoice_Entry.source_type
                        if company.currency.is_decimal:
                            gl_trans_tax.functional_amount = float(round_number(math.fabs(Decimal(gl_trans_tax.total_amount) * Decimal(
                                trans_non_bank.exchange_rate))))
                        else:
                            gl_trans_tax.functional_amount = float(round_number(math.fabs(Decimal(gl_trans_tax.total_amount) * Decimal(
                                trans_non_bank.exchange_rate)), 0))
                        if trans_non_bank.total_amount < 0:
                            if trans_non_bank.is_debit_account:
                                gl_trans_tax.is_debit_account = False
                                gl_trans_tax.is_credit_account = True
                                gl_trans_tax.functional_balance_type = BALANCE_TYPE_DICT['Credit']
                            else:
                                gl_trans_tax.is_debit_account = True
                                gl_trans_tax.is_credit_account = False
                                gl_trans_tax.functional_balance_type = BALANCE_TYPE_DICT['Debit']
                            total_source -= float(gl_trans_tax.amount)
                            total_func -= float(gl_trans_tax.total_amount) * float(trans_non_bank.exchange_rate)
                        else:
                            if trans_non_bank.is_debit_account:
                                gl_trans_tax.is_debit_account = True
                                gl_trans_tax.is_credit_account = False
                                gl_trans_tax.functional_balance_type = BALANCE_TYPE_DICT['Debit']
                            else:
                                gl_trans_tax.is_debit_account = False
                                gl_trans_tax.is_credit_account = True
                                gl_trans_tax.functional_balance_type = BALANCE_TYPE_DICT['Credit']
                            total_source += float(gl_trans_tax.amount)
                            total_func += float(gl_trans_tax.total_amount) * float(trans_non_bank.exchange_rate)
                        gl_trans_tax.save()
                        # if trans_non_bank.tax and trans_non_bank.tax.tax_account_code_id:
                        #     tax_id = trans_non_bank.tax.tax_account_code_id
                        # tax_source += float(trans_non_bank.tax_amount)
                        # tax_func += float(trans_non_bank.tax_amount) * float(trans_non_bank.exchange_rate)

                    else:
                        gl_trans = deepcopy(trans_non_bank)
                        gl_trans.pk = None
                        gl_trans.reference = GL_AR_Invoice_Entry.document_number
                        if desc != '':
                            gl_trans.description = desc
                        else:
                            # gl_trans.description = to_string(GL_AR_Invoice_Entry.name) + ' - ' + to_string(
                            #     trans_non_bank.remark)
                            gl_trans.description = ''
                        if reference != '':
                            gl_trans.reference = reference
                        else:
                            gl_trans.reference = ''
                        if remark != '':
                            gl_trans.remark = remark
                        else:
                            gl_trans.remark = ''
                        gl_trans.journal_id = GL_AR_Invoice_Entry.id
                        gl_trans.source_type = GL_AR_Invoice_Entry.source_type
                        gl_trans.base_tax_amount = math.fabs(trans_non_bank.base_tax_amount)
                        gl_trans.amount = math.fabs(trans_non_bank.amount)
                        gl_trans.total_amount = math.fabs(trans_non_bank.total_amount)
                        if company.currency.is_decimal:
                            gl_trans.functional_amount = float(round_number(math.fabs(Decimal(gl_trans.total_amount) * Decimal(trans_non_bank.exchange_rate))))
                        else:
                            gl_trans.functional_amount = float(round_number(math.fabs(Decimal(gl_trans.total_amount) * Decimal(trans_non_bank.exchange_rate)), 0))
                        if trans_non_bank.total_amount < 0:
                            if trans_non_bank.is_debit_account:
                                gl_trans.is_debit_account = False
                                gl_trans.is_credit_account = True
                                gl_trans.functional_balance_type = BALANCE_TYPE_DICT['Credit']
                            else:
                                gl_trans.is_debit_account = True
                                gl_trans.is_credit_account = False
                                gl_trans.functional_balance_type = BALANCE_TYPE_DICT['Debit']
                            total_source -= float(gl_trans.amount)
                            total_func -= float(gl_trans.total_amount) * float(trans_non_bank.exchange_rate)
                        else:
                            if trans_non_bank.is_debit_account:
                                gl_trans.is_debit_account = True
                                gl_trans.is_credit_account = False
                                gl_trans.functional_balance_type = BALANCE_TYPE_DICT['Debit']
                            else:
                                gl_trans.is_debit_account = False
                                gl_trans.is_credit_account = True
                                gl_trans.functional_balance_type = BALANCE_TYPE_DICT['Credit']
                            total_source += float(gl_trans.amount)
                            total_func += float(gl_trans.total_amount) * float(trans_non_bank.exchange_rate)
                        gl_trans.save()
                        if float(gl_trans.tax_amount) != 0:
                            gl_trans.tax_amount = 0
                            gl_trans.base_tax_amount = math.fabs(trans_non_bank.base_tax_amount)
                            gl_trans.amount = math.fabs(trans_non_bank.amount)
                            gl_trans.total_amount = math.fabs(trans_non_bank.amount)
                            if company.currency.is_decimal:
                                gl_trans.functional_amount = float(round_number(math.fabs(Decimal(gl_trans.total_amount) * Decimal(
                                    trans_non_bank.exchange_rate))))
                            else:
                                gl_trans.functional_amount = float(round_number(math.fabs(Decimal(gl_trans.total_amount) * Decimal(
                                    trans_non_bank.exchange_rate)), 0))
                            if trans_non_bank.total_amount < 0:
                                if trans_non_bank.is_debit_account:
                                    gl_trans.is_debit_account = False
                                    gl_trans.is_credit_account = True
                                    gl_trans.functional_balance_type = BALANCE_TYPE_DICT['Credit']
                                else:
                                    gl_trans.is_debit_account = True
                                    gl_trans.is_credit_account = False
                                    gl_trans.functional_balance_type = BALANCE_TYPE_DICT['Debit']
                            else:
                                if trans_non_bank.is_debit_account:
                                    gl_trans.is_debit_account = True
                                    gl_trans.is_credit_account = False
                                    gl_trans.functional_balance_type = BALANCE_TYPE_DICT['Debit']
                                else:
                                    gl_trans.is_debit_account = False
                                    gl_trans.is_credit_account = True
                                    gl_trans.functional_balance_type = BALANCE_TYPE_DICT['Credit']
                            gl_trans.save()
                            if trans_non_bank.tax and trans_non_bank.tax.tax_account_code_id:
                                tax_id = trans_non_bank.tax.tax_account_code_id
                            tax_source += float(trans_non_bank.tax_amount)
                            tax_func += float(trans_non_bank.tax_amount) * float(trans_non_bank.exchange_rate)

                total_source += tax_source
                if total_func == 0 and tax_func > 0:
                    total_func = tax_func
                # Create bank Transactions
                last_transaction = transaction_list.last()
                if last_transaction:
                    if tax_id:
                        gl_trans_tax = deepcopy(last_transaction)
                        gl_trans_tax.pk = None
                        if j_desc != '':
                            gl_trans_tax.description = j_desc
                        elif desc != '':
                            gl_trans_tax.description = desc
                        else:
                            # gl_trans_tax.description = to_string(GL_AR_Invoice_Entry.name)
                            gl_trans_tax.description = ''
                        if j_reference != '':
                            gl_trans_tax.reference = j_reference
                        else:
                            gl_trans_tax.reference = ''
                        if j_remark != '':
                            gl_trans_tax.remark = j_remark
                        else:
                            gl_trans_tax.remark = ''
                        gl_trans_tax.amount = float(round_number(math.fabs(tax_source)))
                        gl_trans_tax.base_tax_amount = float(round_number(math.fabs(tax_source)))
                        gl_trans_tax.tax_amount = 0
                        gl_trans_tax.total_amount = float(round_number(math.fabs(tax_source)))
                        if company.currency.is_decimal:
                            gl_trans_tax.functional_amount = float(round_number(math.fabs(tax_func)))
                        else:
                            gl_trans_tax.functional_amount = float(round_number(math.fabs(tax_func), 0))
                        gl_trans_tax.journal_id = GL_AR_Invoice_Entry.id
                        gl_trans_tax.source_type = GL_AR_Invoice_Entry.source_type
                        gl_trans_tax.account_id = tax_id
                        if tax_func < 0:
                            if last_transaction.is_debit_account:
                                gl_trans_tax.is_debit_account = False
                                gl_trans_tax.is_credit_account = True
                                gl_trans_tax.functional_balance_type = BALANCE_TYPE_DICT['Credit']
                            else:
                                gl_trans_tax.is_debit_account = True
                                gl_trans_tax.is_credit_account = False
                                gl_trans_tax.functional_balance_type = BALANCE_TYPE_DICT['Debit']
                        else:
                            if last_transaction.is_debit_account:
                                gl_trans_tax.is_debit_account = True
                                gl_trans_tax.is_credit_account = False
                                gl_trans_tax.functional_balance_type = BALANCE_TYPE_DICT['Debit']
                            else:
                                gl_trans_tax.is_debit_account = False
                                gl_trans_tax.is_credit_account = True
                                gl_trans_tax.functional_balance_type = BALANCE_TYPE_DICT['Credit']
                        gl_trans_tax.save()

                        if gl_trans_tax.functional_amount != 0 and total_func == 0:
                            total_func = tax_func

                    gl_trans_bank = deepcopy(last_transaction)
                    gl_trans_bank.pk = None
                    if total_func < 0:
                        if last_transaction.is_debit_account:
                            gl_trans_bank.is_debit_account = True
                            gl_trans_bank.is_credit_account = False
                            gl_trans_bank.functional_balance_type = BALANCE_TYPE_DICT['Debit']
                        else:
                            gl_trans_bank.is_debit_account = False
                            gl_trans_bank.is_credit_account = True
                            gl_trans_bank.functional_balance_type = BALANCE_TYPE_DICT['Credit']
                    else:
                        if last_transaction.is_debit_account:
                            gl_trans_bank.is_debit_account = False
                            gl_trans_bank.is_credit_account = True
                            gl_trans_bank.functional_balance_type = BALANCE_TYPE_DICT['Credit']
                        else:
                            gl_trans_bank.is_debit_account = True
                            gl_trans_bank.is_credit_account = False
                            gl_trans_bank.functional_balance_type = BALANCE_TYPE_DICT['Debit']

                    if j_desc != '':
                        gl_trans_bank.description = j_desc
                    elif desc != '':
                        gl_trans_bank.description = desc
                    else:
                        gl_trans_bank.description = ''
                    if j_reference != '':
                        gl_trans_bank.reference = j_reference
                    else:
                        gl_trans_bank.reference = ''
                    if j_remark != '':
                        gl_trans_bank.remark = j_remark
                    else:
                        gl_trans_bank.remark = ''
                    gl_trans_bank.amount = float(round_number(math.fabs(total_source)))
                    gl_trans_bank.base_tax_amount = float(round_number(math.fabs(total_source)))
                    gl_trans_bank.tax_amount = 0
                    gl_trans_bank.total_amount = float(round_number(math.fabs(total_source)))
                    functional_amount = float(gl_trans_bank.total_amount) * float(gl_trans_bank.exchange_rate)
                    if company.currency.is_decimal:
                        gl_trans_bank.functional_amount = float(round_number(math.fabs(functional_amount)))
                    else:
                        gl_trans_bank.functional_amount = float(round_number(math.fabs(functional_amount), 0))
                    # if company.currency.is_decimal:
                    #     gl_trans_bank.functional_amount = math.fabs(total_func)
                    # else:
                    #     gl_trans_bank.functional_amount = math.fabs(round(total_func))
                    gl_trans_bank.tax_id = None
                    gl_trans_bank.account_id = journal_item.account_set.control_account_id
                    gl_trans_bank.journal_id = GL_AR_Invoice_Entry.id
                    gl_trans_bank.source_type = GL_AR_Invoice_Entry.source_type
                    gl_trans_bank.save()

                    related_invoice_list = []
                    firstTrx = transaction_list.first()
                    if firstTrx.related_invoice_id:
                        try:
                            related_invoice = Journal.objects.get(pk=firstTrx.related_invoice_id)
                            doc_amt = (journal_item.outstanding_amount * -1, journal_item.outstanding_amount)[
                                firstTrx.is_credit_account]
                            doc_end_balance = related_invoice.outstanding_amount + doc_amt
                            journal_item.paid_amount = \
                                (related_invoice.outstanding_amount, journal_item.document_amount)[doc_end_balance >= 0]
                            journal_item.outstanding_amount = (doc_end_balance, 0)[doc_end_balance >= 0]
                            journal_item.real_outstanding = journal_item.outstanding_amount
                            # if related_invoice.outstanding_amount < 0:
                            #     journal_item.paid_amount = journal_item.document_amount
                            #     journal_item.outstanding_amount = 0
                            # journal_item.is_fully_paid = (False, True)[journal_item.outstanding_amount == 0]
                            journal_item.is_fully_paid = True
                            if journal_item.is_fully_paid:
                                journal_item.fully_paid_date = journal_item.document_date
                            journal_item.save()
                            last_outstanding = related_invoice.outstanding_amount
                            last_time_was_fully_paid = True if related_invoice.fully_paid_date else False
                            if journal_item.document_type == DOCUMENT_TYPE_DICT['Debit Note']:
                                if related_invoice.document_type == DOCUMENT_TYPE_DICT['Credit Note']:
                                    # related_invoice.payment_number += 1
                                    # if related_invoice.outstanding_amount >= 0:
                                    # related_invoice.payment_number += 1
                                    if related_invoice.outstanding_amount >= 0:
                                        related_invoice.paid_amount -= Decimal(journal_item.total_amount)
                                        related_invoice.outstanding_amount -= Decimal(journal_item.total_amount)
                                    else:
                                        related_invoice.paid_amount += Decimal(journal_item.total_amount)
                                        related_invoice.outstanding_amount += Decimal(journal_item.total_amount)
                                else:
                                    related_invoice.outstanding_amount += Decimal(journal_item.total_amount)
                            elif journal_item.document_type == DOCUMENT_TYPE_DICT['Credit Note']:
                                if related_invoice.document_type == DOCUMENT_TYPE_DICT['Credit Note']:
                                    if related_invoice.outstanding_amount >= 0:
                                        related_invoice.outstanding_amount += Decimal(journal_item.total_amount)
                                    else:
                                        related_invoice.outstanding_amount -= Decimal(journal_item.total_amount)
                                else:
                                    # related_invoice.payment_number += 1
                                    # if related_invoice.outstanding_amount >= 0:
                                    related_invoice.paid_amount += Decimal(journal_item.total_amount)
                                    related_invoice.outstanding_amount -= Decimal(journal_item.total_amount)
                            related_invoice.is_fully_paid = (False, True)[related_invoice.outstanding_amount == 0]
                            if related_invoice.is_fully_paid:
                                related_invoice.fully_paid_date = firstTrx.journal.document_date
                            else:
                                related_invoice.fully_paid_date = None
                            
                            related_invoice.real_outstanding = related_invoice.outstanding_amount
                            related_invoice_list.append(related_invoice.id)
                            if journal_item.document_type == DOCUMENT_TYPE_DICT['Credit Note']:
                                if related_invoice.document_type != DOCUMENT_TYPE_DICT['Credit Note']:
                                    if float(last_outstanding) < float(journal_item.total_amount):
                                        journal_item.is_fully_paid = False
                                        journal_item.fully_paid_date = None
                                        if related_invoice.is_fully_paid:
                                            journal_item.outstanding_amount = math.fabs(last_outstanding)
                                            journal_item.real_outstanding = math.fabs(last_outstanding)
                                        journal_item.save()
                                    if math.fabs(journal_item.total_amount) > math.fabs(last_outstanding):
                                        related_invoice.fully_paid_date = journal_item.document_date
                                        related_invoice.is_fully_paid = True
                                        related_invoice.save()

                                        related_invoice_list.remove(related_invoice.id)
                                    # rtrxs = Transaction.objects.filter(journal_id=related_invoice.id, is_hidden=False)
                                    # for rtrx in rtrxs:
                                    #     rtrx.related_journal_outstanding = journal_item.outstanding_amount
                                    #     rtrx.save()
                            elif journal_item.document_type == DOCUMENT_TYPE_DICT['Debit Note']:
                                if related_invoice.document_type == DOCUMENT_TYPE_DICT['Credit Note']:
                                    if math.fabs(journal_item.total_amount) > math.fabs(last_outstanding):
                                        related_invoice.fully_paid_date = journal_item.document_date
                                        related_invoice.is_fully_paid = True
                                        related_invoice.save()
                                        # journal_item.outstanding_amount = (2 * math.fabs(
                                        #     journal_item.total_amount)) - math.fabs(related_invoice.outstanding_amount)
                                        journal_item.outstanding_amount = math.fabs(
                                            journal_item.total_amount) - math.fabs(last_outstanding)
                                        journal_item.real_outstanding = math.fabs(
                                            journal_item.total_amount) - math.fabs(last_outstanding)
                                        journal_item.is_fully_paid = False
                                        journal_item.fully_paid_date = None
                                        journal_item.save()

                                        related_invoice_list.remove(related_invoice.id)

                                        # rtrxs = Transaction.objects.filter(journal_id=related_invoice.id, is_hidden=False)
                                        # for rtrx in rtrxs:
                                        #     rtrx.related_journal_outstanding = journal_item.outstanding_amount
                                        #     rtrx.save()

                            related_invoice.save()
                            # update for aging
                            for aTrx in transaction_list:
                                aTrx.related_journal_outstanding = related_invoice.outstanding_amount
                                aTrx.save()


                            if related_invoice.fully_paid_date == None and last_time_was_fully_paid:
                                last_payment_trx = Transaction.objects.filter(related_invoice_id=related_invoice.id,
                                        journal__document_date__gte=related_invoice.document_date, journal__status=int(STATUS_TYPE_DICT['Posted'])
                                    ).exclude(journal_id__isnull=True).exclude(journal__reverse_reconciliation=True
                                    ).exclude(journal__journal_type=dict(TRANSACTION_TYPES)['GL']
                                    ).exclude(journal__journal_type=dict(TRANSACTION_TYPES)['AD']
                                    ).exclude(is_hidden=True
                                    ).order_by('-transaction_date', '-id')
                                for lTrx in last_payment_trx:
                                    if lTrx.related_journal_outstanding == 0:
                                        lTrx.related_journal_outstanding = related_invoice.outstanding_amount
                                        lTrx.save()
                            else:
                                # fix aging
                                if len(related_invoice_list):
                                    update_aging_thread = threading.Thread(name='fix_payments_outs_amount_ar',
                                                                        target=fix_payments_outs_amount,
                                                                        args=(request, 'AR', related_invoice_list, ), daemon=False)
                                    update_aging_thread.start()

                            if journal_item.paid_amount != 0:
                                extra_trans1 = deepcopy(gl_trans_bank)
                                extra_trans1.pk = None
                                extra_trans1.is_debit_account = (True, False)[gl_trans_bank.is_debit_account]
                                extra_trans1.is_credit_account = (False, True)[gl_trans_bank.is_debit_account]
                                extra_trans1.functional_balance_type = (
                                    BALANCE_TYPE_DICT['Debit'],
                                    BALANCE_TYPE_DICT['Credit'])[gl_trans_bank.is_debit_account]
                                extra_trans1.save()

                                extra_trans2 = deepcopy(extra_trans1)
                                extra_trans2.pk = None
                                extra_trans2.is_debit_account = (True, False)[extra_trans1.is_debit_account]
                                extra_trans2.is_credit_account = (False, True)[extra_trans1.is_debit_account]
                                extra_trans2.functional_balance_type = (
                                    BALANCE_TYPE_DICT['Debit'],
                                    BALANCE_TYPE_DICT['Credit'])[extra_trans1.is_debit_account]
                                extra_trans2.save()

                                GL_AR_Invoice_Entry.amount += float(extra_trans1.functional_amount)
                                GL_AR_Invoice_Entry.total_amount += float(extra_trans1.functional_amount)
                            GL_AR_Invoice_Entry.save()

                            gl_batch.batch_amount -= float(total_func)
                            gl_batch.batch_amount += float(GL_AR_Invoice_Entry.total_amount)
                            gl_batch.save()

                            rate_different = journal_item.exchange_rate - journal_item.orig_exch_rate

                            if rate_different != Decimal(0.0000000):
                                foreign_exchange_account = None
                                try:
                                    if journal_item.account_set and journal_item.account_set.revaluation_rounding_id:
                                        foreign_exchange_account = Account.objects.get(
                                            pk=journal_item.account_set.revaluation_rounding_id)
                                    else:
                                        foreign_exchange_account = Account.objects.filter(
                                            Q(name__icontains='FOREIGN') & Q(name__icontains='EXCHANGE')).first()
                                except Exception as e:
                                    print('Journal-ID ' + str(journal_item.id))
                                    print(e)
                                    print("Revaluation account couldn't be retrieved!!")
                                    logging.error(traceback.format_exc())
                                    return False
                                if foreign_exchange_account:
                                    if company.currency.is_decimal:
                                        foreign_exchange_amount = float(round_number(math.fabs(
                                            Decimal(gl_trans_bank.total_amount) * Decimal(rate_different))))
                                    else:
                                        foreign_exchange_amount = float(round_number(math.fabs(
                                            Decimal(gl_trans_bank.total_amount) * Decimal(rate_different)), 0))
                                    forex_trx1 = deepcopy(extra_trans1)
                                    forex_trx1.pk = None
                                    forex_trx1.source_type = 'AR-GL'
                                    forex_trx1.amount = 0
                                    forex_trx1.base_tax_amount = 0
                                    forex_trx1.tax_amount = 0
                                    forex_trx1.total_amount = 0
                                    forex_trx1.functional_amount = foreign_exchange_amount
                                    forex_trx1.functional_balance_type = (BALANCE_TYPE_DICT['Credit'],
                                                                        BALANCE_TYPE_DICT['Debit'])[
                                        extra_trans1.is_debit_account]
                                    forex_trx1.transaction_date = getTransactionDate(request, GL_AR_Invoice_Entry.document_date)
                                    forex_trx1.save()
                                    forex_trx2 = deepcopy(forex_trx1)
                                    forex_trx2.pk = None
                                    forex_trx2.is_debit_account = (True, False)[forex_trx1.is_debit_account]
                                    forex_trx2.is_credit_account = (False, True)[forex_trx1.is_debit_account]
                                    forex_trx2.account_id = foreign_exchange_account.id
                                    forex_trx2.functional_balance_type = (BALANCE_TYPE_DICT['Debit'],
                                                                        BALANCE_TYPE_DICT['Credit'])[
                                        forex_trx1.is_debit_account]
                                    forex_trx2.save()
                                    GL_AR_Invoice_Entry.amount += float(foreign_exchange_amount)
                                    GL_AR_Invoice_Entry.total_amount += float(foreign_exchange_amount)
                                    GL_AR_Invoice_Entry.save()

                                    gl_batch.batch_amount += float(foreign_exchange_amount)
                                    gl_batch.save()
                        except Exception as e:
                            print(e)

                    total_func_debit = total_func_credit = 0
                    transaction_list = Transaction.objects.filter(is_hidden=False, company_id=company_id,
                                                                journal_id=GL_AR_Invoice_Entry.id)
                    trx_debits = transaction_list.filter(is_debit_account=1)
                    for trx_debit in trx_debits:
                        total_func_debit += round_number(trx_debit.functional_amount)
                    trx_credits = transaction_list.filter(is_credit_account=1)
                    for trx_credit in trx_credits:
                        total_func_credit += round_number(trx_credit.functional_amount)

                    # for rounding floating point when exchange currency
                    if round_number(total_func_credit) != round_number(total_func_debit):
                        foreign_exchange_amount = round_number(total_func_debit) - round_number(total_func_credit)
                        try:
                            if journal_item.account_set and journal_item.account_set.revaluation_rounding_id:
                                foreign_exchange_account = Account.objects.get(
                                    pk=journal_item.account_set.revaluation_rounding_id)
                            else:
                                foreign_exchange_account = Account.objects.filter(
                                    Q(name__icontains='FOREIGN') & Q(name__icontains='EXCHANGE')).first()
                            gl_exchange = Transaction()
                            if j_desc != '':
                                gl_exchange.description = j_desc
                            elif desc != '':
                                gl_exchange.description = desc
                            else:
                                gl_exchange.description = ''
                            if j_reference != '':
                                gl_exchange.reference = j_reference
                            else:
                                gl_exchange.reference = ''
                            if j_remark != '':
                                gl_exchange.remark = j_remark
                            else:
                                gl_exchange.remark = ''
                            gl_exchange.journal_id = GL_AR_Invoice_Entry.id
                            gl_exchange.account_id = foreign_exchange_account.id if foreign_exchange_account else None
                            gl_exchange.company_id = company_id
                            gl_exchange.currency_id = gl_trans_bank.currency_id
                            gl_exchange.order_id = gl_trans_bank.order_id if gl_trans_bank.order else None
                            gl_exchange.source_type = 'AR-RD'
                            gl_exchange.exchange_rate = last_transaction.exchange_rate
                            gl_exchange.rate_date = last_transaction.rate_date if last_transaction.rate_date else None
                            gl_exchange.functional_currency_id = company.currency_id
                            gl_exchange.is_debit_account = (True, False)[foreign_exchange_amount > 0]
                            gl_exchange.is_credit_account = (False, True)[foreign_exchange_amount > 0]
                            if company.currency.is_decimal:
                                gl_exchange.functional_amount = float(round_number(math.fabs(foreign_exchange_amount)))
                            else:
                                gl_exchange.functional_amount = float(round_number(math.fabs(foreign_exchange_amount), 0))
                            gl_exchange.functional_balance_type = (BALANCE_TYPE_DICT['Debit'],
                                                                BALANCE_TYPE_DICT['Credit'])[foreign_exchange_amount > 0]
                            gl_exchange.transaction_date = getTransactionDate(request, GL_AR_Invoice_Entry.document_date)
                            gl_exchange.save()
                            GL_AR_Invoice_Entry.amount += float(gl_exchange.functional_amount)
                            GL_AR_Invoice_Entry.total_amount += float(gl_exchange.functional_amount)
                            GL_AR_Invoice_Entry.save()

                            gl_batch.batch_amount += float(gl_exchange.functional_amount)
                            gl_batch.save()
                        except Exception as e:
                            print('Journal-ID ' + str(journal_item.id))
                            print(e)
                            print("Revaluation account couldn't be retrieved!!")
                            transactionlib.set_rollback(True)
                            logging.error(traceback.format_exc())
                            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

            gl_batch.batch_amount = math.fabs(gl_batch.batch_amount)
            gl_batch.save()

    except Exception as e:
        print(e)
        logging.error(traceback.format_exc())

    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))


def payment_AR_edit(request, payment_id):
    return None


@login_required
@check_fiscal
def journal_AP_add(request, batch_id):
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    try:
        with transactionlib.atomic():
            distribution_code_list = DistributionCode.objects.filter(is_hidden=False, is_active=True,
                                                                     company_id=company_id,
                                                                     type=DIS_CODE_TYPE_DICT['AP Distribution Code'])
            account_list = Account.objects.filter(is_hidden=False, is_active=True, company_id=company_id).order_by('account_segment', 'code')
            tax_list = Tax.objects.filter(is_hidden=False,
                                          company_id=company_id,
                                          tax_group__company_id=company_id,
                                          tax_group__transaction_type=int(TAX_TRX_TYPES_DICT['Purchases']))
            company = Company.objects.get(pk=company_id)

            distribution_code_list_ar = []
            for dist_code_list in distribution_code_list:
                distribution_code_list_obj = {'id': dist_code_list.id,
                                              'code': dist_code_list.code,
                                              'name': dist_code_list.name,
                                              'gl_account_id': dist_code_list.gl_account_id,
                                              'tax_id': None}
                for tax_code in tax_list:
                    if tax_code.distribution_code_id:
                        if tax_code.distribution_code_id == dist_code_list.id:
                            distribution_code_list_obj['tax_id'] = tax_code.id
                            break
                distribution_code_list_ar.append(distribution_code_list_obj)

            form = APInvoiceInfoForm(company_id=company_id, session_date=request.session['session_date'])
            journal_list = Journal.objects.none()
            prev_batch = 0
            next_batch = 0
            prev_journal = 0
            next_journal = 0
            first_journal = 0
            last_journal = 0
            if batch_id and int(batch_id) > 0:
                batch = Batch.objects.get(pk=batch_id)
                batch_form = BatchInfoForm(instance=batch)
                journal_list = Journal.objects.filter(company_id=company_id, is_hidden=0, batch_id=batch_id)
                prev_journal, next_journal, first_journal, last_journal = get_batch_journals(batch.id, None, False)
                prev_batch, next_batch = get_nearest_batches(company_id, dict(TRANSACTION_TYPES)['AP Invoice'], batch.batch_no)
            else:
                batch = Batch()
                batch_form = BatchInfoForm(session_date=request.session['session_date'])
                prev_batch, next_batch = get_nearest_batches(company_id, dict(TRANSACTION_TYPES)['AP Invoice'], None)

            if request.method == 'POST':
                new_post = []
                for old_trx in ast.literal_eval(request.POST['transaction_list_data']):
                    list_1 = {}
                    list_1['amount'] = old_trx['amount'].replace(",", "")
                    list_1['base_tax_amount'] = old_trx['base_tax_amount'].replace(",", "")
                    list_1['distribution_id'] = old_trx['distribution_id']
                    list_1['distribution_code'] = old_trx['distribution_code']
                    list_1['distribution_name'] = old_trx['distribution_name']
                    list_1['account_id'] = old_trx['account_id']
                    list_1['account_code'] = old_trx['account_code']
                    list_1['account_name'] = old_trx['account_name']
                    list_1['description'] = old_trx['description']
                    list_1['tax_amount'] = old_trx['tax_amount'].replace(",", "")
                    list_1['total_amount'] = old_trx['total_amount'].replace(",", "")
                    list_1['delete'] = old_trx['delete']
                    list_1['is_tax_include'] = int(old_trx['is_tax_include'])
                    list_1['is_tax_transaction'] = int(old_trx['is_tax_transaction'])
                    list_1['is_manual_tax_input'] = int(old_trx['is_manual_tax_input'])
                    list_1['tax_id'] = old_trx['tax_id']

                    new_post.append(list_1)
                tot_amu = request.POST.get('total_amount', '')
                tot_amu_1 = tot_amu.replace(",", "")
                amu = request.POST.get('amount', '')
                amu_1 = amu.replace(",", "")
                batch_amu = request.POST.get('batch_amount', '')
                batch_amu_1 = batch_amu.replace(",", "")
                doc_amount = request.POST.get('document_amount', '')
                doc_amount_1 = doc_amount.replace(",", "")

                post = request.POST.copy()  # to make it mutable

                post.update({

                    'total_amount': tot_amu_1,
                    'amount': amu_1,
                    'batch_amount': batch_amu_1,
                    'document_amount': doc_amount_1

                })
                request.POST = post
                request.POST['transaction_list_data'] = new_post
                form = APInvoiceInfoForm(data=request.POST, company_id=company_id)
                batch_form = BatchInfoForm(data=request.POST, instance=batch)
                if 'is_locked' in request.session and request.session['is_locked']:
                    context = {'form': form, 'batch_form': batch_form, 'distribution_code_list': distribution_code_list_ar,
                                'account_list': account_list, 'tax_list': tax_list, 'batch': batch, 'batch_id': batch_id,
                                'company_currency': company.currency_id, 'next_journal': next_journal, 'prev_journal': prev_journal,
                                'first_journal': first_journal, 'last_journal': last_journal,'is_locked': 1,
                                'next_batch': next_batch, 'prev_batch': prev_batch}
                    return render(request, 'AP_entry.html', context)
                if form.is_valid() and batch_form.is_valid():
                    Batch_Entry = batch_form.save(commit=False)
                    AP_entry = form.save(commit=False)

                    # Save Batch Info
                    # Batch_Entry.batch_date = datetime.datetime.today()
                    Batch_Entry.create_date = datetime.datetime.today()
                    Batch_Entry.update_by = request.user.id
                    if batch_id and int(batch_id) > 0:
                        Batch_Entry.no_entries = journal_list.filter(is_hidden=0).count() + 1
                    else:
                        Batch_Entry.batch_no = generate_batch_number(company_id, dict(TRANSACTION_TYPES)['AP Invoice'])
                        Batch_Entry.status = int(STATUS_TYPE_DICT['Open'])
                        Batch_Entry.company_id = company_id
                        Batch_Entry.is_hidden = False
                        Batch_Entry.input_type = INPUT_TYPE_DICT['Manual Entry']
                        Batch_Entry.document_type = DOCUMENT_TYPE_DICT['Invoice']
                        Batch_Entry.batch_type = dict(TRANSACTION_TYPES)['AP Invoice']
                        Batch_Entry.no_entries = 1
                        Batch_Entry.batch_amount = 0
                        Batch_Entry.currency_id = company.currency_id
                        Batch_Entry.source_ledger = SOURCE_LEDGER_DICT['Account Payable']
                    document_type = request.POST['document_type']
                    if document_type == DOCUMENT_TYPE_DICT['Credit Note']:
                        Batch_Entry.batch_amount = batch.batch_amount - AP_entry.total_amount
                    else:
                        Batch_Entry.batch_amount = batch.batch_amount + AP_entry.total_amount
                    Batch_Entry.save()

                    # Save AP Information
                    if 'is_posted' in request.POST:
                        AP_entry.status = int(STATUS_TYPE_DICT['Posted'])
                    else:
                        AP_entry.status = int(STATUS_TYPE_DICT['Open'])
                    AP_entry.journal_type = dict(TRANSACTION_TYPES)['AP Invoice']
                    AP_entry.update_by = request.user.id
                    AP_entry.company_id = company_id
                    AP_entry.is_hidden = False
                    AP_entry.outstanding_amount = AP_entry.total_amount
                    AP_entry.real_outstanding = AP_entry.total_amount
                    try:
                        if request.POST['due_date']:
                            AP_entry.due_date = datetime.datetime.strptime(request.POST.get('due_date'), '%d-%m-%Y')
                        elif AP_entry.supplier.term_days:
                            AP_entry.due_date = AP_entry.document_date + timedelta(
                                int(AP_entry.supplier.term_days)) 
                        else:
                            AP_entry.due_date = AP_entry.document_date + relativedelta(months=1)
                    except:
                        AP_entry.due_date = AP_entry.document_date
                    AP_entry.save()

                    if batch_id and int(batch_id) > 0:
                        AP_entry.code = generate_entry_number(company_id, batch_id)
                    else:
                        AP_entry.code = Batch_Entry.no_entries
                    AP_entry.batch_id = Batch_Entry.id
                    if 'orig_rate_pk' in request.POST and request.POST['orig_rate_pk'] != 'None':
                        AP_entry.orig_exch_rate_fk_id = request.POST['orig_rate_pk']
                    AP_entry.orig_exch_rate = 0
                    AP_entry.save()

                    if AP_entry.account_set_id and AP_entry.supplier.account_set_id == None:
                        AP_entry.supplier.account_set_id = AP_entry.account_set_id
                        AP_entry.supplier.save()

                    if 'is_posted' in request.POST:
                        GL_AP_Invoice_Entry = deepcopy(AP_entry)
                        GL_AP_Invoice_Entry.status = int(STATUS_TYPE_DICT['Open'])
                        GL_AP_Invoice_Entry.pk = None
                        GL_AP_Invoice_Entry.journal_type = dict(TRANSACTION_TYPES)['GL']
                        GL_AP_Invoice_Entry.save()

                    # get latest exchange rate
                    AP_entry.currency_id = AP_entry.supplier.currency_id
                    AP_entry.save()
                    from_currency = AP_entry.supplier.currency_id
                    to_currency = company.currency_id
                    if request.POST['exchange_rate']:
                        if 'exchange_rate_fk' in request.POST and request.POST['exchange_rate_fk']:
                            exchange_rate = ExchangeRate.objects.get(pk=request.POST['exchange_rate_fk'])
                            if request.POST['exchange_rate'] != exchange_rate.rate:
                                # exchange_rate = ExchangeRate()
                                # exchange_rate.from_currency_id = from_currency
                                # exchange_rate.to_currency_id = to_currency
                                # exchange_rate.company_id = company.id
                                # exchange_rate.rate = request.POST['exchange_rate']
                                # exchange_rate.is_hidden = 0
                                # exchange_rate.flag = 'ACCOUNTING'
                                # exchange_rate.save()
                                AP_entry.exchange_rate = request.POST['exchange_rate']
                                AP_entry.exchange_rate_fk_id = None
                                exchange_rate = None
                            else:
                                AP_entry.exchange_rate = exchange_rate.rate
                                AP_entry.exchange_rate_fk_id = exchange_rate.id
                        else:
                            AP_entry.exchange_rate = request.POST['exchange_rate']
                            AP_entry.exchange_rate_fk_id = None
                            exchange_rate = None
                    else:
                        exchange_rate = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                                    from_currency_id=from_currency,
                                                                    to_currency_id=to_currency,
                                                                    exchange_date__lte=AP_entry.document_date,
                                                                    flag='ACCOUNTING').order_by('exchange_date').last()
                        if not exchange_rate:
                            if from_currency == to_currency:
                                # exchange_rate = ExchangeRate()
                                # exchange_rate.from_currency_id = from_currency
                                # exchange_rate.to_currency_id = to_currency
                                # exchange_rate.company_id = company.id
                                # exchange_rate.rate = 1
                                # exchange_rate.is_hidden = 0
                                # exchange_rate.flag = 'ACCOUNTING'
                                # exchange_rate.save()
                                AP_entry.exchange_rate = 1
                                AP_entry.exchange_rate_fk_id = None
                            else:
                                try:
                                    transactionlib.rollback()
                                except:
                                    pass
                                messages.error(request, NO_EXCHANGE_RATE)
                                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
                        else:
                            AP_entry.exchange_rate = exchange_rate.rate
                            AP_entry.exchange_rate_fk_id = exchange_rate.id
                    if 'orig_rate' in request.POST:
                        AP_entry.orig_exch_rate = request.POST['orig_rate'] if request.POST['orig_rate'] != '' else AP_entry.exchange_rate
                    else:
                        AP_entry.orig_exch_rate = AP_entry.exchange_rate

                    perd_month, perd_year = get_fiscal_year_period(company_id, AP_entry.document_date)
                    if perd_month and perd_year:
                        AP_entry.perd_month = perd_month
                        AP_entry.perd_year = perd_year
                    else:
                        AP_entry.perd_month = int(request.POST.get('perd_month'))
                        AP_entry.perd_year = int(request.POST.get('perd_year'))
                    AP_entry.save()

                    transaction_list_new = request.POST['transaction_list_data']
                    for transaction_item in transaction_list_new:
                        trans = Transaction()
                        trans.distribution_code_id = transaction_item['distribution_id'] if transaction_item.get(
                            'distribution_id') else None
                        trans.remark = transaction_item['description']
                        trans.description = transaction_item['description']
                        trans.account_id = transaction_item['account_id']
                        trans.amount = transaction_item['amount']
                        trans.base_tax_amount = transaction_item['base_tax_amount']
                        trans.tax_amount = transaction_item['tax_amount']
                        trans.total_amount = transaction_item['total_amount']
                        if transaction_item['tax_id'] and transaction_item['tax_id'] is not '0' and transaction_item['tax_id'] is not '':
                            trans.tax_id = int(transaction_item['tax_id'])
                        trans.currency_id = request.POST['currency']
                        trans.journal_id = AP_entry.id
                        trans.order_id = AP_entry.order_id if AP_entry.order else None
                        trans.company_id = company_id
                        trans.is_debit_account = (True, False)[AP_entry.document_type == DOCUMENT_TYPE_DICT['Credit Note']]
                        trans.is_credit_account = (False, True)[AP_entry.document_type == DOCUMENT_TYPE_DICT['Credit Note']]
                        trans.is_tax_include = int(transaction_item['is_tax_include'])
                        trans.is_tax_transaction = int(transaction_item['is_tax_transaction'])
                        trans.is_manual_tax_input = int(transaction_item['is_manual_tax_input'])
                        trans.update_by = request.user.id
                        id_invoice_apply = request.POST['id_related_invoice']
                        try:
                            id_invoice_apply = int(id_invoice_apply)
                            journal_id_related = Journal.objects.get(pk=id_invoice_apply)
                            journal_id_related.is_fully_paid = False
                            journal_id_related.fully_paid_date = None
                            journal_id_related.save()
                            trans.related_invoice = journal_id_related
                        except:
                            trans.related_invoice = None
                        trans.exchange_rate = AP_entry.exchange_rate
                        trans.functional_currency_id = company.currency_id
                        trans.functional_amount = float(round_number(float(trans.total_amount) * float(AP_entry.exchange_rate)))
                        if exchange_rate:
                            trans.rate_date = exchange_rate.exchange_date
                        else:
                            try:
                                split_date = str(AP_entry.document_date).split('-')
                                trans.rate_date = split_date[0] + '-' + split_date[1] + '-01'
                            except:
                                trans.rate_date = AP_entry.document_date

                        trans.functional_balance_type = (BALANCE_TYPE_DICT['Credit'],
                                                         BALANCE_TYPE_DICT['Debit'])[trans.is_debit_account]
                        trans.transaction_date = getTransactionDate(request, AP_entry.document_date)
                        trans.save()

                        if 'is_posted' in request.POST:
                            gl_trans_debit = deepcopy(trans)
                            gl_trans_debit.pk = None
                            gl_trans_debit.reference = GL_AP_Invoice_Entry.document_number
                            gl_trans_debit.remark = GL_AP_Invoice_Entry.name + ' - ' + trans.remark
                            gl_trans_debit.journal_id = GL_AP_Invoice_Entry.id
                            # if the tax_amount > 0, write a row for GST Output Tax transaction
                            if float(gl_trans_debit.tax_amount) > 0:
                                gl_trans_debit.total_amount = transaction_item['amount']
                                gl_trans_debit.tax_amount = 0
                                gl_trans_debit.functional_amount = float(round_number(float(gl_trans_debit.total_amount) * float(
                                    AP_entry.exchange_rate)))

                                # create tax transaction
                                gl_trans_tax = deepcopy(gl_trans_debit)
                                gl_trans_tax.remark = GL_AP_Invoice_Entry.name
                                gl_trans_tax.amount = transaction_item['tax_amount']
                                gl_trans_tax.base_tax_amount = transaction_item['tax_amount']
                                gl_trans_tax.tax_amount = 0
                                gl_trans_tax.total_amount = transaction_item['tax_amount']
                                gl_trans_tax.functional_amount = float(round_number(float(gl_trans_tax.total_amount) * float(
                                    AP_entry.exchange_rate)))
                                gl_trans_tax.account_id = trans.tax.tax_account_code_id
                                gl_trans_tax.save()
                            gl_trans_debit.save()

                    # return redirect('/accounting/list/2/' + str(batch.id) + '/')
                    messages.success(request, "AP entry is created successfully")
                    return redirect('/accounting/add/AP/' + str(batch.id) + '/')
                else:
                    print(INVALID_FORM, ' Form error: ', form.errors, ' Batch error: ', batch_form.errors)
                    messages.error(request, INVALID_FORM)
                    # end if POST
        if 'is_locked' in request.session and request.session['is_locked']:
            is_locked = 1
        else:
            is_locked = 0
        context = {'form': form, 'batch_form': batch_form, 'distribution_code_list': distribution_code_list_ar,
                   'account_list': account_list, 'tax_list': tax_list, 'batch': batch, 'batch_id': batch_id,
                   'company_currency': company.currency_id, 'next_journal': next_journal, 'prev_journal': prev_journal,
                   'first_journal': first_journal, 'last_journal': last_journal, 'is_locked': is_locked,
                   'next_batch': next_batch, 'prev_batch': prev_batch}
        return render(request, 'AP_entry.html', context)
        # end atomic
    # end try
    except Exception as e:
        print(EXCEPTION_JOURNAL_ADD % ('AP Invoice'), e)
        logging.error(traceback.format_exc())
        messages.error(request, EXCEPTION_JOURNAL_ADD % ('AP Invoice'))
        return redirect('/accounting/list/2/' + str(batch_id) + '/')


@csrf_exempt
@login_required
@check_fiscal
def journal_AP_edit(request, journal_id):
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    journal = Journal.objects.get(pk=journal_id)
    transaction_list = Transaction.objects.filter(is_hidden=False, company_id=company_id, journal_id=journal_id)
    # if journal.account_set:
    #     transaction_list = all_transaction_list.exclude(account_id=journal.account_set.control_account_id)
    # else:
    #     transaction_list = None
    
    # if not transaction_list:
    #     transaction_list = all_transaction_list

    deleted_transaction_list = transaction_list
    distribution_code_list = DistributionCode.objects.filter(is_hidden=False, is_active=True, company_id=company_id,
                                                             type=DIS_CODE_TYPE_DICT['AP Distribution Code'])
    account_list = Account.objects.filter(is_hidden=False, is_active=True, company_id=company_id).order_by('account_segment', 'code')
    tax_list = Tax.objects.filter(is_hidden=False,
                                  company_id=company_id,
                                  tax_group__company_id=company_id,
                                  tax_group__transaction_type=int(TAX_TRX_TYPES_DICT['Purchases']))
    company = Company.objects.get(pk=company_id)
    prev_batch = 0
    next_batch = 0
    prev_journal = 0
    next_journal = 0
    first_journal = 0
    last_journal = 0
    try:
        with transactionlib.atomic():

            distribution_code_list_ar = []
            for dist_code_list in distribution_code_list:
                distribution_code_list_obj = {}
                distribution_code_list_obj['id'] = dist_code_list.id
                distribution_code_list_obj['code'] = dist_code_list.code
                distribution_code_list_obj['name'] = dist_code_list.name
                distribution_code_list_obj['gl_account_id'] = dist_code_list.gl_account_id
                distribution_code_list_obj['tax_id'] = None
                for tax_code in tax_list:
                    if tax_code.distribution_code_id:
                        if tax_code.distribution_code_id == dist_code_list.id:
                            distribution_code_list_obj['tax_id'] = tax_code.id
                            break
                distribution_code_list_ar.append(distribution_code_list_obj)

            form = APInvoiceInfoForm(journal_id, instance=journal, company_id=company_id)
            if journal and journal.batch:
                batch = Batch.objects.get(pk=journal.batch_id)
                batch_form = BatchInfoForm(instance=batch)
                prev_journal, next_journal, first_journal, last_journal = get_batch_journals(batch.id, journal, False)
                prev_batch, next_batch = get_nearest_batches(company_id, dict(TRANSACTION_TYPES)['AP Invoice'], batch.batch_no)
            else:
                batch = Batch()
                batch_form = BatchInfoForm()
                prev_batch, next_batch = get_nearest_batches(company_id, dict(TRANSACTION_TYPES)['AP Invoice'], None)

            if journal.order_id:
                j_order_id = journal.order_id
            else:
                j_order_id = None

            if journal.status == int(STATUS_TYPE_DICT['Draft']):
                j_status = int(STATUS_TYPE_DICT['Draft'])
            else:
                j_status = None

            if request.method == 'POST':
                new_post = []
                for old_trx in ast.literal_eval(request.POST['transaction_list_data']):
                    list_1 = {}
                    list_1['amount'] = old_trx['amount'].replace(",", "")
                    if old_trx['id']:
                        list_1['id'] = old_trx['id']
                    else:
                        list_1['id'] = None
                    list_1['distribution_id'] = old_trx['distribution_id']
                    list_1['distribution_code'] = old_trx['distribution_code']
                    list_1['distribution_name'] = old_trx['distribution_name']
                    list_1['account_id'] = old_trx['account_id']
                    list_1['account_code'] = old_trx['account_code']
                    list_1['account_name'] = old_trx['account_name']
                    list_1['description'] = old_trx['description']
                    list_1['base_tax_amount'] = old_trx['base_tax_amount'].replace(",", "")
                    list_1['tax_amount'] = old_trx['tax_amount'].replace(",", "")
                    list_1['total_amount'] = old_trx['total_amount'].replace(",", "")
                    list_1['delete'] = old_trx['delete']
                    list_1['is_tax_include'] = old_trx['is_tax_include']
                    list_1['is_tax_transaction'] = old_trx['is_tax_transaction']
                    list_1['is_manual_tax_input'] = old_trx['is_manual_tax_input']
                    list_1['tax_id'] = old_trx['tax_id']

                    new_post.append(list_1)

                tot_amu = request.POST.get('total_amount', '')
                tot_amu_1 = tot_amu.replace(",", "")
                amu = request.POST.get('amount', '')
                amu_1 = amu.replace(",", "")
                batch_amu = request.POST.get('batch_amount', '')
                batch_amu_1 = batch_amu.replace(",", "")
                doc_amount = request.POST.get('document_amount', '')
                doc_amount_1 = doc_amount.replace(",", "")

                post = request.POST.copy()  # to make it mutable

                post.update({

                    'total_amount': tot_amu_1,
                    'amount': amu_1,
                    'batch_amount': batch_amu_1,
                    'document_amount': doc_amount_1

                })
                request.POST = post
                request.POST['transaction_list_data'] = new_post

                form = APInvoiceInfoForm(data=request.POST, instance=journal,
                                         company_id=company_id)
                batch_form = BatchInfoForm(data=request.POST, instance=batch)

                if 'is_locked' in request.session and request.session['is_locked']:
                    id_inv = ''
                    inv_name = ''
                    for trx in transaction_list:
                        if trx.related_invoice:
                            id_inv = trx.related_invoice.id
                            inv_name = trx.related_invoice.document_number
                    if journal.due_date:
                        due_date = journal.due_date.strftime('%d-%m-%Y')
                    else:
                        journal.due_date = journal.document_date + relativedelta(months=1)
                        journal.save()
                        due_date = journal.due_date.strftime('%d-%m-%Y')

                    payment_terms = 30
                    try:
                        payment_terms = journal.supplier.term_days
                    except:
                        pass
                    context = {'form': form, 'batch_form': batch_form, 'distribution_code_list': distribution_code_list_ar,
                        'account_list': account_list, 'tax_list': tax_list, 'transaction_list': transaction_list,
                        'journal': journal, 'journal_type': journal.journal_type, 'batch': batch, 'batch_id': batch.id,
                        'company_currency': company.currency_id, 'id_inv': id_inv, 'inv_name': inv_name, 'is_locked': 1,
                        'next_journal': next_journal, 'prev_journal': prev_journal, 'first_journal': first_journal, 'last_journal': last_journal,
                        'next_batch': next_batch, 'prev_batch': prev_batch, 'due_date': due_date, 'payment_terms': payment_terms}
                    return render(request, 'AP_entry.html', context)
                if form.is_valid() and batch_form.is_valid():
                    AP_entry = form.save(commit=False)
                    Batch_Entry = batch_form.save(commit=False)
                    batch_id = journal.batch_id
                    batch = Batch.objects.get(id=batch_id)
                    order_list2 = Journal.objects.filter(is_hidden=0, company_id=company_id, batch_id=batch_id).exclude(
                        pk=journal_id)
                    jou_array = []
                    for ls in order_list2:
                        list_obj = {}
                        if ls.document_type == DOCUMENT_TYPE_DICT['Credit Note']:
                            list_obj['total_amount'] = str(-1 * float(ls.total_amount))
                        else:
                            list_obj['total_amount'] = str(ls.total_amount)
                        list_obj['id'] = ls.id
                        list_obj['document_type'] = ls.document_type
                        jou_array.append(list_obj)
                    amo_new = 0
                    for amo in jou_array:
                        amo_new += float(amo['total_amount'])

                    new_amount_journal = -1 * float(tot_amu_1) if request.POST['document_type'] == '3' else tot_amu_1

                    new_total_amount = round_number(float(amo_new) + float(new_amount_journal), 6)
                    Batch_Entry.batch_amount = new_total_amount
                    Batch_Entry.update_by = request.user.id
                    # Batch_Entry.currency_id = AP_entry.currency_id
                    Batch_Entry.source_ledger = SOURCE_LEDGER_DICT['Account Payable']
                    Batch_Entry.save()

                    # Save Journal Info
                    if 'is_posted' in request.POST:
                        AP_entry.status = int(STATUS_TYPE_DICT['Posted'])
                    else:
                        if j_status is None:
                            AP_entry.status = int(STATUS_TYPE_DICT['Open'])
                    AP_entry.journal_type = dict(TRANSACTION_TYPES)['AP Invoice']
                    AP_entry.update_by = request.user.id
                    AP_entry.company_id = company_id
                    AP_entry.is_hidden = False
                    AP_entry.outstanding_amount = AP_entry.total_amount
                    AP_entry.real_outstanding = AP_entry.total_amount
                    try:
                        if request.POST['due_date']:
                            AP_entry.due_date = datetime.datetime.strptime(request.POST.get('due_date'), '%d-%m-%Y')
                        elif AP_entry.supplier.term_days:
                            AP_entry.due_date = AP_entry.document_date + timedelta(
                                int(AP_entry.supplier.term_days)) 
                        else:
                            AP_entry.due_date = AP_entry.document_date + relativedelta(months=1)
                    except:
                        AP_entry.due_date = AP_entry.document_date 
                    AP_entry.batch_id = Batch_Entry.id
                    if 'orig_rate_pk' in request.POST and request.POST['orig_rate_pk'] != 'None':
                        AP_entry.orig_exch_rate_fk_id = request.POST['orig_rate_pk']
                    AP_entry.orig_exch_rate = 0
                    AP_entry.has_old_rate = False
                    AP_entry.save()

                    if 'is_posted' in request.POST:
                        GL_AP_Invoice_Entry = deepcopy(AP_entry)
                        GL_AP_Invoice_Entry.pk = None
                        GL_AP_Invoice_Entry.journal_type = dict(TRANSACTION_TYPES)['GL']
                        GL_AP_Invoice_Entry.status = int(STATUS_TYPE_DICT['Open'])
                        GL_AP_Invoice_Entry.save()

                    # get latest exchange rate
                    AP_entry.currency_id = AP_entry.supplier.currency_id
                    AP_entry.save()
                    from_currency = AP_entry.supplier.currency_id
                    to_currency = company.currency_id
                    if request.POST['exchange_rate']:
                        if 'exchange_rate_fk' in request.POST and request.POST['exchange_rate_fk']:
                            exchange_rate = ExchangeRate.objects.get(pk=request.POST['exchange_rate_fk'])
                            if request.POST['exchange_rate'] != exchange_rate.rate:
                                # exchange_rate = ExchangeRate()
                                # exchange_rate.from_currency_id = from_currency
                                # exchange_rate.to_currency_id = to_currency
                                # exchange_rate.company_id = company.id
                                # exchange_rate.rate = request.POST['exchange_rate']
                                # exchange_rate.is_hidden = 0
                                # exchange_rate.flag = 'ACCOUNTING'
                                # exchange_rate.save()
                                AP_entry.exchange_rate = request.POST['exchange_rate']
                                AP_entry.exchange_rate_fk_id = None
                                exchange_rate = None
                            else:
                                AP_entry.exchange_rate = exchange_rate.rate
                                AP_entry.exchange_rate_fk_id = exchange_rate.id
                        else:
                            AP_entry.exchange_rate = request.POST['exchange_rate']
                            AP_entry.exchange_rate_fk_id = None
                            exchange_rate = None
                    else:
                        exchange_rate = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                                    from_currency_id=from_currency,
                                                                    to_currency_id=to_currency,
                                                                    exchange_date__lte=AP_entry.document_date,
                                                                    flag='ACCOUNTING').order_by('exchange_date').last()
                        if not exchange_rate:
                            if from_currency == to_currency:
                                # exchange_rate = ExchangeRate()
                                # exchange_rate.from_currency_id = from_currency
                                # exchange_rate.to_currency_id = to_currency
                                # exchange_rate.company_id = company.id
                                # exchange_rate.rate = 1
                                # exchange_rate.is_hidden = 0
                                # exchange_rate.flag = 'ACCOUNTING'
                                # exchange_rate.save()
                                AP_entry.exchange_rate = 1
                                AP_entry.exchange_rate_fk_id = None
                            else:
                                try:
                                    transactionlib.rollback()
                                except:
                                    pass
                                messages.error(request, NO_EXCHANGE_RATE)
                                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

                        else:
                            AP_entry.exchange_rate = exchange_rate.rate
                            AP_entry.exchange_rate_fk_id = exchange_rate.id
                    if 'orig_rate' in request.POST:
                        AP_entry.orig_exch_rate = request.POST['orig_rate'] if request.POST['orig_rate'] != '' else AP_entry.exchange_rate
                    else:
                        AP_entry.orig_exch_rate = AP_entry.exchange_rate

                    perd_month, perd_year = get_fiscal_year_period(company_id, AP_entry.document_date)
                    if perd_month and perd_year:
                        AP_entry.perd_month = perd_month
                        AP_entry.perd_year = perd_year
                    else:
                        AP_entry.perd_month = int(request.POST.get('perd_month'))
                        AP_entry.perd_year = int(request.POST.get('perd_year'))
                    AP_entry.save()

                    # Update related GR Order Entry
                    if j_order_id:
                        try:
                            gr_order = Order.objects.get(pk=j_order_id)
                            gr_order.document_date = request.POST.get('document_date')
                            gr_order.subtotal = request.POST.get('amount')
                            gr_order.total = request.POST.get('total_amount')
                            gr_order.balance = request.POST.get('total_amount')
                            gr_order.tax_amount = request.POST.get('tax_amount')
                            gr_order.exchange_rate = AP_entry.exchange_rate
                            gr_order.save()
                        except Exception as e:
                            gr_order = None
                            print(EXCEPTION_JOURNAL_EDIT % ('GR Entry Update for AP Invoice'), e)
                    else:
                        gr_order = None

                    transaction_list_new = request.POST['transaction_list_data']
                    for transaction in transaction_list_new:
                        trans = None
                        if transaction['id']:
                            # get a list of deleted old_transaction
                            if deleted_transaction_list:
                                deleted_transaction_list = deleted_transaction_list.exclude(pk=transaction['id'])

                            trans = Transaction.objects.get(pk=transaction['id'])
                            trans.distribution_code_id = transaction['distribution_id'] if transaction.get(
                                'distribution_id') else None
                            # trans.remark = transaction['description']
                            trans.description = transaction['description']
                            trans.account_id = transaction['account_id']
                            trans.amount = transaction['amount'].replace(",", "")
                            trans.base_tax_amount = transaction['base_tax_amount'].replace(",", "")
                            trans.tax_amount = transaction['tax_amount']
                            trans.total_amount = transaction['total_amount'].replace(",", "")
                            if transaction['tax_id'] and transaction['tax_id'] is not '0' and transaction['tax_id'] is not '':
                                trans.tax_id = int(transaction['tax_id'])
                            else:
                                trans.tax_id = None
                            trans.currency_id = request.POST['currency']
                            id_invoice_apply = request.POST['id_related_invoice']
                            try:
                                id_invoice_apply = int(id_invoice_apply)
                                journal_id_related = Journal.objects.get(pk=id_invoice_apply)
                                journal_id_related.is_fully_paid = False
                                journal_id_related.fully_paid_date = None
                                journal_id_related.save()
                                trans.related_invoice = journal_id_related
                            except:
                                trans.related_invoice = None
                            trans.exchange_rate = AP_entry.exchange_rate
                            trans.functional_currency_id = company.currency_id
                            trans.functional_amount = float(round_number(float(trans.total_amount) * float(AP_entry.exchange_rate)))
                            trans.is_debit_account = (True, False)[AP_entry.document_type == DOCUMENT_TYPE_DICT['Credit Note']]
                            trans.is_credit_account = (False, True)[AP_entry.document_type == DOCUMENT_TYPE_DICT['Credit Note']]
                            trans.functional_balance_type = (BALANCE_TYPE_DICT['Credit'],
                                                             BALANCE_TYPE_DICT['Debit'])[trans.is_debit_account]
                            if exchange_rate:
                                trans.rate_date = exchange_rate.exchange_date
                            else:
                                try:
                                    split_date = str(AP_entry.document_date).split('-')
                                    trans.rate_date = split_date[0] + '-' + split_date[1] + '-01'
                                except:
                                    trans.rate_date = AP_entry.document_date
                            trans.is_tax_include = int(transaction['is_tax_include'])
                            trans.is_tax_transaction = int(transaction['is_tax_transaction'])
                            trans.is_manual_tax_input = int(transaction['is_manual_tax_input'])
                            trans.save()

                        else:
                            trans = Transaction()
                            trans.distribution_code_id = transaction['distribution_id'] if transaction.get(
                                'distribution_id') else None
                            # trans.remark = transaction['description']
                            trans.description = transaction['description']
                            trans.account_id = transaction['account_id']
                            trans.amount = transaction['amount'].replace(",", "")
                            trans.base_tax_amount = transaction['base_tax_amount'].replace(",", "")
                            trans.tax_amount = transaction['tax_amount']
                            trans.total_amount = transaction['total_amount'].replace(",", "")
                            if transaction['tax_id'] and transaction['tax_id'] is not '0' and transaction['tax_id'] is not '':
                                trans.tax_id = int(transaction['tax_id'])
                            else:
                                trans.tax_id = None
                            trans.currency_id = request.POST['currency']
                            trans.journal_id = AP_entry.id
                            trans.order_id = AP_entry.order_id if AP_entry.order else None
                            trans.company_id = company_id
                            trans.is_debit_account = (True, False)[AP_entry.document_type == DOCUMENT_TYPE_DICT['Credit Note']]
                            trans.is_credit_account = (False, True)[AP_entry.document_type == DOCUMENT_TYPE_DICT['Credit Note']]
                            is_include = 0
                            id_invoice_apply = request.POST['id_related_invoice']
                            try:
                                id_invoice_apply = int(id_invoice_apply)
                                journal_id_related = Journal.objects.get(pk=id_invoice_apply)
                                journal_id_related.is_fully_paid = False
                                journal_id_related.fully_paid_date = None
                                journal_id_related.save()
                                trans.related_invoice = journal_id_related
                            except:
                                trans.related_invoice = None
                            trans.is_tax_include = int(transaction['is_tax_include'])
                            trans.is_tax_transaction = int(transaction['is_tax_transaction'])
                            trans.is_manual_tax_input = int(transaction['is_manual_tax_input'])
                            trans.update_by = request.user.id

                            trans.exchange_rate = AP_entry.exchange_rate
                            trans.functional_currency_id = company.currency_id
                            trans.functional_amount = float(round_number(float(trans.total_amount) * float(AP_entry.exchange_rate)))
                            if exchange_rate:
                                trans.rate_date = exchange_rate.exchange_date
                            else:
                                try:
                                    split_date = str(AP_entry.document_date).split('-')
                                    trans.rate_date = split_date[0] + '-' + split_date[1] + '-01'
                                except:
                                    trans.rate_date = AP_entry.document_date
                            trans.functional_balance_type = (BALANCE_TYPE_DICT['Credit'],
                                                             BALANCE_TYPE_DICT['Debit'])[trans.is_debit_account]
                            trans.transaction_date = getTransactionDate(request, AP_entry.document_date)
                            trans.save()
                            if deleted_transaction_list:
                                deleted_transaction_list = deleted_transaction_list.exclude(pk=trans.id)

                        # Update related GR Order Entry
                        if gr_order:
                            if transaction['distribution_id'] and transaction['distribution_id'] is not '0':
                                gr_order.distribution_code_id = int(transaction['distribution_id'])
                            if transaction['tax_id'] and transaction['tax_id'] is not '0' and transaction['tax_id'] is not '':
                                gr_order.tax_id = int(transaction['tax_id'])
                            gr_order.save()

                        if 'is_posted' in request.POST:
                            gl_trans_debit = deepcopy(trans)
                            gl_trans_debit.pk = None
                            gl_trans_debit.reference = GL_AP_Invoice_Entry.document_number
                            gl_trans_debit.remark = GL_AP_Invoice_Entry.name + ' - ' + trans.remark
                            gl_trans_debit.journal_id = GL_AP_Invoice_Entry.id
                            # if the tax_amount > 0, write a row for GST Output Tax transaction
                            if float(gl_trans_debit.tax_amount) > 0:
                                gl_trans_debit.total_amount = transaction['amount']
                                gl_trans_debit.tax_amount = 0
                                gl_trans_debit.functional_amount = float(round_number(float(gl_trans_debit.total_amount) * float(
                                    AP_entry.exchange_rate)))

                                # create tax transaction
                                gl_trans_tax = deepcopy(gl_trans_debit)
                                gl_trans_tax.remark = GL_AP_Invoice_Entry.name
                                gl_trans_tax.amount = transaction['tax_amount']
                                gl_trans_tax.base_tax_amount = transaction['tax_amount']
                                gl_trans_tax.tax_amount = 0
                                gl_trans_tax.total_amount = transaction['tax_amount']
                                gl_trans_tax.functional_amount = float(round_number(float(gl_trans_tax.total_amount) * float(
                                    AP_entry.exchange_rate)))
                                gl_trans_tax.account_id = trans.tax.tax_account_code_id
                                gl_trans_tax.save()
                                gl_trans_debit.save()

                    if deleted_transaction_list:
                        for deleted_transaction in deleted_transaction_list:
                            deleted_transaction.is_hidden = 1
                            deleted_transaction.save()

                    # return redirect('/accounting/list/2/' + str(journal.batch_id) + '/')
                    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
                else:
                    print(INVALID_FORM, ' Form error: ', form.errors, ' Batch error: ', batch_form.errors)
                    messages.error(request, INVALID_FORM)
                    # end if POST

        id_inv = ''
        inv_name = ''
        for trx in transaction_list:
            if trx.related_invoice:
                id_inv = trx.related_invoice.id
                inv_name = trx.related_invoice.document_number
        if journal.due_date:
            due_date = journal.due_date.strftime('%d-%m-%Y')
        else:
            journal.due_date = journal.document_date + relativedelta(months=1)
            journal.save()
            due_date = journal.due_date.strftime('%d-%m-%Y')

        payment_terms = 30
        try:
            payment_terms = journal.supplier.term_days
        except:
            pass

        has_old_rate = 1 if journal.has_old_rate else 0
        if 'is_locked' in request.session and request.session['is_locked']:
            is_locked = 1
        else:
            is_locked = 0
        context = {'form': form, 'batch_form': batch_form, 'distribution_code_list': distribution_code_list_ar,
                   'account_list': account_list, 'tax_list': tax_list, 'transaction_list': transaction_list,
                   'journal': journal, 'journal_type': journal.journal_type, 'batch': batch, 'batch_id': batch.id,
                   'company_currency': company.currency_id, 'id_inv': id_inv, 'inv_name': inv_name, 'has_old_rate': has_old_rate,
                   'next_journal': next_journal, 'prev_journal': prev_journal, 'first_journal': first_journal, 'last_journal': last_journal,
                   'next_batch': next_batch, 'prev_batch': prev_batch, 'due_date': due_date, 'payment_terms': payment_terms, 'is_locked': is_locked}
        return render(request, 'AP_entry.html', context)
        # end atomic
    # end try
    except Exception as e:
        print(EXCEPTION_JOURNAL_EDIT % ('AP Invoice'), e)
        logging.error(traceback.format_exc())
        messages.error(request, EXCEPTION_JOURNAL_EDIT % ('AP Invoice'))
        return redirect('/accounting/list/2/' + str(journal.batch_id) + '/')


@login_required
# @transactionlib.atomic
def send_AP_invoice(request, journal_id, gl_batch_id):
    try:
        with transactionlib.atomic():
            company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
            journal = Journal.objects.get(pk=journal_id)
            transaction_list = Transaction.objects.filter(is_hidden=False, company_id=company_id, journal_id=journal_id)
            debit_transaction_list = transaction_list.filter(is_debit_account=1)
            credit_transaction_list = transaction_list.filter(is_credit_account=1)

            company = Company.objects.get(pk=company_id)
            total_func_debit = 0.0

            # Save Journal Info
            journal.status = int(STATUS_TYPE_DICT['Posted'])
            journal.save()

            # Create Journal of GL
            GL_AP_Invoice_Entry = deepcopy(journal)
            GL_AP_Invoice_Entry.pk = None
            GL_AP_Invoice_Entry.journal_type = dict(TRANSACTION_TYPES)['GL']
            GL_AP_Invoice_Entry.status = int(STATUS_TYPE_DICT['Open'])
            GL_AP_Invoice_Entry.batch_id = gl_batch_id
            if journal.document_type == DOCUMENT_TYPE_DICT['Invoice']:
                GL_AP_Invoice_Entry.source_type = 'AP-IN'
            elif journal.document_type == DOCUMENT_TYPE_DICT['Debit Note']:
                GL_AP_Invoice_Entry.source_type = 'AP-DB'
            elif journal.document_type == DOCUMENT_TYPE_DICT['Credit Note']:
                GL_AP_Invoice_Entry.source_type = 'AP-CR'
            GL_AP_Invoice_Entry.save()

            # get latest exchange rate
            from_currency = GL_AP_Invoice_Entry.supplier.currency_id
            to_currency = company.currency_id
            exchange_rate = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                        from_currency_id=from_currency, to_currency_id=to_currency,
                                                        flag='ACCOUNTING').order_by('exchange_date').last()
            for transaction in debit_transaction_list:
                if transaction.is_tax_transaction:
                    gl_trans_tax = deepcopy(transaction)
                    gl_trans_tax.pk = None
                    # gl_trans_tax.reference = GL_AP_Invoice_Entry.document_number
                    gl_trans_tax.remark = GL_AP_Invoice_Entry.name + ' - ' + (
                        transaction.remark if transaction.remark else '')
                    gl_trans_tax.amount = transaction.tax_amount
                    gl_trans_tax.base_tax_amount = transaction.tax_amount
                    gl_trans_tax.tax_amount = 0
                    gl_trans_tax.total_amount = transaction.tax_amount
                    gl_trans_tax.journal_id = GL_AP_Invoice_Entry.id
                    gl_trans_tax.functional_amount = float(gl_trans_tax.total_amount) * float(
                        transaction.exchange_rate)
                    gl_trans_tax.save()
                    total_func_debit += float(gl_trans_tax.functional_amount)
                elif float(transaction.amount) == 0.000000 and float(transaction.tax_amount) != 0.000000:
                    gl_trans_tax = deepcopy(transaction)
                    gl_trans_tax.pk = None
                    # gl_trans_tax.reference = GL_AP_Invoice_Entry.document_number
                    gl_trans_tax.remark = GL_AP_Invoice_Entry.name + ' - ' + (
                        transaction.remark if transaction.remark else '')
                    gl_trans_tax.amount = transaction.tax_amount
                    gl_trans_tax.base_tax_amount = transaction.tax_amount
                    gl_trans_tax.tax_amount = 0
                    gl_trans_tax.total_amount = transaction.tax_amount
                    gl_trans_tax.journal_id = GL_AP_Invoice_Entry.id
                    gl_trans_tax.functional_amount = float(gl_trans_tax.total_amount) * float(
                        transaction.exchange_rate)
                    gl_trans_tax.save()
                    total_func_debit += float(gl_trans_tax.functional_amount)
                else:
                    gl_trans_debit = deepcopy(transaction)
                    gl_trans_debit.pk = None
                    # gl_trans_debit.reference = GL_AP_Invoice_Entry.document_number
                    gl_trans_debit.remark = GL_AP_Invoice_Entry.name + ' - ' + (
                        transaction.remark if transaction.remark else '')
                    gl_trans_debit.journal_id = GL_AP_Invoice_Entry.id
                    # if the tax_amount > 0, write a row for GST Output Tax transaction
                    if float(gl_trans_debit.tax_amount) > 0:
                        gl_trans_debit.total_amount = transaction.amount
                        gl_trans_debit.tax_amount = 0
                        gl_trans_debit.functional_amount = float(gl_trans_debit.total_amount) * float(exchange_rate.rate)

                        # create tax transaction
                        gl_trans_tax = deepcopy(gl_trans_debit)
                        gl_trans_tax.remark = GL_AP_Invoice_Entry.name
                        gl_trans_tax.amount = transaction.tax_amount
                        gl_trans_tax.base_tax_amount = transaction.tax_amount
                        gl_trans_tax.tax_amount = 0
                        gl_trans_tax.total_amount = transaction.tax_amount
                        gl_trans_tax.functional_amount = float(gl_trans_tax.total_amount) * float(exchange_rate.rate)
                        gl_trans_tax.account_id = transaction.tax.tax_account_code_id
                        gl_trans_tax.save()

                        total_func_debit += float(gl_trans_debit.functional_amount) + (
                            float(gl_trans_tax.functional_amount) if gl_trans_tax else 0)
                    else:
                        total_func_debit += float(gl_trans_debit.functional_amount)
                    gl_trans_debit.save()

            last_credit_transaction = credit_transaction_list.last()
            gl_trans_credit = deepcopy(last_credit_transaction)
            gl_trans_credit.pk = None
            # gl_trans_credit.reference = GL_AP_Invoice_Entry.document_number
            gl_trans_credit.remark = GL_AP_Invoice_Entry.name
            gl_trans_credit.journal_id = GL_AP_Invoice_Entry.id
            gl_trans_credit.save()

            # for rounding floating point when exchange currency
            if float(total_func_debit) != float(gl_trans_credit.functional_amount):
                try:
                    foreign_exchange_account = Account.objects.get(pk=journal.account_set.revaluation_rounding_id)
                except Exception as e:
                    print(e)
                    print("Revaluation account couldn't be retrieved!!")
                    logging.error(traceback.format_exc())
                    return False

                gl_exchange = Transaction()
                # gl_exchange.reference = GL_AP_Invoice_Entry.document_number
                gl_exchange.remark = GL_AP_Invoice_Entry.name
                gl_exchange.journal_id = GL_AP_Invoice_Entry.id
                gl_exchange.account_id = foreign_exchange_account.id if foreign_exchange_account else None
                gl_exchange.company_id = company_id
                gl_exchange.currency_id = last_credit_transaction.currency_id
                gl_exchange.update_by = last_credit_transaction.update_by
                gl_exchange.order_id = GL_AP_Invoice_Entry.order_id
                if exchange_rate:
                    gl_exchange.exchange_rate = exchange_rate.rate
                    gl_exchange.functional_currency_id = company.currency_id
                    gl_exchange.rate_date = exchange_rate.exchange_date
                foreign_exchange_amount = float(gl_trans_credit.functional_amount) - float(total_func_debit)
                if foreign_exchange_amount > 0:
                    gl_exchange.is_debit_account = True
                    gl_exchange.functional_amount = foreign_exchange_amount
                else:
                    gl_exchange.is_debit_account = True
                    gl_exchange.functional_amount = math.fabs(foreign_exchange_amount)
                gl_exchange.functional_balance_type = (BALANCE_TYPE_DICT['Credit'],
                                                       BALANCE_TYPE_DICT['Debit'])[gl_exchange.is_debit_account]
                gl_exchange.transaction_date = request.session['session_date']
                gl_exchange.save()

    except Exception as e:
        print(e)
        logging.error(traceback.format_exc())
        return False
    return True


@login_required
def send_GL_invoice(request, journal, is_provisional):
    try:
        new_status = (STATUS_TYPE_DICT['Posted'], STATUS_TYPE_DICT['Prov. Posted'])[is_provisional]
        if int(journal.status) in (int(STATUS_TYPE_DICT['Open']), int(STATUS_TYPE_DICT['Prov. Posted'])):
            journal.status = new_status
        journal.posting_date = journal.document_date
        journal.update_date = datetime.datetime.today()
        journal.save()
    except Exception as e:
        print(e)
        logging.error(traceback.format_exc())
        return False
    return True


@login_required
@check_fiscal
# @transactionlib.atomic
def send_AP_batch(request, batch_id):
    try:
        with transactionlib.atomic():
            if 'is_locked' in request.session and request.session['is_locked']:
                return redirect('/accounting/list/2/' + str(batch_id) + '/')

            company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
            session_date = request.session['session_date']
            company = Company.objects.get(pk=company_id)
            ap_batch = Batch.objects.get(pk=batch_id)
            journal_list = Journal.objects.filter(is_hidden=0, batch_id=batch_id, company_id=company_id)\
                .select_related('batch')
            for journal_item in journal_list:
                if journal_item.total_amount != journal_item.document_amount:
                    messages.error(request, MESSAGE_ERROR_1 + ' of entry : ' + journal_item.code)
                    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
            # Update Status of AR Batch
            ap_batch.status = int(STATUS_TYPE_DICT['Posted'])
            ap_batch.save()

            # Create new GL Batch
            gl_batch = deepcopy(ap_batch)
            gl_batch.pk = None
            gl_batch.company_id = company_id
            gl_batch.batch_no = generate_batch_number(company_id, dict(TRANSACTION_TYPES)['GL'])
            gl_batch.description = 'Generated from AP Invoice ' + str(ap_batch.batch_date.strftime('%d/%m/%Y'))
            gl_batch.batch_type = dict(TRANSACTION_TYPES)['GL']
            gl_batch.document_type = int(DOCUMENT_TYPE_DICT['Invoice'])
            gl_batch.no_entries = journal_list.count()
            gl_batch.batch_amount = 0
            gl_batch.posting_sequence = 0
            gl_batch.input_type = int(INPUT_TYPE_DICT['Generated'])
            gl_batch.status = int(STATUS_TYPE_DICT['Open'])
            gl_batch.create_date = datetime.datetime.today()
            gl_batch.update_date = datetime.datetime.today()
            gl_batch.is_hidden = False
            gl_batch.related_batch_id = ap_batch.id
            gl_batch.save()

            for journal_item in journal_list:
                gl_batch_id = gl_batch.id
                transaction_list = Transaction.objects.filter(company_id=company_id, is_hidden=0,
                                                              journal_id=journal_item.id)\
                    .select_related('journal')

                total_source = 0.0
                total_func = 0.0
                tax_source = 0.0
                tax_func = 0.0
                tax_id = None

                # Save Journal Info
                journal_item.status = int(STATUS_TYPE_DICT['Posted'])
                journal_item.update_by = request.user.id
                journal_item.update_date = datetime.datetime.now()
                journal_item.save()

                # Create Journal of GL
                GL_AP_Invoice_Entry = deepcopy(journal_item)
                GL_AP_Invoice_Entry.pk = None
                GL_AP_Invoice_Entry.journal_type = dict(TRANSACTION_TYPES)['GL']
                GL_AP_Invoice_Entry.status = int(STATUS_TYPE_DICT['Open'])
                GL_AP_Invoice_Entry.batch_id = gl_batch_id
                if journal_item.document_type == DOCUMENT_TYPE_DICT['Invoice']:
                    GL_AP_Invoice_Entry.source_type = 'AP-IN'
                elif journal_item.document_type == DOCUMENT_TYPE_DICT['Debit Note']:
                    GL_AP_Invoice_Entry.source_type = 'AP-DB'
                elif journal_item.document_type == DOCUMENT_TYPE_DICT['Credit Note']:
                    GL_AP_Invoice_Entry.source_type = 'AP-CR'
                GL_AP_Invoice_Entry.exchange_rate = 1
                GL_AP_Invoice_Entry.total_amount = float(round_number(math.fabs(journal_item.total_amount * journal_item.exchange_rate)))
                GL_AP_Invoice_Entry.amount = float(round_number(math.fabs(journal_item.total_amount * journal_item.exchange_rate)))
                GL_AP_Invoice_Entry.save()
                name = generate_description(company_id, journal_item, 'G/L Entry Description')
                if name and name != '':
                    GL_AP_Invoice_Entry.name = name
                else:
                    GL_AP_Invoice_Entry.name = ""
                GL_AP_Invoice_Entry.save()

                gl_batch.batch_amount += GL_AP_Invoice_Entry.total_amount
                gl_batch.save()

                # if transaction_list:
                #     lst_transaction = transaction_list.last()
                #     j_desc = generate_description(company_id, journal_item, 'G/L Detail Description', False, lst_transaction)
                #     j_reference = generate_description(company_id, journal_item, 'G/L Detail Reference', False, lst_transaction)
                #     j_remark = generate_description(company_id, journal_item, 'G/L Detail Comment', False, lst_transaction)

                for transaction in transaction_list:
                    j_desc = generate_description(company_id, journal_item, 'G/L Detail Description', False, transaction)
                    j_reference = generate_description(company_id, journal_item, 'G/L Detail Reference', False, transaction)
                    j_remark = generate_description(company_id, journal_item, 'G/L Detail Comment', False, transaction)
                    desc = generate_description(company_id, journal_item, 'G/L Detail Description', True, transaction)
                    reference = generate_description(company_id, journal_item, 'G/L Detail Reference', True, transaction)
                    remark = generate_description(company_id, journal_item, 'G/L Detail Comment', True, transaction)
                    if transaction.is_tax_transaction:
                        # gl_trans_tax = deepcopy(transaction)
                        # gl_trans_tax.pk = None
                        # if desc != '':
                        #     gl_trans_tax.description = desc
                        # else:
                        #     gl_trans_tax.description = to_string(GL_AP_Invoice_Entry.name) + ' - ' + to_string(
                        #         transaction.remark)
                        # if reference != '':
                        #     gl_trans_tax.reference = reference
                        # if remark != '':
                        #     gl_trans_tax.remark = remark
                        # else:
                        #     gl_trans_tax.remark = GL_AP_Invoice_Entry.name + ' - ' + (
                        #         transaction.remark if transaction.remark else '')
                        # gl_trans_tax.amount = math.fabs(transaction.tax_amount)
                        # gl_trans_tax.base_tax_amount = math.fabs(transaction.tax_amount)
                        # gl_trans_tax.tax_amount = 0
                        # gl_trans_tax.total_amount = math.fabs(transaction.tax_amount)
                        # gl_trans_tax.journal_id = GL_AP_Invoice_Entry.id
                        # gl_trans_tax.source_type = GL_AP_Invoice_Entry.source_type
                        # gl_trans_tax.functional_amount = math.fabs(float(gl_trans_tax.total_amount) * float(
                        #     transaction.exchange_rate))
                        # if transaction.total_amount < 0:
                        #     if transaction.is_debit_account:
                        #         gl_trans_tax.is_debit_account = False
                        #         gl_trans_tax.is_credit_account = True
                        #         gl_trans_tax.functional_balance_type = BALANCE_TYPE_DICT['Credit']
                        #     else:
                        #         gl_trans_tax.is_debit_account = True
                        #         gl_trans_tax.is_credit_account = False
                        #         gl_trans_tax.functional_balance_type = BALANCE_TYPE_DICT['Debit']
                        #     total_source -= float(gl_trans_tax.amount)
                        #     total_func -= float(gl_trans_tax.functional_amount)
                        # else:
                        #     if transaction.is_debit_account:
                        #         gl_trans_tax.is_debit_account = True
                        #         gl_trans_tax.is_credit_account = False
                        #         gl_trans_tax.functional_balance_type = BALANCE_TYPE_DICT['Debit']
                        #     else:
                        #         gl_trans_tax.is_debit_account = False
                        #         gl_trans_tax.is_credit_account = True
                        #         gl_trans_tax.functional_balance_type = BALANCE_TYPE_DICT['Credit']
                        #     total_source += float(gl_trans_tax.amount)
                        #     total_func += float(gl_trans_tax.functional_amount)
                        # gl_trans_tax.save()
                        if transaction.tax and transaction.tax.tax_account_code_id:
                            tax_id = transaction.tax.tax_account_code_id
                        tax_source += float(transaction.tax_amount)
                        tax_func += float(transaction.tax_amount) * float(transaction.exchange_rate)
                        total_func += float(transaction.tax_amount) * float(transaction.exchange_rate)

                    elif float(transaction.amount) == 0.000000 and float(transaction.tax_amount) != 0.000000:
                        gl_trans_tax = deepcopy(transaction)
                        gl_trans_tax.pk = None
                        if desc != '':
                            gl_trans_tax.description = desc
                        else:
                            gl_trans_tax.description = ''
                            # gl_trans_tax.description = to_string(GL_AP_Invoice_Entry.name) + ' - ' + to_string(
                            #     transaction.remark)
                        if reference != '':
                            gl_trans_tax.reference = reference
                        else:
                            gl_trans_tax.reference = ''
                        if remark != '':
                            gl_trans_tax.remark = remark
                        else:
                            gl_trans_tax.remark = ''
                        gl_trans_tax.amount = math.fabs(transaction.tax_amount)
                        gl_trans_tax.base_tax_amount = math.fabs(transaction.tax_amount)
                        gl_trans_tax.tax_amount = 0
                        gl_trans_tax.total_amount = math.fabs(transaction.tax_amount)
                        gl_trans_tax.journal_id = GL_AP_Invoice_Entry.id
                        gl_trans_tax.source_type = GL_AP_Invoice_Entry.source_type
                        if company.currency.is_decimal:
                            gl_trans_tax.functional_amount = float(round_number(math.fabs(Decimal(gl_trans_tax.total_amount) * Decimal(
                                transaction.exchange_rate))))
                        else:
                            gl_trans_tax.functional_amount = float(round_number(math.fabs(Decimal(gl_trans_tax.total_amount) * Decimal(
                                transaction.exchange_rate)), 0))
                        if transaction.total_amount < 0:
                            if transaction.is_debit_account:
                                gl_trans_tax.is_debit_account = False
                                gl_trans_tax.is_credit_account = True
                                gl_trans_tax.functional_balance_type = BALANCE_TYPE_DICT['Credit']
                            else:
                                gl_trans_tax.is_debit_account = True
                                gl_trans_tax.is_credit_account = False
                                gl_trans_tax.functional_balance_type = BALANCE_TYPE_DICT['Debit']
                            total_source -= float(gl_trans_tax.amount)
                            total_func -= float(gl_trans_tax.total_amount) * float(transaction.exchange_rate)
                        else:
                            if transaction.is_debit_account:
                                gl_trans_tax.is_debit_account = True
                                gl_trans_tax.is_credit_account = False
                                gl_trans_tax.functional_balance_type = BALANCE_TYPE_DICT['Debit']
                            else:
                                gl_trans_tax.is_debit_account = False
                                gl_trans_tax.is_credit_account = True
                                gl_trans_tax.functional_balance_type = BALANCE_TYPE_DICT['Credit']
                            total_source += float(gl_trans_tax.amount)
                            total_func += float(gl_trans_tax.total_amount) * float(transaction.exchange_rate)
                        gl_trans_tax.save()
                        # if transaction.tax and transaction.tax.tax_account_code_id:
                        #     tax_id = transaction.tax.tax_account_code_id
                        # tax_source += float(transaction.tax_amount)
                        # tax_func += float(transaction.tax_amount) * float(transaction.exchange_rate)

                    else:
                        gl_trans_debit = deepcopy(transaction)
                        gl_trans_debit.pk = None
                        if desc != '':
                            gl_trans_debit.description = desc
                        else:
                            gl_trans_debit.description = ''
                        if reference != '':
                            gl_trans_debit.reference = reference
                        else:
                            gl_trans_debit.reference = ''
                        if remark != '':
                            gl_trans_debit.remark = remark
                        else:
                            gl_trans_debit.remark = ''
                        gl_trans_debit.journal_id = GL_AP_Invoice_Entry.id
                        gl_trans_debit.source_type = GL_AP_Invoice_Entry.source_type
                        gl_trans_debit.amount = math.fabs(transaction.amount)
                        gl_trans_debit.base_tax_amount = math.fabs(transaction.base_tax_amount)
                        gl_trans_debit.total_amount = math.fabs(transaction.total_amount)
                        if company.currency.is_decimal:
                            gl_trans_debit.functional_amount = float(round_number(math.fabs(Decimal(gl_trans_debit.total_amount) * Decimal(
                                transaction.exchange_rate))))
                        else:
                            gl_trans_debit.functional_amount = float(round_number(math.fabs(Decimal(gl_trans_debit.total_amount) * Decimal(
                                transaction.exchange_rate)), 0))
                        if transaction.total_amount < 0:
                            if transaction.is_debit_account:
                                gl_trans_debit.is_debit_account = False
                                gl_trans_debit.is_credit_account = True
                                gl_trans_debit.functional_balance_type = BALANCE_TYPE_DICT['Credit']
                            else:
                                gl_trans_debit.is_debit_account = True
                                gl_trans_debit.is_credit_account = False
                                gl_trans_debit.functional_balance_type = BALANCE_TYPE_DICT['Debit']
                            total_source -= float(gl_trans_debit.amount)
                            total_func -= float(gl_trans_debit.total_amount) * float(transaction.exchange_rate)
                        else:
                            if transaction.is_debit_account:
                                gl_trans_debit.is_debit_account = True
                                gl_trans_debit.is_credit_account = False
                                gl_trans_debit.functional_balance_type = BALANCE_TYPE_DICT['Debit']
                            else:
                                gl_trans_debit.is_debit_account = False
                                gl_trans_debit.is_credit_account = True
                                gl_trans_debit.functional_balance_type = BALANCE_TYPE_DICT['Credit']
                            total_source += float(gl_trans_debit.amount)
                            total_func += float(gl_trans_debit.total_amount) * float(transaction.exchange_rate)
                        gl_trans_debit.save()

                        if float(gl_trans_debit.tax_amount) != 0:
                            gl_trans_debit.tax_amount = 0
                            gl_trans_debit.amount = math.fabs(transaction.amount)
                            gl_trans_debit.base_tax_amount = math.fabs(transaction.base_tax_amount)
                            gl_trans_debit.total_amount = math.fabs(transaction.amount)
                            if company.currency.is_decimal:
                                gl_trans_debit.functional_amount = float(round_number(math.fabs(Decimal(gl_trans_debit.total_amount) * Decimal(
                                    transaction.exchange_rate))))
                            else:
                                gl_trans_debit.functional_amount = float(round_number(math.fabs(Decimal(gl_trans_debit.total_amount) * Decimal(
                                    transaction.exchange_rate)), 0))
                            if transaction.amount < 0:
                                if transaction.is_debit_account:
                                    gl_trans_debit.is_debit_account = False
                                    gl_trans_debit.is_credit_account = True
                                    gl_trans_debit.functional_balance_type = BALANCE_TYPE_DICT['Credit']
                                else:
                                    gl_trans_debit.is_debit_account = True
                                    gl_trans_debit.is_credit_account = False
                                    gl_trans_debit.functional_balance_type = BALANCE_TYPE_DICT['Debit']
                            else:
                                if transaction.is_debit_account:
                                    gl_trans_debit.is_debit_account = True
                                    gl_trans_debit.is_credit_account = False
                                    gl_trans_debit.functional_balance_type = BALANCE_TYPE_DICT['Debit']
                                else:
                                    gl_trans_debit.is_debit_account = False
                                    gl_trans_debit.is_credit_account = True
                                    gl_trans_debit.functional_balance_type = BALANCE_TYPE_DICT['Credit']
                            gl_trans_debit.save()
                            if transaction.tax and transaction.tax.tax_account_code_id:
                                tax_id = transaction.tax.tax_account_code_id
                            tax_source += float(transaction.tax_amount)
                            tax_func += float(transaction.tax_amount) * float(transaction.exchange_rate)

                total_source += tax_source
                if total_func == 0 and tax_func > 0:
                    total_func = tax_func
                # create bank transaction
                last_transaction = transaction_list.last()
                if last_transaction:
                    if tax_id:
                        gl_trans_tax = deepcopy(last_transaction)
                        gl_trans_tax.pk = None
                        if j_desc != '':
                            gl_trans_tax.description = j_desc
                        elif desc != '':
                            gl_trans_tax.description = desc
                        else:
                            gl_trans_tax.description = ''
                        if j_reference != '':
                            gl_trans_tax.reference = j_reference
                        else:
                            gl_trans_tax.reference = ''
                        if j_remark != '':
                            gl_trans_tax.remark = j_remark
                        else:
                            gl_trans_tax.remark = ''
                        gl_trans_tax.amount = float(round_number(math.fabs(tax_source)))
                        gl_trans_tax.base_tax_amount = float(round_number(math.fabs(tax_source)))
                        gl_trans_tax.tax_amount = 0
                        gl_trans_tax.total_amount = float(round_number(math.fabs(tax_source)))
                        if company.currency.is_decimal:
                            gl_trans_tax.functional_amount = float(round_number(math.fabs(tax_func)))
                        else:
                            gl_trans_tax.functional_amount = float(round_number(math.fabs(tax_func), 0))
                        gl_trans_tax.journal_id = GL_AP_Invoice_Entry.id
                        gl_trans_tax.source_type = GL_AP_Invoice_Entry.source_type
                        gl_trans_tax.account_id = tax_id
                        if tax_func < 0:
                            if last_transaction.is_debit_account:
                                gl_trans_tax.is_debit_account = False
                                gl_trans_tax.is_credit_account = True
                                gl_trans_tax.functional_balance_type = BALANCE_TYPE_DICT['Credit']
                            else:
                                gl_trans_tax.is_debit_account = True
                                gl_trans_tax.is_credit_account = False
                                gl_trans_tax.functional_balance_type = BALANCE_TYPE_DICT['Debit']
                        else:
                            if last_transaction.is_debit_account:
                                gl_trans_tax.is_debit_account = True
                                gl_trans_tax.is_credit_account = False
                                gl_trans_tax.functional_balance_type = BALANCE_TYPE_DICT['Debit']
                            else:
                                gl_trans_tax.is_debit_account = False
                                gl_trans_tax.is_credit_account = True
                                gl_trans_tax.functional_balance_type = BALANCE_TYPE_DICT['Credit']
                        gl_trans_tax.save()
                        
                        if gl_trans_tax.functional_amount != 0 and total_func == 0:
                            total_func = tax_func

                    bank_transaction = deepcopy(last_transaction)
                    bank_transaction.pk = None
                    if total_func < 0:
                        if last_transaction.is_debit_account:
                            bank_transaction.is_debit_account = True
                            bank_transaction.is_credit_account = False
                            bank_transaction.functional_balance_type = BALANCE_TYPE_DICT['Debit']
                        else:
                            bank_transaction.is_debit_account = False
                            bank_transaction.is_credit_account = True
                            bank_transaction.functional_balance_type = BALANCE_TYPE_DICT['Credit']
                    else:
                        if last_transaction.is_debit_account:
                            bank_transaction.is_debit_account = False
                            bank_transaction.is_credit_account = True
                            bank_transaction.functional_balance_type = BALANCE_TYPE_DICT['Credit']
                        else:
                            bank_transaction.is_debit_account = True
                            bank_transaction.is_credit_account = False
                            bank_transaction.functional_balance_type = BALANCE_TYPE_DICT['Debit']
                    if j_desc != '':
                        bank_transaction.description = j_desc
                    elif desc != '':
                        bank_transaction.description = desc
                    else:
                        bank_transaction.description = ''
                    if j_reference != '':
                        bank_transaction.reference = j_reference
                    else:
                        bank_transaction.reference = ''
                    if j_remark != '':
                        bank_transaction.remark = j_remark
                    else:
                        bank_transaction.remark = ''
                    bank_transaction.amount = float(round_number(math.fabs(total_source)))
                    bank_transaction.base_tax_amount = float(round_number(math.fabs(total_source)))
                    bank_transaction.tax_amount = 0
                    bank_transaction.total_amount = float(round_number(math.fabs(total_source)))
                    functional_amount = float(bank_transaction.total_amount) * float(bank_transaction.exchange_rate)
                    if company.currency.is_decimal:
                        bank_transaction.functional_amount = float(round_number(math.fabs(functional_amount)))
                    else:
                        bank_transaction.functional_amount = float(round_number(math.fabs(functional_amount), 0))
                    # if company.currency.is_decimal:
                    #     bank_transaction.functional_amount = math.fabs(total_func)
                    # else:
                    #     bank_transaction.functional_amount = math.fabs(round(total_func))
                    bank_transaction.tax_id = None
                    bank_transaction.account_id = journal_item.account_set.control_account_id
                    bank_transaction.journal_id = GL_AP_Invoice_Entry.id
                    bank_transaction.source_type = GL_AP_Invoice_Entry.source_type
                    bank_transaction.save()

                    firstTrx = transaction_list.first()
                    related_invoice_list = []
                    if firstTrx.related_invoice_id:
                        try:
                            related_invoice = Journal.objects.get(pk=firstTrx.related_invoice_id)
                            doc_amt = (journal_item.outstanding_amount * -1, journal_item.outstanding_amount)[
                                firstTrx.is_debit_account]
                            doc_end_balance = related_invoice.outstanding_amount + doc_amt
                            journal_item.paid_amount = \
                                (related_invoice.outstanding_amount, journal_item.document_amount)[doc_end_balance >= 0]
                            journal_item.outstanding_amount = (doc_end_balance, 0)[doc_end_balance >= 0]
                            journal_item.real_outstanding = journal_item.outstanding_amount
                            # if related_invoice.outstanding_amount < 0:
                            #     journal_item.paid_amount = journal_item.document_amount
                            #     journal_item.outstanding_amount = 0
                            # journal_item.is_fully_paid = (False, True)[journal_item.outstanding_amount == 0]
                            journal_item.is_fully_paid = True
                            if journal_item.is_fully_paid:
                                journal_item.fully_paid_date = journal_item.document_date
                            journal_item.save()
                            last_outstanding = related_invoice.outstanding_amount
                            last_time_was_fully_paid = True if related_invoice.fully_paid_date else False
                            if journal_item.document_type == DOCUMENT_TYPE_DICT['Debit Note']:
                                if related_invoice.document_type == DOCUMENT_TYPE_DICT['Credit Note']:
                                    # related_invoice.payment_number += 1
                                    if related_invoice.outstanding_amount >= 0:
                                        related_invoice.paid_amount -= Decimal(journal_item.total_amount)
                                        related_invoice.outstanding_amount -= Decimal(journal_item.total_amount)
                                    else:
                                        related_invoice.paid_amount += Decimal(journal_item.total_amount)
                                        related_invoice.outstanding_amount += Decimal(journal_item.total_amount)
                                else:
                                    related_invoice.outstanding_amount += Decimal(journal_item.total_amount)
                            elif journal_item.document_type == DOCUMENT_TYPE_DICT['Credit Note']:
                                if related_invoice.document_type == DOCUMENT_TYPE_DICT['Credit Note']:
                                    if related_invoice.outstanding_amount >= 0:
                                        related_invoice.outstanding_amount += Decimal(journal_item.total_amount)
                                    else:
                                        related_invoice.outstanding_amount -= Decimal(journal_item.total_amount)
                                else:
                                    # related_invoice.payment_number += 1
                                    # if related_invoice.outstanding_amount >= 0:
                                    related_invoice.paid_amount += Decimal(journal_item.total_amount)
                                    related_invoice.outstanding_amount -= Decimal(journal_item.total_amount)
                            related_invoice.is_fully_paid = (False, True)[related_invoice.outstanding_amount == 0]
                            if related_invoice.is_fully_paid:
                                related_invoice.fully_paid_date = firstTrx.journal.document_date
                            else:
                                related_invoice.fully_paid_date = None

                            related_invoice.real_outstanding = related_invoice.outstanding_amount
                            related_invoice_list.append(related_invoice.id)
                            if journal_item.document_type == DOCUMENT_TYPE_DICT['Credit Note']:
                                if related_invoice.document_type != DOCUMENT_TYPE_DICT['Credit Note']:
                                    if float(last_outstanding) < float(journal_item.total_amount):
                                        journal_item.is_fully_paid = False
                                        journal_item.fully_paid_date = None
                                        if related_invoice.is_fully_paid:
                                            journal_item.outstanding_amount = math.fabs(last_outstanding)
                                            journal_item.real_outstanding = math.fabs(last_outstanding)
                                        journal_item.save()
                                    if math.fabs(journal_item.total_amount) > math.fabs(last_outstanding):
                                        related_invoice.fully_paid_date = journal_item.document_date
                                        related_invoice.is_fully_paid = True
                                        related_invoice.save()

                                        related_invoice_list.remove(related_invoice.id)
                                    # rtrxs = Transaction.objects.filter(journal_id=related_invoice.id, is_hidden=False)
                                    # for rtrx in rtrxs:
                                    #     rtrx.related_journal_outstanding = journal_item.outstanding_amount
                                    #     rtrx.save()

                            elif journal_item.document_type == DOCUMENT_TYPE_DICT['Debit Note']:
                                if related_invoice.document_type == DOCUMENT_TYPE_DICT['Credit Note']:
                                    if math.fabs(journal_item.total_amount) > math.fabs(last_outstanding):
                                        related_invoice.fully_paid_date = journal_item.document_date
                                        related_invoice.is_fully_paid = True
                                        related_invoice.save()
                                        # journal_item.outstanding_amount = (2 * math.fabs(
                                        #     journal_item.total_amount)) - math.fabs(related_invoice.outstanding_amount)
                                        journal_item.outstanding_amount = math.fabs(
                                            journal_item.total_amount) - math.fabs(last_outstanding)
                                        journal_item.real_outstanding = math.fabs(
                                            journal_item.total_amount) - math.fabs(last_outstanding)
                                        journal_item.is_fully_paid = False
                                        journal_item.fully_paid_date = None
                                        journal_item.save()

                                        related_invoice_list.remove(related_invoice.id)
                                        # rtrxs = Transaction.objects.filter(journal_id=related_invoice.id, is_hidden=False)
                                        # for rtrx in rtrxs:
                                        #     rtrx.related_journal_outstanding = journal_item.outstanding_amount
                                        #     rtrx.save()

                            related_invoice.save()
                            
                            # update for aging
                            for aTrx in transaction_list:
                                aTrx.related_journal_outstanding = related_invoice.outstanding_amount
                                aTrx.save()
                            
                            if related_invoice.fully_paid_date == None and last_time_was_fully_paid:
                                last_payment_trx = Transaction.objects.filter(related_invoice_id=related_invoice.id,
                                        journal__document_date__gte=related_invoice.document_date, journal__status=int(STATUS_TYPE_DICT['Posted'])
                                    ).exclude(journal_id__isnull=True).exclude(journal__reverse_reconciliation=True
                                    ).exclude(journal__journal_type=dict(TRANSACTION_TYPES)['GL']
                                    ).exclude(journal__journal_type=dict(TRANSACTION_TYPES)['AD']
                                    ).exclude(is_hidden=True
                                    ).order_by('-transaction_date', '-id')
                                for lTrx in last_payment_trx:
                                    if lTrx.related_journal_outstanding == 0:
                                        lTrx.related_journal_outstanding = related_invoice.outstanding_amount
                                        lTrx.save()
                            else:
                                # fix aging
                                if len(related_invoice_list):
                                    update_aging_thread = threading.Thread(name='fix_payments_outs_amount_ap',
                                                                        target=fix_payments_outs_amount,
                                                                        args=(request, 'AP', related_invoice_list, ), daemon=False)
                                    update_aging_thread.start()

                            # Do not create redundant extra transaction with 0 amount
                            if journal_item.paid_amount != 0:
                                extra_trans1 = deepcopy(bank_transaction)
                                extra_trans1.pk = None
                                extra_trans1.is_debit_account = (True, False)[bank_transaction.is_debit_account]
                                extra_trans1.is_credit_account = (False, True)[bank_transaction.is_debit_account]
                                extra_trans1.functional_balance_type = (BALANCE_TYPE_DICT['Debit'],
                                                                        BALANCE_TYPE_DICT['Credit'])[
                                    bank_transaction.is_debit_account]
                                extra_trans1.save()

                                extra_trans2 = deepcopy(extra_trans1)
                                extra_trans2.pk = None
                                extra_trans2.is_debit_account = (True, False)[extra_trans1.is_debit_account]
                                extra_trans2.is_credit_account = (False, True)[extra_trans1.is_debit_account]
                                extra_trans2.functional_balance_type = (BALANCE_TYPE_DICT['Debit'],
                                                                        BALANCE_TYPE_DICT['Credit'])[
                                    extra_trans1.is_debit_account]
                                extra_trans2.save()

                                GL_AP_Invoice_Entry.amount += float(extra_trans1.functional_amount)
                                GL_AP_Invoice_Entry.total_amount += float(extra_trans1.functional_amount)
                            GL_AP_Invoice_Entry.save()

                            gl_batch.batch_amount -= float(total_func)
                            gl_batch.batch_amount += float(GL_AP_Invoice_Entry.total_amount)
                            gl_batch.save()

                            rate_different = journal_item.exchange_rate - journal_item.orig_exch_rate

                            if rate_different != Decimal(0.0000000):
                                try:
                                    if journal_item.account_set and journal_item.account_set.revaluation_rounding_id:
                                        foreign_exchange_account = Account.objects.get(
                                            pk=journal_item.account_set.revaluation_rounding_id)
                                    else:
                                        foreign_exchange_account = Account.objects.filter(
                                            Q(name__icontains='FOREIGN') & Q(name__icontains='EXCHANGE')).first()
                                except Exception as e:
                                    print('Journal-ID ' + str(journal_item.id))
                                    print(e)
                                    print("Revaluation account couldn't be retrieved!!")
                                    logging.error(traceback.format_exc())
                                    return False

                                foreign_exchange_amount = math.fabs(
                                    Decimal(bank_transaction.total_amount) * Decimal(rate_different))
                                forex_trx1 = deepcopy(extra_trans1)
                                forex_trx1.pk = None
                                forex_trx1.source_type = 'AP-GL'
                                forex_trx1.amount = 0
                                forex_trx1.base_tax_amount = 0
                                forex_trx1.tax_amount = 0
                                forex_trx1.total_amount = 0
                                if company.currency.is_decimal:
                                    forex_trx1.functional_amount = float(round_number(foreign_exchange_amount))
                                else:
                                    forex_trx1.functional_amount = float(round_number(foreign_exchange_amount, 0))
                                forex_trx1.functional_balance_type = (BALANCE_TYPE_DICT['Credit'],
                                                                    BALANCE_TYPE_DICT['Debit'])[
                                    extra_trans1.is_credit_account]
                                forex_trx1.is_debit_account = (True, False)[extra_trans1.is_debit_account]
                                forex_trx1.is_credit_account = (False, True)[extra_trans1.is_debit_account]
                                forex_trx1.transaction_date = getTransactionDate(request, GL_AP_Invoice_Entry.document_date)
                                forex_trx1.save()
                                forex_trx2 = deepcopy(forex_trx1)
                                forex_trx2.pk = None
                                forex_trx2.is_debit_account = (True, False)[forex_trx1.is_debit_account]
                                forex_trx2.is_credit_account = (False, True)[forex_trx1.is_debit_account]
                                forex_trx2.account_id = foreign_exchange_account.id if foreign_exchange_account else None
                                forex_trx2.functional_balance_type = (BALANCE_TYPE_DICT['Debit'],
                                                                    BALANCE_TYPE_DICT['Credit'])[
                                    forex_trx1.is_debit_account]
                                forex_trx2.save()
                                GL_AP_Invoice_Entry.amount += float(forex_trx1.functional_amount)
                                GL_AP_Invoice_Entry.total_amount += float(forex_trx1.functional_amount)
                                GL_AP_Invoice_Entry.save()

                                gl_batch.batch_amount += float(forex_trx1.functional_amount)
                                gl_batch.save()
                        except Exception as e:
                            print(e)

                    total_func_debit = total_func_credit = 0
                    transaction_list = Transaction.objects.filter(company_id=company_id, is_hidden=0,
                                                                journal_id=GL_AP_Invoice_Entry.id)
                    trx_debits = transaction_list.filter(is_debit_account=1)
                    for trx_debit in trx_debits:
                        total_func_debit += round_number(trx_debit.functional_amount)
                    trx_credits = transaction_list.filter(is_credit_account=1)
                    for trx_credit in trx_credits:
                        total_func_credit += round_number(trx_credit.functional_amount)

                    # for rounding floating point when exchange currency
                    if round_number(total_func_debit) != round_number(total_func_credit):
                        foreign_exchange_amount = round_number(total_func_debit) - round_number(total_func_credit)
                        try:
                            if journal_item.account_set and journal_item.account_set.revaluation_rounding_id:
                                foreign_exchange_account = Account.objects.get(
                                    pk=journal_item.account_set.revaluation_rounding_id)
                            else:
                                foreign_exchange_account = Account.objects.filter(
                                    Q(name__icontains='FOREIGN') & Q(name__icontains='EXCHANGE')).first()

                            gl_exchange = Transaction()
                            if j_desc != '':
                                gl_exchange.description = j_desc
                            elif desc != '':
                                gl_exchange.description = desc
                            else:
                                gl_exchange.description = ''
                            if j_reference != '':
                                gl_exchange.reference = j_reference
                            else:
                                gl_exchange.reference = ''
                            if j_remark != '':
                                gl_exchange.remark = j_remark
                            else:
                                gl_exchange.remark = ''
                            gl_exchange.journal_id = GL_AP_Invoice_Entry.id
                            gl_exchange.account_id = foreign_exchange_account.id if foreign_exchange_account else None
                            gl_exchange.company_id = company_id
                            gl_exchange.currency_id = last_transaction.currency_id
                            gl_exchange.order_id = GL_AP_Invoice_Entry.order_id
                            gl_exchange.source_type = 'AP-RD'
                            gl_exchange.exchange_rate = last_transaction.exchange_rate
                            gl_exchange.rate_date = last_transaction.rate_date if last_transaction.rate_date else None
                            gl_exchange.functional_currency_id = company.currency_id
                            gl_exchange.is_debit_account = (True, False)[foreign_exchange_amount > 0]
                            gl_exchange.is_credit_account = (False, True)[foreign_exchange_amount > 0]
                            if company.currency.is_decimal:
                                gl_exchange.functional_amount = float(round_number(math.fabs(foreign_exchange_amount)))
                            else:
                                gl_exchange.functional_amount = float(round_number(math.fabs(foreign_exchange_amount), 0))
                            gl_exchange.functional_balance_type = (BALANCE_TYPE_DICT['Debit'],
                                                                BALANCE_TYPE_DICT['Credit'])[foreign_exchange_amount > 0]
                            gl_exchange.transaction_date = getTransactionDate(request, GL_AP_Invoice_Entry.document_date)
                            gl_exchange.save()

                            GL_AP_Invoice_Entry.amount += float(math.fabs(gl_exchange.functional_amount))
                            GL_AP_Invoice_Entry.total_amount += float(math.fabs(gl_exchange.functional_amount))
                            GL_AP_Invoice_Entry.save()

                            gl_batch.batch_amount += float(math.fabs(gl_exchange.functional_amount))
                            gl_batch.save()

                        except Exception as e:
                            print('Journal-ID ' + str(journal_item.id))
                            print(e)
                            print("Revaluation account couldn't be retrieved!!")
                            logging.error(traceback.format_exc())
                            transactionlib.set_rollback(True)
                            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

            gl_batch.batch_amount = math.fabs(gl_batch.batch_amount)
            gl_batch.save()

    except Exception as e:
        print(e)
        logging.error(traceback.format_exc())

    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))


@login_required
def journal_AP_delete(request, journal_id):
    try:
        with transactionlib.atomic():
            company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
            order_list = Journal.objects.get(pk=int(journal_id))
            batch_id = order_list.batch_id
            batch = Batch.objects.get(id=batch_id)
            delete = True

            user_journal_ids = Transaction.objects.filter(related_invoice_id=journal_id
                ).exclude(journal_id__isnull=True).exclude(journal__reverse_reconciliation=True
                ).exclude(journal__journal_type=dict(TRANSACTION_TYPES)['GL']
                ).exclude(is_hidden=True
                ).exclude(journal__is_hidden=True)
            if user_journal_ids.exists():
                delete = False
                msg = ''
                for trans in user_journal_ids:
                    msg += trans.journal.document_number + ', '
                messages.error(request, "Entry cannot be be deleted. Because these " + msg + "docs are using it")
                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

            if order_list and delete:
                jou_array = []

                order_list.is_hidden = 1
                order_list.update_date = datetime.datetime.now()
                order_list.update_by = request.user.id
                order_list.save()

                transactions = Transaction.objects.filter(company_id=company_id, is_hidden=0, journal_id=journal_id)
                for trans in transactions:
                    trans.is_hidden = True
                    trans.update_date = datetime.datetime.now()
                    trans.update_by = request.user.id
                    trans.save()
                    try:
                        if trans.related_invoice:
                            journal_id_related = Journal.objects.get(pk=trans.related_invoice_id)
                            journal_id_related.is_fully_paid = False
                            journal_id_related.save()
                    except:
                        pass

                order_list2 = Journal.objects.filter(is_hidden=0, company_id=company_id, batch_id=batch_id)
                for ls in order_list2:
                    list_obj = {}
                    if ls.document_type == DOCUMENT_TYPE_DICT['Credit Note']:
                        list_obj['total_amount'] = str(-1 * float(ls.total_amount))
                    else:
                        list_obj['total_amount'] = str(ls.total_amount)
                    list_obj['id'] = ls.id
                    list_obj['document_type'] = ls.document_type
                    jou_array.append(list_obj)
                amo_new = 0
                for amo in jou_array:
                    amo_new += float(amo['total_amount'])
                new_total_amount = round_number(amo_new, 6)
                batch.no_entries -= 1
                batch.batch_amount = new_total_amount
                batch.save()

                return redirect('/accounting/list/2/' + str(batch.id) + '/')

    except Exception as e:
        print(e)
        logging.error(traceback.format_exc())

    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))


@login_required
def payment_codes_list(request, source_type):
    try:
        payment_codes_list = PaymentCode.objects.filter(is_hidden=0)
        return render_to_response('payment_codes_list.html',
                                  RequestContext(request, {'payment_codes_list': payment_codes_list,
                                                           'source_type': source_type}))
    except ObjectDoesNotExist:
        messages_error = "Company and Staff information of Current User does not exist." \
                         "\nPlease input Company and Staff of Current User!"
        return render_to_response('404.html', RequestContext(request, {'messages_error': messages_error}))


@login_required
@permission_required('accounting.add_paymentcode', login_url='/alert/')
def payment_code_add(request, source_type):
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    if request.method == 'POST':
        form = PaymentCodeForm(request.POST)
        if form.is_valid():
            try:
                payment_code = form.save(commit=False)
                payment_code.create_date = datetime.datetime.today()
                payment_code.update_date = datetime.datetime.today()
                payment_code.update_by = request.user.id
                payment_code.is_hidden = 0
                payment_code.is_active = 1
                payment_code.company_id = company_id
                payment_code.source_type = source_type
                payment_code.save()
            except OSError as e:
                print(e)
                messages.add_message(request, messages.ERROR, e, extra_tags='payment_code_add')
            return redirect('/accounting/payment_codes_list/' + source_type + '/')
        else:
            form = PaymentCodeForm(request.POST)
    else:
        form = PaymentCodeForm()
    return render(request, 'payment_code_form.html', {'form': form, 'source_type': source_type})


@login_required
@permission_required('accounting.change_paymentcode', login_url='/alert/')
def payment_code_edit(request, payment_code_id=''):
    payment_code = get_object_or_404(PaymentCode, pk=payment_code_id)
    source_type = payment_code.source_type
    if request.method == 'POST':
        form = PaymentCodeForm(request.POST, instance=payment_code)
        if form.is_valid():
            try:
                my_payment_code = form.save(commit=False)
                my_payment_code.id = payment_code_id
                my_payment_code.update_date = datetime.datetime.today()
                my_payment_code.update_by = request.user.id
                my_payment_code.is_hidden = 0
                my_payment_code.save()
                source_type = my_payment_code.source_type
            except OSError as e:
                print(e)
                messages.add_message(request, messages.ERROR, e, extra_tags='payment_code_edit')
            return redirect('/accounting/payment_codes_list/' + source_type + '/')
    payment_code.update_date = payment_code.update_date.strftime("%d-%m-%Y")
    form = PaymentCodeForm(instance=payment_code)
    return render(request, 'payment_code_form.html', {'form': form, 'payment_code': payment_code, 'source_type': source_type})


@login_required
@permission_required('accounting.delete_paymentcode', login_url='/alert/')
def payment_code_delete(request, payment_code_id):
    source_type = 'AP'
    if request.method == 'POST':
        try:
            payment_code = PaymentCode.objects.get(pk=payment_code_id)
            payment_code.is_hidden = True
            payment_code.save()
            source_type = payment_code.source_type
            return redirect('/accounting/payment_codes_list/' + source_type + '/')
        except OSError as e:
            print(e)
            messages.add_message(request, messages.ERROR, e, extra_tags='payment_code_delete')
            return redirect('/accounting/payment_codes_list/' + source_type + '/')


@login_required
def payment_list(request, journal_type):
    return render_to_response('payment_list.html', RequestContext(request, {'journal_type': journal_type}))


@login_required
def general_ledger_list(request, journal_type):
    return render_to_response('GL_list.html', RequestContext(request, {'journal_type': journal_type}))


# Create your views here.
@login_required
def PaymentList__asJson(request, journal_type):
    draw = request.GET['draw']
    start = request.GET['start']
    length = request.GET['length']
    search = request.GET['search[value]']
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    order_list = Journal.objects.filter(is_hidden=0, company_id=company_id, journal_type=int(journal_type))
    records_total = order_list.count()

    if search:  # Filter data base on search
        order_list = order_list.filter(Q(update_date__icontains=search) | Q(payment_code__code__icontains=search) | Q(
            document_number__icontains=search) | Q(customer__name__icontains=search) | Q(
            supplier__name__icontains=search) | Q(code__icontains=search) | Q(payment_amount__icontains=search))

    # All data
    records_filtered = order_list.count()

    # Order by list_limit base on order_dir and order_column

    order_column = request.GET['order[0][column]']
    column_name = ""
    if order_column == "0":
        column_name = "update_date"
    elif order_column == "1":
        column_name = "id"
    elif order_column == "2":
        column_name = "code"
    elif order_column == "3":
        column_name = "document_number"
    elif order_column == "4":
        column_name = "payment_code__code"
    elif order_column == "5":
        column_name = "customer__name" if journal_type == dict(TRANSACTION_TYPES)['AR Receipt'] else "supplier__name"
    elif order_column == "6":
        column_name = "payment_amount"
    elif order_column == "7":
        column_name = "status"
    order_dir = request.GET['order[0][dir]']

    list = []
    if order_dir == "asc":
        list = order_list.order_by(column_name, '-id')[int(start):(int(start) + int(length))]
    elif order_dir == "desc":
        list = order_list.order_by('-' + column_name, '-id')[int(start):(int(start) + int(length))]

    # Create data list
    array = []
    for field in list:
        data = {}
        data["id"] = str(field.id)
        data["update_date"] = field.update_date.strftime("%d-%m-%Y")
        data["code"] = field.code
        data["document_number"] = field.document_number
        data["payment_code"] = field.payment_code.code if field.payment_code else ''
        data["cust_supp_name"] = ""
        if int(journal_type) == dict(TRANSACTION_TYPES)['AR Receipt']:
            if field.customer:
                data["cust_supp_name"] = field.customer.name
        else:
            if field.supplier:
                data["cust_supp_name"] = field.supplier.name
        data["payment_amount"] = str(
            field.payment_amount) + ' ' + field.payment_currency.code if field.payment_currency else ''
        data["status"] = str(field.status)
        data["journal_type"] = str(field.journal_type)
        array.append(data)

    content = {"draw": draw, "data": array, "recordsTotal": records_total, "recordsFiltered": records_filtered}
    json_content = json.dumps(content, ensure_ascii=False)
    return HttpResponse(json_content, content_type='application/json')


@login_required
def SupplierList__asJson(request):
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    draw = request.GET['draw']
    start = request.GET['start']
    length = request.GET['length']
    search = request.GET['search[value]']
    list_filter = Supplier.objects.filter(is_hidden=0, company_id=company_id, is_active=1)

    records_total = list_filter.count()

    if search:  # Filter data base on search
        list_filter = list_filter.filter(
            Q(code__icontains=search) | Q(name__icontains=search) | Q(term_days=search) | Q(
                credit_limit__icontains=search) | Q(payment_mode__name__icontains=search))

    # All data
    records_filtered = list_filter.count()

    # Order by list_limit base on order_dir and order_column
    order_column = request.GET['order[0][column]']
    column_name = ""
    if order_column == "0":
        column_name = "code"
    elif order_column == "1":
        column_name = "name"
    elif order_column == "2":
        column_name = "term_days"
    elif order_column == "3":
        column_name = "payment_mode__name"
    elif order_column == "4":
        column_name = "credit_limit"
    order_dir = request.GET['order[0][dir]']

    list = []
    if order_dir == "asc":
        list = list_filter.order_by(column_name)[int(start):(int(start) + int(length))]
    elif order_dir == "desc":
        list = list_filter.order_by('-' + column_name)[int(start):(int(start) + int(length))]

    # Create data list
    array = []
    for field in list:
        data = {}
        data["id"] = field.id
        data["code"] = field.code if field.code else ''
        data["name"] = field.name if field.name else ''
        data["term_days"] = str(field.term_days if field.term_days else '')
        data["payment_mode"] = str(field.payment_mode.name if field.payment_mode and field.payment_mode.name else '')
        data["credit_limit"] = str(field.credit_limit if field.credit_limit else '0')
        try:
            data["tax_id"] = str(field.tax_id if field.tax else '')
        except:
            data["tax_id"] = ''
        data["currency_id"] = str(field.currency_id if field.currency else '')
        data["currency_code"] = field.currency.code if field.currency else ''
        array.append(data)
    content = {"draw": draw, "data": array, "recordsTotal": records_total, "recordsFiltered": records_filtered}
    json_content = json.dumps(content, ensure_ascii=False)
    return HttpResponse(json_content, content_type='application/json')


@login_required
def CustomerList__asJson(request):
    draw = request.GET['draw']
    start = request.GET['start']
    length = request.GET['length']
    search = request.GET['search[value]']
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    list_filter = Customer.objects.filter(is_hidden=0, company_id=company_id, is_active=1)

    records_total = list_filter.count()

    if search:  # Filter data base on search
        list_filter = list_filter.filter(
            Q(code__icontains=search) | Q(name__icontains=search) | Q(payment_term__icontains=search) | Q(
                credit_limit__icontains=search) | Q(payment_mode__name__icontains=search))

    # All data
    records_filtered = list_filter.count()

    # Order by list_limit base on order_dir and order_column
    order_column = request.GET['order[0][column]']
    column_name = ""
    if order_column == "0":
        column_name = "code"
    elif order_column == "1":
        column_name = "name"
    elif order_column == "2":
        column_name = "payment_term"
    elif order_column == "3":
        column_name = "payment_mode__name"
    elif order_column == "4":
        column_name = "credit_limit"
    order_dir = request.GET['order[0][dir]']

    list = []
    if order_dir == "asc":
        list = list_filter.order_by(column_name)[int(start):(int(start) + int(length))]
    elif order_dir == "desc":
        list = list_filter.order_by('-' + column_name)[int(start):(int(start) + int(length))]

    # Create data list
    array = []
    for field in list:
        data = {}
        data["id"] = field.id
        data["code"] = field.code if field.code else ''
        data["name"] = field.name if field.name else ''
        data["payment_term"] = str(field.payment_term if field.payment_term else '')
        data["payment_mode"] = str(field.payment_mode.name if field.payment_mode and field.payment_mode.name else '')
        data["credit_limit"] = str(field.credit_limit if field.credit_limit else '0')
        try:
            data["tax_id"] = field.tax_id if field.tax else None
        except:
            data["tax_id"] = None
        data["currency_id"] = field.currency_id if field.currency else None
        data["currency_code"] = field.currency.code if field.currency else None
        data["account_set_id"] = field.account_set_id if field.account_set else None
        array.append(data)
    content = {"draw": draw, "data": array, "recordsTotal": records_total, "recordsFiltered": records_filtered}
    json_content = json.dumps(content, ensure_ascii=False)
    return HttpResponse(json_content, content_type='application/json')


@login_required
def TransactionList_AR_asJson(request, journal_id):
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    draw = request.GET['draw']
    start = request.GET['start']
    length = request.GET['length']
    list_filter = Transaction.objects.filter(is_hidden=0, company_id=company_id, journal_id=journal_id)

    records_total = list_filter.count()

    # All data
    records_filtered = list_filter.count()

    # Order by list_limit base on order_dir and order_column
    order_column = request.GET['order[0][column]']
    column_name = ""
    if order_column == "0":
        column_name = "account__code"
    elif order_column == "1":
        column_name = "account__name"
    elif order_column == "2":
        column_name = "type"
    elif order_column == "3":
        column_name = "amount"
    elif order_column == "4":
        column_name = "tax_amount"
    elif order_column == "5":
        column_name = "total_amount"
    order_dir = request.GET['order[0][dir]']

    list = []
    if order_dir == "asc":
        list = list_filter.order_by(column_name)[int(start):(int(start) + int(length))]
    elif order_dir == "desc":
        list = list_filter.order_by('-' + column_name)[int(start):(int(start) + int(length))]

    # Create data list
    array = []
    for field in list:
        data = {}
        data["id"] = field.id
        data["code"] = field.account.code
        data["name"] = field.account.name
        data["type"] = field.type
        data["amount"] = str(field.amount)
        data["tax_amount"] = str(field.tax_amount)
        data["total_amount"] = str(field.total_amount)
        array.append(data)
    content = {"draw": draw, "data": array, "recordsTotal": records_total, "recordsFiltered": records_filtered}
    json_content = json.dumps(content, ensure_ascii=False)
    return HttpResponse(json_content, content_type='application/json')


@login_required
def SupplierDocumentsList_as_json(request):
    if request.is_ajax():
        try:
            company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
            draw = request.GET['draw']
            start = request.GET['start']
            length = request.GET['length']
            search = request.GET['search[value]']
            do_orders = Order.objects.filter(is_hidden=0, company_id=company_id,
                                             order_type=dict(ORDER_TYPE)['PURCHASE INVOICE'],
                                             supplier_id=request.GET['supplier_id'],
                                             status__in=(dict(ORDER_STATUS)['Sent'], dict(ORDER_STATUS)['Partial']))
            if do_orders:
                records_total = do_orders.count()

                # Order by list_limit base on order_dir and order_column
                order_column = request.GET['order[0][column]']

                if search:  # Filter data base on search
                    do_orders = do_orders.filter(
                        Q(document_number__icontains=search) | Q(reference_number__icontains=search) | Q(supplier__name__icontains=search))

                # All data
                records_filtered = do_orders.count()
                column_name = ""
                if order_column == "0":
                    column_name = "document_number"
                elif order_column == "1":
                    column_name = "invoice_date"
                elif order_column == "2":
                    column_name = "reference_number"
                elif order_column == "3":
                    column_name = "total"
                elif order_column == "4":
                    column_name = "supplier__name"
                order_dir = request.GET['order[0][dir]']

                list = []
                if order_dir == "asc":
                    list = do_orders.order_by(column_name)[int(start):(int(start) + int(length))]
                elif order_dir == "desc":
                    list = do_orders.order_by('-' + column_name)[int(start):(int(start) + int(length))]

                # Create data list
                array = []
                for field in list:
                    data = {}
                    data["id"] = field.id if field.id else ''
                    data["code"] = str(field.document_number) if field.document_number else ''
                    data["date"] = str(field.invoice_date) if field.invoice_date else ''
                    data["reference"] = str(field.reference_number) if field.reference_number else ''
                    data["amount"] = str(field.total) if field.total else ''
                    data["supplier_name"] = str(field.supplier.name) if field.supplier and field.supplier.name else ''
                    array.append(data)

                content = {"draw": draw, "data": array, "recordsTotal": records_total,
                           "recordsFiltered": records_filtered}
                json_content = json.dumps(content, ensure_ascii=False)
                return HttpResponse(json_content, content_type='application/json')
            else:
                content = {"draw": 1, "data": [], "recordsTotal": 0, "recordsFiltered": 0}
                json_content = json.dumps(content, ensure_ascii=False)
                return HttpResponse(json_content, content_type='application/json')
        except Exception as e:
            print(e)
            logger.error(traceback.format_exc())
    return HttpResponse(json.dumps({"nothing to see": "this isn't happening"}), content_type="application/json")


@login_required
def CustomerDocumentsList_as_json(request):
    if request.is_ajax():
        try:
            company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
            draw = request.GET['draw']
            start = request.GET['start']
            length = request.GET['length']
            search = request.GET['search[value]']
            do_orders = Order.objects.filter(is_hidden=0, company_id=company_id,
                                             order_type=dict(ORDER_TYPE)['SALES INVOICE'],
                                             customer_id=request.GET['customer_id'],
                                             status__in=(dict(ORDER_STATUS)['Sent'], dict(ORDER_STATUS)['Partial']))
            if do_orders:
                records_total = do_orders.count()

                # Order by list_limit base on order_dir and order_column
                order_column = request.GET['order[0][column]']

                if search:  # Filter data base on search
                    do_orders = do_orders.filter(
                        Q(document_number__icontains=search) | Q(reference_number__icontains=search) | Q(customer__name__icontains=search))

                # All data
                records_filtered = do_orders.count()
                column_name = ""
                if order_column == "0":
                    column_name = "document_number"
                elif order_column == "1":
                    column_name = "invoice_date"
                elif order_column == "2":
                    column_name = "reference_number"
                elif order_column == "3":
                    column_name = "total"
                elif order_column == "4":
                    column_name = "customer__name"
                order_dir = request.GET['order[0][dir]']

                list = []
                if order_dir == "asc":
                    list = do_orders.order_by(column_name)[int(start):(int(start) + int(length))]
                elif order_dir == "desc":
                    list = do_orders.order_by('-' + column_name)[int(start):(int(start) + int(length))]

                # Create data list
                array = []
                for field in list:
                    data = {}
                    data["id"] = field.id if field.id else ''
                    data["code"] = str(field.document_number) if field.document_number else ''
                    data["date"] = str(field.invoice_date) if field.invoice_date else ''
                    data["reference"] = str(field.reference_number) if field.reference_number else ''
                    data["amount"] = str(field.total) if field.total else ''
                    data["customer_name"] = str(field.customer.name) if field.customer and field.customer.name else ''
                    array.append(data)

                content = {"draw": draw, "data": array, "recordsTotal": records_total,
                           "recordsFiltered": records_filtered}
                json_content = json.dumps(content, ensure_ascii=False)
                return HttpResponse(json_content, content_type='application/json')
            else:
                content = {"draw": 1, "data": [], "recordsTotal": 0, "recordsFiltered": 0}
                json_content = json.dumps(content, ensure_ascii=False)
                return HttpResponse(json_content, content_type='application/json')
        except Exception as e:
            print(e)
            logger.error(traceback.format_exc())
    return HttpResponse(json.dumps({"nothing to see": "this isn't happening"}), content_type="application/json")


@login_required
def ApllyDocumentsList_as_json(request):
    if request.is_ajax():
        try:
            company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
            draw = request.GET['draw']
            start = request.GET['start']
            length = request.GET['length']
            search = request.GET['search[value]']
            document_type_dict = dict(DOCUMENT_TYPES)
            doc_type = int(request.GET['balance_type'])
            journal_type = int(request.GET['journal_type'])
            customer_id = request.GET['customer_id']
            customer = None

            if journal_type == dict(TRANSACTION_TYPES)['AR Invoice']:
                customer = Customer.objects.get(pk=customer_id)
                doc_all = Journal.objects.filter(is_hidden=0, company_id=company_id,
                                                 customer_id=customer_id,
                                                 journal_type=dict(TRANSACTION_TYPES)['AR Invoice'],
                                                 batch__status=int(STATUS_TYPE_DICT['Posted']),
                                                 document_date__lte=request.session['session_date'],
                                                 document_type__gt=int(DOCUMENT_TYPE_DICT['Undefined']))

                if doc_type == int(DOCUMENT_TYPE_DICT['Debit Note']):
                    doc_list = doc_all.exclude(source_type='AR-GL')
                elif doc_type == int(DOCUMENT_TYPE_DICT['Credit Note']):
                    doc_list = doc_all.exclude(is_fully_paid=True).exclude(
                        fully_paid_date__isnull=False).exclude(source_type='AR-GL')

            else:
                customer = Supplier.objects.get(pk=customer_id)
                doc_all = Journal.objects.filter(is_hidden=0, company_id=company_id,
                                                 supplier_id=customer_id,
                                                 journal_type=dict(TRANSACTION_TYPES)['AP Invoice'],
                                                 batch__status=int(STATUS_TYPE_DICT['Posted']),
                                                 document_date__lte=request.session['session_date'],
                                                 document_type__gt=int(DOCUMENT_TYPE_DICT['Undefined']))

                if doc_type == int(DOCUMENT_TYPE_DICT['Debit Note']):
                    doc_list = doc_all.exclude(source_type='AP-GL')
                elif doc_type == int(DOCUMENT_TYPE_DICT['Credit Note']):
                    doc_list = doc_all.exclude(is_fully_paid=True).exclude(
                        fully_paid_date__isnull=False).exclude(source_type='AP-GL')

            if doc_list:
                records_total = doc_list.count()

                # Order by list_limit base on order_dir and order_column
                order_column = request.GET['order[0][column]']

                if search:  # Filter data base on search
                    doc_list = doc_list.filter(
                        Q(document_number__icontains=search) |
                        Q(document_date__icontains=search) |
                        Q(outstanding_amount__icontains=search) |
                        Q(is_fully_paid=search))

                # All data
                records_filtered = doc_list.count()
                column_name = ""
                if order_column == "0":
                    column_name = "document_number"
                elif order_column == "1":
                    column_name = "document_date"
                elif order_column == "2":
                    column_name = "document_type"
                elif order_column == "3":
                    column_name = "name"
                elif order_column == "4":
                    column_name = "customer__payment_term"
                elif order_column == "5":
                    column_name = "outstanding_amount"
                elif order_column == "6":
                    column_name = "is_fully_paid"
                order_dir = request.GET['order[0][dir]']
                list = []
                if order_dir == "asc":
                    list = doc_list.order_by(column_name)[int(start):(int(start) + int(length))]
                elif order_dir == "desc":
                    list = doc_list.order_by('-' + column_name)[int(start):(int(start) + int(length))]

                # Create data list
                array = []
                for field in list:
                    cut_date = request.session['session_date'].strftime(("%Y-%m-%d"))
                    outstanding_amount = field.has_outstanding(cut_date)[1]
                    if outstanding_amount == 0 and field.fully_paid_date == None:
                        field.is_fully_paid = True
                        field.fully_paid_date = request.session['session_date']
                        field.save()
                        # if doc_type == int(DOCUMENT_TYPE_DICT['Credit Note']):
                        #     continue
                    if field.fully_paid_date == None:
                        field.is_fully_paid = False
                        field.save()
                    elif field.fully_paid_date != None:
                        outstanding_amount = 0
                    
                    data = {}
                    data["id"] = field.id if field.id else ''
                    data["code"] = str(field.document_number) if field.document_number else ''
                    data["date"] = str(field.document_date) if field.document_date else ''
                    data["desc"] = str(field.name) if field.name else ''
                    data["document_type"] = document_type_dict.get(str(field.document_type))
                    data["payment_term"] = str(field.customer.payment_term) if field.customer else str(
                        field.supplier.term_days)
                    # if field.discount_amount:
                    #     data["outstanding_amount"] = "{:.2f}".format(field.outstanding_amount - field.discount_amount)
                    # else:
                    #     data["outstanding_amount"] = "{:.2f}".format(
                    #         field.outstanding_amount)
                    data["outstanding_amount"] = intcomma("%.2f" % round_number(outstanding_amount))
                    if customer and customer.currency and not customer.currency.is_decimal:
                        data["outstanding_amount"] = intcomma("%.0f" % round_number(outstanding_amount))
                    data["is_fully_paid"] = str(True) if outstanding_amount == 0 else str(field.is_fully_paid)
                    data["fully_paid_date"] = field.fully_paid_date.strftime('%d-%m-%Y') if field.fully_paid_date else ''
                    data["exch_rate"] = str(field.exchange_rate) if field.exchange_rate else ''
                    data["exch_rate_fk"] = str(field.exchange_rate_fk_id) if field.exchange_rate_fk_id else ''
                    array.append(data)

                content = {"draw": draw, "data": array, "recordsTotal": records_total,
                           "recordsFiltered": records_filtered}
                json_content = json.dumps(content, ensure_ascii=False)
                return HttpResponse(json_content, content_type='application/json')
            else:
                content = {"draw": 1, "data": [], "recordsTotal": 0, "recordsFiltered": 0}
                json_content = json.dumps(content, ensure_ascii=False)
                return HttpResponse(json_content, content_type='application/json')
        except Exception as e:
            print(e)
            logger.error(traceback.format_exc())
    return HttpResponse(json.dumps({"nothing to see": "this isn't happening"}), content_type="application/json")


@login_required
def PaymentDocumentsList_as_json(request):
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    if request.is_ajax():
        try:
            draw = request.GET['draw']
            start = request.GET['start']
            length = request.GET['length']
            search = request.GET['search[value]']
            supplier = None

            if 'supplier_id' in request.GET and request.GET['supplier_id']:
                supplier_id = request.GET['supplier_id']
                supplier = Supplier.objects.get(pk=supplier_id)
                invoice_list = Journal.objects.select_related('supplier').filter(
                    is_hidden=False, supplier_id=supplier_id, company_id=company_id,
                    status=int(STATUS_TYPE_DICT['Posted']),
                    document_date__lte=request.session['session_date'],
                    journal_type=dict(TRANSACTION_TYPES)['AP Invoice']).exclude(
                        reverse_reconciliation=True).exclude(fully_paid_date__isnull=False).order_by('document_date')

                # apply_dict = {}
                # for journal in invoice_list:
                #     # if journal.journal_type == dict(TRANSACTION_TYPES)['AP Invoice']:
                #     related_trx = Transaction.objects.filter(is_hidden=0, company_id=company_id,
                #                                              journal__is_hidden=0, related_invoice=journal,
                #                                              journal__journal_type=journal.journal_type,
                #                                              journal__status=int(STATUS_TYPE_DICT['Posted'])
                #                                              ).select_related('journal')
                #     last_id = 0
                #     skip_list = []
                #     for trx in related_trx:
                #         if trx.journal_id != last_id:
                #             last_id = trx.journal_id
                #             skip_list.append(trx.journal_id)
                #             if trx.journal.document_type == DOCUMENT_TYPE_DICT['Debit Note']:
                #                 if str(journal.id) in apply_dict:
                #                     temp = apply_dict[str(journal.id)] + trx.journal.document_amount
                #                     apply_dict.update({str(journal.id): temp})
                #                 else:
                #                     apply_dict.update({str(journal.id): trx.journal.document_amount})
                #             elif trx.journal.document_type == DOCUMENT_TYPE_DICT['Credit Note']:
                #                 if str(journal.id) in apply_dict:
                #                     temp = apply_dict[str(journal.id)] - trx.journal.document_amount
                #                     apply_dict.update({str(journal.id): temp})
                #                 else:
                #                     apply_dict.update({str(journal.id): (-1) * trx.journal.document_amount})
                #         else:
                #             continue
                #     if len(skip_list):
                #         invoice_list = invoice_list.exclude(id__in=skip_list)

                if invoice_list:
                    if 'exclude_transaction_list' in request.GET:
                        exclude_transaction_list = request.GET['exclude_transaction_list']
                        exclude_transaction_list = json.loads(exclude_transaction_list)
                        invoice_list = invoice_list.exclude(id__in=exclude_transaction_list)

                    records_total = invoice_list.count()

                    # Order by list_limit base on order_dir and order_column
                    order_column = request.GET['order[0][column]']

                    if search:
                        invoice_list = invoice_list.filter(Q(document_number__icontains=search))

                    records_filtered = invoice_list.count()
                    column_name = ""
                    if order_column == "0":
                        column_name = "document_number"
                    elif order_column == "1":
                        column_name = "document_type"
                    elif order_column == "2":
                        column_name = "document_date"
                    elif order_column == "3":
                        column_name = "document_amount"
                    elif order_column == "4":
                        column_name = "payment_number"
                    elif order_column == "5":
                        column_name = "paid_amount"
                    elif order_column == "6":
                        column_name = "outstanding_amount"
                    elif order_column == "7":
                        column_name = "due_date"

                    order_dir = request.GET['order[0][dir]']
                    list = []
                    if order_dir == "asc":
                        list = invoice_list.order_by(column_name)
                    elif order_dir == "desc":
                        list = invoice_list.order_by('-' + column_name)
                        # list = invoice_list.order_by('-' + column_name)[int(start):(int(start) + int(length))]

                    document_types_dict = dict(DOCUMENT_TYPES)

                    array = []
                    totalU = 0
                    for field in list:
                        # if str(field.id) in apply_dict:
                        #     if field.document_type == DOCUMENT_TYPE_DICT['Credit Note']:
                        #         field.document_amount += (-1) * apply_dict[str(field.id)]
                        #     else:
                        #         field.document_amount += apply_dict[str(field.id)]
                        # received_trx = Transaction.objects.filter(related_invoice_id=field.id, journal__is_hidden=0, is_hidden=0,
                        #                                           journal__journal_type=dict(TRANSACTION_TYPES)['AP Payment']) \
                        #     .exclude(journal_id__isnull=True)\
                        #     .select_related('journal')
                        # paid_amount = 0
                        # for trx in received_trx:
                        #     paid_amount += trx.total_amount
                        # # outstanding_amount = field.document_amount - paid_amount + field.adjustment_amount - field.discount_amount
                        # field.real_outstanding = field.document_amount - paid_amount + \
                        #     field.adjustment_amount - field.discount_amount
                        # # field.save()
                        # if field.real_outstanding and field.real_outstanding != 0:
                        #     if field.real_outstanding < 0:
                        #         if int(field.document_type) == int(DOCUMENT_TYPE_DICT['Credit Note']):
                        #             outstanding_amount = math.fabs(field.real_outstanding)
                        #         else:
                        #             outstanding_amount = 0
                        #     else:
                        #         outstanding_amount = field.real_outstanding
                        # elif field.real_outstanding == 0 and paid_amount == field.document_amount:
                        #     outstanding_amount = 0
                        # else:
                        #     cut_date = request.session['session_date'].strftime(("%Y-%m-%d"))
                        #     outstanding_amount = field.has_outstanding(cut_date)[1]
                        # if field.document_date.year <= 2019:
                        #     cut_date = request.session['session_date'].strftime(("%Y-%m-%d"))
                        #     last_payment = Transaction.objects.filter(related_invoice_id=field.id,
                        #             journal__document_date__lte=cut_date, journal__status=int(STATUS_TYPE_DICT['Posted'])
                        #         ).exclude(journal_id__isnull=True).exclude(journal__reverse_reconciliation=True
                        #         ).exclude(journal__journal_type=dict(TRANSACTION_TYPES)['GL']
                        #         ).exclude(journal__journal_type=dict(TRANSACTION_TYPES)['AD']
                        #         ).exclude(is_hidden=True
                        #         ).exclude(related_journal_outstanding__gt=0
                        #         ).exclude(related_journal_outstanding__lt=0
                        #         ).order_by('-transaction_date', '-id')
                        #     if last_payment.exists():
                        #         last = last_payment.first()
                        #         outstanding_amount = last.related_journal_outstanding
                        #     else:
                        #         outstanding_amount = field.has_outstanding(cut_date)[1]

                        paid_amount = field.paid_amount
                        outstanding_amount = field.real_outstanding
                        
                        if field.document_type == DOCUMENT_TYPE_DICT['Credit Note']:
                            totalU -= outstanding_amount
                            outstanding_amount = math.fabs(outstanding_amount)
                        else:
                            totalU += outstanding_amount
                        if outstanding_amount != 0:
                            data = {}
                            data["document_number"] = field.document_number if field.document_number else ''
                            data["document_type"] = document_types_dict.get(
                                field.document_type) if field.document_type else ''
                            data["document_date"] = str(field.document_date) if field.document_date else ''
                            data["payment_number"] = str(field.payment_number) if field.payment_number else '0'
                            data["document_amount"] = str(round_number(field.document_amount, 2)) if field.document_amount else '0.00'
                            data["paid_amount"] = str(round_number(paid_amount, 2)) if paid_amount else '0.00'
                            data['out_amount'] = str(round_number(outstanding_amount, 2)) if outstanding_amount else '0.00'
                            if supplier and supplier.currency and not supplier.currency.is_decimal:
                                data["document_amount"] = str(round_number(field.document_amount, 0)) if field.document_amount else '0'
                                data["paid_amount"] = str(round_number(paid_amount, 0)) if paid_amount else '0'
                                data['out_amount'] = str(round_number(outstanding_amount, 0)) if outstanding_amount else '0'
                            data['due_date'] = str(field.due_date) if field.due_date else ''
                            data['invoice_id'] = field.id
                            array.append(data)
                        else:
                            records_total -= 1
                            records_filtered -= 1

                    content = {"draw": draw, "data": array, "recordsTotal": records_total,
                               "recordsFiltered": records_filtered}
                    json_content = json.dumps(content, ensure_ascii=False)
                    print('totalU', totalU)
                    return HttpResponse(json_content, content_type='application/json')
                else:
                    content = {"draw": 1, "data": [], "recordsTotal": 0, "recordsFiltered": 0}
                    json_content = json.dumps(content, ensure_ascii=False)
                    return HttpResponse(json_content, content_type='application/json')
        except Exception as e:
            print(e)
            logger.error(traceback.format_exc())
    return HttpResponseNotFound


@login_required
def APAccountList__asJson(request):
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    try:
        draw = request.GET['draw']
        start = request.GET['start']
        length = request.GET['length']
        search = request.GET['search[value]']

        balance_type_dict = dict(BALANCE_TYPE)
        account_type_dict = dict(ACCOUNT_TYPE)

        list_filter = Account.objects.filter(is_hidden=0, is_active=True, company_id=company_id).order_by('account_segment', 'code')

        records_total = list_filter.count()

        if search:
            list_filter = list_filter.filter(
                Q(name__icontains=search) | Q(code__icontains=search) | Q(type__name__icontains=search) | Q(
                    company__name__icontains=search) | Q(update_date__icontains=search))

        # All data
        records_filtered = list_filter.count()

        # Order by list_limit base on order_dir and order_column
        order_column = request.GET['order[0][column]']
        column_name = ""
        if order_column == "0":
            column_name = "name"
        elif order_column == "1":
            column_name = "code"
        elif order_column == "2":
            column_name = "account_type"
        elif order_column == "3":
            column_name = "balance_type"
        elif order_column == "4":
            column_name = "account_group"
        order_dir = request.GET['order[0][dir]']

        list = []
        if order_dir == "asc":
            list = list_filter.order_by(column_name)[int(start):(int(start) + int(length))]
        elif order_dir == "desc":
            list = list_filter.order_by('-' + column_name)[int(start):(int(start) + int(length))]

        # Create data list
        array = []
        for field in list:
            data = {}
            data["id"] = field.id
            data["update_date"] = field.update_date.strftime("%d-%m-%Y")
            data["name"] = field.name
            data["code"] = field.code
            data["account_type"] = account_type_dict.get(field.account_type)
            data["balance_type"] = balance_type_dict.get(field.balance_type)
            if field.balance_type == BALANCE_TYPE_DICT['Debit']:
                data["amount"] = simplejson.dumps(field.debit_amount)
            else:
                data["amount"] = simplejson.dumps(field.credit_amount)
            data["account_group"] = field.account_group.name
            data["Company_name"] = field.company.name
            data["is_active"] = str(field.is_active)
            data["is_editable"] = str(field.is_editable)
            array.append(data)

        content = {"draw": draw, "data": array, "recordsTotal": records_total, "recordsFiltered": records_filtered}

        json_content = json.dumps(content, ensure_ascii=False)
        return HttpResponse(json_content, content_type='application/json')
    except Exception as e:
        print(e)
        logger.error(traceback.format_exc())


@login_required
def search_supplier_customer(request):
    if request.method == 'POST':
        try:
            company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
            if 'supplier_code' in request.POST:
                supplier_code = request.POST['supplier_code']
                supplier = Supplier.objects.filter(is_hidden=0, company_id=company_id, is_active=1,
                                                   code=supplier_code).first()
                currency = Currency.objects.get(id=supplier.currency_id)
                context = {'supplier_id': supplier.id, 'supplier_code': supplier.code, 'supplier_name': supplier.name,
                           'tax_id': supplier.tax_id, 'currency_id': supplier.currency_id,
                           'currency_code': currency.code, }
                return HttpResponse(json.dumps(context), content_type="application/json")
            elif 'customer_code' in request.POST:
                customer_code = request.POST['customer_code']
                customer = Customer.objects.filter(is_hidden=0, company_id=company_id, is_active=1,
                                                   code=customer_code).first()
                currency = Currency.objects.get(id=customer.currency_id)
                context = {'customer_id': customer.id, 'customer_code': customer.code, 'customer_name': customer.name,
                           'tax_id': customer.tax_id, 'currency_id': customer.currency_id,
                           'currency_code': currency.code, }
                return HttpResponse(json.dumps(context), content_type="application/json")
        except (Supplier.DoesNotExist, Customer.DoesNotExist):
            return HttpResponseNotFound
    else:
        return HttpResponse(json.dumps({"nothing to see": "this isn't happening"}), content_type="application/json")


@login_required
def search_accountset(request):
    if request.method == 'POST':
        try:
            company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
            account_code = request.POST['account_code']
            account = Account.objects.get(is_hidden=False, is_active=True, code=account_code, company_id=company_id)
            context = {'account_code': account.code, 'account_set_id': account.id, }
            return HttpResponse(json.dumps(context), content_type="application/json")
        except Account.DoesNotExist:
            return HttpResponseNotFound
    else:
        return HttpResponse(json.dumps({"nothing to see": "this isn't happening"}), content_type="application/json")


@login_required
def search_document(request):
    if request.method == 'POST':
        company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
        try:
            if 'supplier_id' in request.POST:
                document_number = request.POST['document_number']
                supplier_id = request.POST['supplier_id']
                document = Order.objects.get(is_hidden=0, company_id=company_id,
                                             order_type=dict(ORDER_TYPE)['PURCHASE INVOICE'],
                                             document_number=document_number, supplier_id=supplier_id)
                context = {'document_number': document.document_number,
                           'document_amount': str(document.total) if document.total else '', }
                return HttpResponse(json.dumps(context), content_type="application/json")
            elif 'customer_id' in request.POST:
                document_number = request.POST['document_number']
                customer_id = request.POST['customer_id']
                document = Order.objects.get(is_hidden=0, company_id=company_id,
                                             order_type=dict(ORDER_TYPE)['SALES INVOICE'],
                                             document_number=document_number, customer_id=customer_id)
                context = {'document_number': document.document_number,
                           'document_amount': str(document.total) if document.total else '', }
                return HttpResponse(json.dumps(context), content_type="application/json")
        except Order.DoesNotExist:
            return HttpResponseNotFound
    else:
        return HttpResponse(json.dumps({"nothing to see": "this isn't happening"}), content_type="application/json")


@csrf_exempt
@login_required
def load_currency(request):
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    company = Company.objects.get(pk=company_id)
    if request.method == 'POST':
        try:
            if 'bank_id' in request.POST and request.POST['bank_id']:
                bank_id = request.POST['bank_id']
                bank = Bank.objects.get(pk=bank_id)
                context = {}
                context['name'] = bank.name
                if bank.currency_id:
                    context['currency_id'] = bank.currency_id
                    context['currency_code'] = bank.currency.code
                else:
                    context['currency_id'] = None
                    context['currency_code'] = None
                if bank.account_number:
                    context['account_number'] = bank.account_number
                else:
                    context['account_number'] = None
                return HttpResponse(json.dumps(context), content_type="application/json")
            else:
                if 'account_id' in request.POST and request.POST['account_id']:
                    account_id = request.POST['account_id']
                    context = []
                    account = Account.objects.get(pk=account_id)
                    if account.is_multicurrency:
                        if account.is_specific_currency:
                            account_currency = AccountCurrency.objects.filter(account_id=account_id, is_hidden=0)
                            if account_currency:
                                for accountc in account_currency:
                                    data = {}
                                    data['func_currency_id'] = company.currency_id
                                    data['currency_id'] = accountc.currency_id
                                    data['currency_name'] = accountc.currency.name
                                    data['currency_code'] = accountc.currency.code
                                    data['is_decimal'] = accountc.currency.is_decimal
                                    data['default'] = accountc.account.default_currency_id
                                    context.append(data)
                            else:
                                data = {}
                                data['func_currency_id'] = company.currency_id
                                data['currency_id'] = company.currency_id
                                data['currency_name'] = company.currency.name
                                data['currency_code'] = company.currency.code
                                data['is_decimal'] = account.currency.is_decimal
                                data['default'] = account.default_currency_id
                                context.append(data)
                        else:
                            currencies = Currency.objects.filter(is_hidden=0)
                            for currency in currencies:
                                data = {}
                                data['func_currency_id'] = company.currency_id
                                data['currency_id'] = currency.id
                                data['currency_name'] = currency.name
                                data['currency_code'] = currency.code
                                data['is_decimal'] = currency.is_decimal
                                data['default'] = account.default_currency_id
                                context.append(data)
                    else:
                        data = {}
                        data['func_currency_id'] = company.currency_id
                        data['currency_id'] = company.currency_id
                        data['currency_name'] = company.currency.name
                        data['currency_code'] = company.currency.code
                        data['is_decimal'] = company.currency.is_decimal
                        data['default'] = company.currency_id
                        context.append(data)
                    return HttpResponse(json.dumps(context), content_type="application/json")

        except Exception as e:
            print(e)
            logger.error(traceback.format_exc())
            return HttpResponseNotFound
    else:
        return HttpResponseNotFound


# This function's used to get supplier information and related POSTED AP Invoice
# Only show AP Invoice which not yet fully paid
@csrf_exempt
@login_required
def load_supplier(request):
    if request.method == 'POST':
        try:
            if 'supplier_id' in request.POST and request.POST['supplier_id']:
                supplier_id = request.POST['supplier_id']
                supplier = Supplier.objects.get(pk=supplier_id)
                company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
                currency_id = supplier.currency.id if supplier.currency else None
                account_set_id = supplier.account_set_id if supplier.account_set else None
                payment_code_id = supplier.payment_code_id if supplier.payment_code else None

                context = {'supplier_name': supplier.name, 'supplier_currency': currency_id,
                           'account_set_id': account_set_id, 'payment_code_id': payment_code_id}
                return HttpResponse(json.dumps(context), content_type="application/json")
        except Exception as e:
            print(e)
            logger.error(traceback.format_exc())
            return HttpResponseNotFound
    else:
        return HttpResponseNotFound


def load_supplier_Select(request):
    if request.method == 'POST':
        try:
            if 'supplier_id' in request.POST and request.POST['supplier_id']:
                session_date = request.session['session_date']
                company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
                company = Company.objects.get(pk=company_id)
                supplier_id = request.POST['supplier_id']
                supplier = Supplier.objects.get(pk=supplier_id)
                context = {}
                context['account_set_id'] = supplier.account_set_id if supplier.account_set else False
                try:
                    context['tax_id'] = supplier.tax_id if supplier.tax else None
                except:
                    context['tax_id'] = None
                context['distribution_id'] = supplier.distribution_id if supplier.distribution else None
                context['account_payable_id'] = supplier.account_payable_id if supplier.account_payable_id else False
                if supplier.name:
                    context['supplier_name'] = supplier.name
                else:
                    context['supplier_name'] = None
                if supplier.term_days:
                    context['term_days'] = supplier.term_days
                else:
                    context['term_days'] = 0
                if supplier.currency_id:
                    context['currency_id'] = supplier.currency_id
                    context['supplier_currency'] = supplier.currency.code
                    context['supplier_currency_id'] = supplier.currency_id
                    context['is_decimal'] = supplier.currency.is_decimal
                    if supplier.currency_id != company.currency_id:
                        exchange_rate = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                                    from_currency_id=supplier.currency_id,
                                                                    to_currency_id=company.currency_id,
                                                                    exchange_date__month=session_date.month,
                                                                    exchange_date__year=session_date.year,
                                                                    flag='ACCOUNTING').order_by('exchange_date').last()
                        if exchange_rate:
                            context['exchange_id'] = exchange_rate.id
                            context['exchange_rate'] = str(exchange_rate.rate)
                        else:
                            context['exchange_id'] = None
                            context['exchange_rate'] = 1
                    else:
                        context['exchange_id'] = None
                        context['exchange_rate'] = 1
                else:
                    context['currency_id'] = None
                    context['supplier_currency'] = None
                    context['supplier_currency_id'] = None
                    context['is_decimal'] = True
                return HttpResponse(json.dumps(context), content_type="application/json")
        except Exception as e:
            print(e)
            logger.error(traceback.format_exc())
            return HttpResponseNotFound
    else:
        return HttpResponseNotFound


@login_required
def revaluation_report(request, batch_type):
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    if batch_type == 'AR':
        type = dict(TRANSACTION_TYPES)['AR Invoice']
    elif batch_type == 'AP':
        type = dict(TRANSACTION_TYPES)['AP Invoice']
    else:
        type = dict(TRANSACTION_TYPES)['GL']

    if type == dict(TRANSACTION_TYPES)['GL']:
        sequence_list = Batch.objects.filter(
            is_hidden=0,
            company_id=company_id,
            batch_type=dict(TRANSACTION_TYPES)['GL'],
            status=STATUS_TYPE_DICT['Posted'],
            description__startswith="GL REVALUATION") \
            .annotate(int_batch_no=RawSQL('CAST(batch_no AS UNSIGNED)', params=[])) \
            .order_by('int_batch_no') \
            .values_list('int_batch_no', flat=True) \
            .distinct()
        if sequence_list:
            last_posting_sequence = sequence_list[sequence_list.count() - 1]
        else:
            last_posting_sequence = 0
    else:
        sequence_lists = RevaluationLogs.objects.filter(
            is_hidden=0,
            company_id=company_id,
            journal_type=type) \
            .order_by('posting_sequence') \
            .values_list('posting_sequence', flat=True) \
            .distinct()

        sequence_list = [int(item) for item in sequence_lists]
        sequence_list.sort()
        if sequence_list:
            last_posting_sequence = sequence_list[len(sequence_list) - 1]
        else:
            last_posting_sequence = 0

    return render_to_response('Revaluation-report.html', RequestContext(request, {'last_posting_sequence': last_posting_sequence,
                                                                                  'sequence_list': sequence_list, 'report_type': batch_type}))


@login_required
def print_AP_reports(request):
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    session_date = request.session['session_date']
    session_date = session_date.strftime("%d-%m-%Y")
    age = [31, 61, 91]
    ap_options = APOptions.objects.filter(company_id=company_id)
    if ap_options:
        ap_options = ap_options.last()
        age = [ap_options.aging_period_1, ap_options.aging_period_2, ap_options.aging_period_3]
    return render_to_response('AP-reports.html', RequestContext(request, {'ap_report_list': AP_REPORT_LIST,
                                                                          'date_type': DATE_TYPE,
                                                                          'session_date': session_date,
                                                                          'age': age,
                                                                          'document_type': DOCUMENT_TYPES,
                                                                          'status_type': STATUS_TYPE,
                                                                          'cur_type': VEN_CUR_TYPE}))


@csrf_exempt
@login_required
def load_payment_type(request):
    if request.method == 'POST':
        try:
            if 'payment_code_id' in request.POST and request.POST['payment_code_id']:
                payment_code_id = request.POST['payment_code_id']
                payment_code = PaymentCode.objects.get(pk=payment_code_id)

                context = {'payment_type': payment_code.payment_type, }
                return HttpResponse(json.dumps(context), content_type="application/json")
        except Exception as e:
            print(e)
            logger.error(traceback.format_exc())
            return HttpResponseNotFound
    else:
        return HttpResponseNotFound


@login_required
def print_customers_reports(request):
    session_date = request.session['session_date']
    session_date = session_date.strftime("%d-%m-%Y")
    return render_to_response('cust_report.html', RequestContext(request, {'ar_report_list': AR_CUST_REPORT,
                                                                           'date_type': DATE_TYPE,
                                                                           'session_date': session_date,
                                                                           'document_type': ACCOUNT_TYPES,
                                                                           'status_type': STATUS_TYPE,
                                                                           'cur_type': CUR_TYPE}))


@login_required
def print_vend_reports(request):
    session_date = request.session['session_date']
    session_date = session_date.strftime("%d-%m-%Y")
    return render_to_response('vendor_report.html', RequestContext(request, {'ar_report_list': AP_CUST_REPORT,
                                                                             'date_type': DATE_TYPE,
                                                                             'session_date': session_date,
                                                                             'document_type': ACCOUNT_TYPES,
                                                                             'status_type': STATUS_TYPE,
                                                                             'cur_type': CUR_TYPE}))


@login_required
def print_AR_reports(request):
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    session_date = request.session['session_date']
    session_date = session_date.strftime("%d-%m-%Y")
    age = [31, 61, 91]
    ar_options = AROptions.objects.filter(company_id=company_id)
    if ar_options:
        ar_options = ar_options.last()
        age = [ar_options.aging_period_1, ar_options.aging_period_2, ar_options.aging_period_3]
    return render_to_response('AR-reports.html', RequestContext(request, {'ar_report_list': AR_REPORT_LIST,
                                                                          'date_type': DATE_TYPE,
                                                                          'session_date': session_date,
                                                                          'age': age,
                                                                          'document_type': DOCUMENT_TYPES,
                                                                          'status_type': STATUS_TYPE,
                                                                          'cur_type': CUR_TYPE}))


@login_required
def print_AR_note_reports(request, journal_id):
    journal = Journal.objects.get(id=journal_id)
    return render_to_response('AR-reports.html', RequestContext(request, {'ar_report_list': AR_REPORT_LIST,
                                                                          'date_type': DATE_TYPE,
                                                                          'document_type': DOCUMENT_TYPES,
                                                                          'status_type': STATUS_TYPE,
                                                                          'cur_type': CUR_TYPE,
                                                                          'journal': journal,
                                                                          'print_note': True}))


@login_required
def print_Gl_transaction_listing(request):
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    session_date = request.session['session_date']
    fsc_calendar = FiscalCalendar.objects.filter(company_id=company_id, is_hidden=0, start_date__lte=session_date, end_date__gte=session_date).first()
    fsc_years = FiscalCalendar.objects.filter(company_id=company_id, is_hidden=0).values_list('fiscal_year', flat=True).order_by('fiscal_year').distinct()
    if fsc_calendar:
        fsc_year = fsc_calendar.fiscal_year
        fsc_month = fsc_calendar.period
        fsc_date = datetime.date(int(fsc_year), fsc_month, 1)
        fsc_date = fsc_date.strftime("%d-%m-%Y")
    else:
        fsc_date = session_date.strftime("%d-%m-%Y")

    return render_to_response('GL-transaction-listing-report.html', RequestContext(request, {'date_type': DATE_TYPE,
                                                                                             'document_type': DOCUMENT_TYPES,
                                                                                             'status_type': STATUS_TYPE,
                                                                                             'currency_report_list': CURRENCY_REPORT_LIST,
                                                                                             'fsc_date': fsc_date,
                                                                                             'fsc_years': fsc_years}))


@login_required
def GLList__asJson(request, journal_type):
    draw = request.GET['draw']
    start = request.GET['start']
    length = request.GET['length']
    search = request.GET['search[value]']
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    order_list = Journal.objects.filter(is_hidden=0, company_id=company_id, journal_type=int(journal_type))

    records_total = order_list.count()

    if search:  # Filter data base on search
        order_list = order_list.filter(
            Q(update_date__icontains=search) | Q(source_type__icontains=search) | Q(code__icontains=search) | Q(
                name__icontains=search))

    # All data
    records_filtered = order_list.count()

    # Order by list_limit base on order_dir and order_column

    order_column = request.GET['order[0][column]']
    column_name = ""
    if order_column == "0":
        column_name = "update_date"
    elif order_column == "1":
        column_name = "id"
    elif order_column == "2":
        column_name = "code"
    elif order_column == "3":
        column_name = "name"
    elif order_column == "4":
        column_name = "source_type"
    elif order_column == "5":
        column_name = "status"
    order_dir = request.GET['order[0][dir]']

    list = []
    if order_dir == "asc":
        list = order_list.order_by(column_name, '-id')[int(start):(int(start) + int(length))]
    elif order_dir == "desc":
        list = order_list.order_by('-' + column_name, '-id')[int(start):(int(start) + int(length))]

    # Create data list
    array = []
    for field in list:
        data = {}
        data["id"] = str(field.id)
        data["update_date"] = field.update_date.strftime("%d-%m-%Y")
        data["code"] = field.code
        data["name"] = field.name
        data["source_type"] = field.source_type
        data["status"] = str(field.status)
        array.append(data)

    content = {"draw": draw, "data": array, "recordsTotal": records_total, "recordsFiltered": records_filtered}
    json_content = json.dumps(content, ensure_ascii=False)
    return HttpResponse(json_content, content_type='application/json')


@login_required
@check_fiscal
def journal_GL_add(request, batch_id):
    data_anu = {'journal_count': 0, 'total_debit': 0, 'total_credit': 0, 'unbalance_amount': 0,
                'input_state': '1', 'from_currency': 0, 'to_currency': 0}
    try:
        company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
        currency_list = Currency.objects.filter(is_hidden=0)
        account_list = Account.objects.filter(is_hidden=False, is_active=True, company_id=company_id).order_by('account_segment', 'code')
        company = Company.objects.get(pk=company_id)

        form = JournalGLForm(company_id=company_id, session_date=request.session['session_date'])
        batch = Batch()
        batch_form = BatchInfoForm(session_date=request.session['session_date'])
        src_code_list = SOURCE_TYPES_GL
        prev_batch = 0
        next_batch = 0
        prev_status = 1
        next_status = 1
        prev_journal = 0
        next_journal = 0
        first_journal = 0
        last_journal = 0
        first_status = 0
        last_status = 0
        journal_list = Journal.objects.none()
        if batch_id and int(batch_id) > 0:
            batch = Batch.objects.get(pk=batch_id)
            batch_form = BatchInfoForm(instance=batch)
            journal_list = Journal.objects.filter(batch_id=batch_id, company_id=company_id, is_hidden=False).order_by('id')
            batch_source_ledger = SOURCE_LEDGER_DICT['Undefined']
            if batch.source_ledger:
                batch_source_ledger = batch.source_ledger
            if batch_source_ledger == SOURCE_LEDGER_DICT['Account Payable']:
                src_code_list = SOURCE_TYPES_AP
            elif batch_source_ledger == SOURCE_LEDGER_DICT['Account Receivable']:
                src_code_list = SOURCE_TYPES_AR
            elif batch_source_ledger == SOURCE_LEDGER_DICT['General Ledger']:
                src_code_list = SOURCE_TYPES_GL
            else:
                src_code_list = SOURCE_TYPES
            prev_journal, next_journal, first_journal, last_journal = get_batch_journals(batch.id, None, False)
            prev_batch, next_batch = get_nearest_batches(company_id, dict(TRANSACTION_TYPES)['GL'], batch.batch_no)
        else:
            prev_batch, next_batch = get_nearest_batches(company_id, dict(TRANSACTION_TYPES)['GL'], None)

        if prev_batch:
            prev_status = Journal.objects.get(pk=prev_batch).status
        if next_batch:
            next_status = Journal.objects.get(pk=next_batch).status
        if first_journal:
            first_status = Journal.objects.get(pk=first_journal).status
        if last_journal:
            last_status = Journal.objects.get(pk=last_journal).status
        form.initial['code'] = 1
        batchno = generate_batch_number(company_id, dict(TRANSACTION_TYPES)['GL'])
        if batch_id and int(batch_id) > 0:
            batchno = batch.batch_no
            data_anu['journal_count'] = journal_list.count()
            if journal_list.count():
                j_list = sorted(journal_list, key=lambda Journal: int(Journal.code))
                last_entry = j_list[-1].code
                entry_no = int(last_entry) + 1
            else:
                entry_no = 1
            form.initial['code'] = entry_no
        batch_form.initial['batch_no'] = batchno
        data_anu['to_currency'] = company.currency_id

        if request.method == 'POST':
            BatchID = request.POST.get('BatchID')
            JournalID = request.POST.get('JournalID')
            with transactionlib.atomic():
                batch_form = BatchInfoForm(data=request.POST, instance=batch)
                form = JournalGLForm(data=request.POST, company_id=company_id)
                if batch_id and int(batch_id) > 0:
                    batch_form = Batch.objects.get(pk=batch_id)
                    if JournalID:
                        form = Journal.objects.get(pk=JournalID)

                if 'is_locked' in request.session and request.session['is_locked']:
                    context = {'form': form, 'batch_form': batch_form, 'currency_list': currency_list,
                               'account_list': account_list, 'source_type_list': SOURCE_TYPES_GL, 'batch': batch,
                               'batch_id': batch_id, 'data_anu': data_anu, 'prev_batch': prev_batch, 'next_batch': next_batch,
                               'prev_journal': prev_journal, 'next_journal': next_journal, 'first_journal': first_journal,
                               'last_journal': last_journal, 'first_status': first_status, 'last_status': last_status,
                               'prev_status': prev_status, 'next_status': next_status, 'company_is_decimal': company.currency.is_decimal}

                    return render(request, 'GL_entry.html', context)

                form = JournalGLForm(data=request.POST, company_id=company_id)
                if form.is_valid():
                    if batch_id and int(batch_id) > 0:
                        Batch_Entry = batch_form
                        if JournalID:
                            form = Journal.objects.get(pk=JournalID)
                            GL_Entry = form
                        else:
                            GL_Entry = form.save(commit=False)
                    else:
                        Batch_Entry = batch_form.save(commit=False)
                        GL_Entry = form.save(commit=False)

                    total_amount = request.POST.get('total_amt')
                    journal_currency = request.POST.get('journal_curr_id')
                    journal_excrateid = request.POST.get('txtexcrateid')

                    # Save Batch Info
                    Batch_Entry.update_by = request.user.id
                    if batch_id and int(batch_id) > 0:
                        Batch_Entry.no_entries = journal_list.count() + 1
                        Batch_Entry.batch_amount = float(batch.batch_amount) + float(total_amount)
                        Batch_Entry.update_date = datetime.datetime.today()
                    else:
                        Batch_Entry.batch_no = generate_batch_number(company_id, dict(TRANSACTION_TYPES)['GL'])
                        Batch_Entry.status = int(STATUS_TYPE_DICT['Open'])
                        Batch_Entry.posting_sequence = 0
                        Batch_Entry.company_id = company_id
                        Batch_Entry.is_hidden = False
                        Batch_Entry.input_type = INPUT_TYPE_DICT['Manual Entry']
                        Batch_Entry.document_type = DOCUMENT_TYPE_DICT['Undefined']  # investigate later
                        Batch_Entry.batch_type = dict(TRANSACTION_TYPES)['GL']  # gl batch type
                        Batch_Entry.no_entries = 1  # count of journal entries in this batch
                        Batch_Entry.batch_amount = total_amount
                        Batch_Entry.source_ledger = SOURCE_LEDGER_DICT['General Ledger']
                        Batch_Entry.currency_id = company.currency_id
                        Batch_Entry.create_date = datetime.datetime.today()
                        Batch_Entry.batch_date = request.session['session_date']
                    Batch_Entry.save()

                    # Save Journal Info
                    GL_Entry.total_amount = float(total_amount)
                    GL_Entry.amount = float(total_amount)
                    GL_Entry.status = int(STATUS_TYPE_DICT['Open'])
                    GL_Entry.journal_type = dict(TRANSACTION_TYPES)['GL']
                    GL_Entry.update_by = request.user.id
                    GL_Entry.company_id = company_id
                    GL_Entry.is_hidden = False
                    # GL_Entry.currency_id = journal_currency
                    GL_Entry.currency_id = company.currency_id
                    GL_Entry.document_date = request.POST.get('document_date')
                    GL_Entry.source_type = request.POST.get('source_type')
                    GL_Entry.create_date = datetime.datetime.today()
                    GL_Entry.update_date = datetime.datetime.today()
                    GL_Entry.code = request.POST.get('code')
                    GL_Entry.name = request.POST.get('name')
                    GL_Entry.batch_id = Batch_Entry.id
                    GL_Entry.exchange_rate = 1
                    GL_Entry.is_auto_reverse = request.POST.get('is_auto_reverse') if request.POST.get(
                        'is_auto_reverse') else 0
                    GL_Entry.reverse_to_period = None
                    GL_Entry.reverse_to_period_val = None
                    if GL_Entry.is_auto_reverse:
                        GL_Entry.reverse_to_period = request.POST.get('rv_period_opt')
                        if GL_Entry.reverse_to_period and int(GL_Entry.reverse_to_period) == 1:
                            rev_date = GL_Entry.document_date
                            reverse_to_period = add_one_month(datetime.datetime.strptime(rev_date, "%Y-%m-%d"))
                            GL_Entry.reverse_to_period_val = str(reverse_to_period.year) + '-' + str(reverse_to_period.month) + '-01'
                        else:
                            rev_date = request.POST.get('rv_period').split('-')[1] + '-' + \
                                request.POST.get('rv_period').split(
                                    '-')[0] + '-01'
                            GL_Entry.reverse_to_period_val = rev_date

                    perd_month, perd_year = get_fiscal_year_period(company_id, GL_Entry.document_date)
                    if perd_month and perd_year:
                        GL_Entry.perd_month = perd_month
                        GL_Entry.perd_year = perd_year
                    else:
                        GL_Entry.perd_month = int(request.POST.get('perd_month'))
                        GL_Entry.perd_year = int(request.POST.get('perd_year'))
                    if GL_Entry.source_type == 'GL-CL':
                        GL_Entry.perd_month = 15
                    GL_Entry.save()

                    # Save Transactions
                    trxnum = 1
                    transaction_list_new = ast.literal_eval(request.POST['transaction_list_data'])
                    if transaction_list_new != None:
                        for transaction in transaction_list_new:
                            trans = Transaction()
                            trans.journal_id = GL_Entry.id
                            trans.source_type = GL_Entry.source_type
                            trans.number = trxnum
                            trans.reference = transaction['reference']
                            trans.description = transaction['description']
                            trans.account_id = transaction['account_id']
                            trans.currency_id = transaction['currency_id']
                            trans.functional_currency_id = company.currency_id
                            trans.is_debit_account = transaction['is_debit_account']
                            trans.is_credit_account = transaction['is_credit_account']
                            if transaction['is_debit_account'] == 1:
                                trans.amount = transaction['srcdebit']
                                trans.total_amount = transaction['srcdebit']
                                trans.functional_amount = transaction['funcdebit']
                            else:
                                trans.amount = transaction['srccredit']
                                trans.total_amount = transaction['srccredit']
                                trans.functional_amount = transaction['funccredit']
                            if not company.currency.is_decimal:
                                trans.functional_amount = float(round_number(float(trans.functional_amount), 0))
                            trans.exchange_rate = transaction['exchange_rate']
                            trans.remark = transaction['comment']
                            trans.is_auto_exch = transaction['is_auto_exch']
                            trans.is_hidden = False
                            trans.transaction_date = GL_Entry.document_date
                            try:
                                if transaction['rate_date'] and transaction['rate_date'] != 'None' and transaction['rate_date'] != '':
                                    trans.rate_date = transaction['rate_date']
                                else:
                                    split_date = str(request.POST.get('document_date')).split('-')
                                    trans.rate_date = split_date[0] + '-' + split_date[1] + '-01'
                            except:
                                split_date = str(request.POST.get('document_date')).split('-')
                                trans.rate_date = split_date[0] + '-' + split_date[1] + '-01'
                            trans.create_date = datetime.datetime.today()
                            trans.update_date = datetime.datetime.today()
                            trans.update_by = request.user.id
                            trans.company_id = company_id
                            trans.functional_balance_type = (BALANCE_TYPE_DICT['Credit'],
                                                             BALANCE_TYPE_DICT['Debit'])[trans.is_debit_account]
                            trans.save()
                            trxnum += 1

                    if BatchID and int(BatchID) > 0:
                        batch.id = BatchID
                        
                    messages.success(request, "GL entry is created successfully")
                    return redirect('/accounting/add/GL/' + str(batch.id) + '/')
                    # return redirect('/accounting/list/5/' + str(batch.id) + '/')
                else:
                    print(INVALID_FORM, ' Form error: ', form.errors, ' Batch error: ', batch_form)
                    messages.error(request, INVALID_FORM)

        if batch_id and int(batch_id) > 0:
            batch_amount = Journal.objects.filter(batch_id=batch_id, company_id=company_id, is_hidden=0) \
                            .aggregate(batch_amount=Sum('total_amount'))
            batch_amount = batch_amount.get('batch_amount', Decimal(0.000000))
        else:
            batch_amount = 0
        batch_form.initial['debit_amount'] = '{0:,.2f}'.format(batch_amount)
        batch_form.initial['credit_amount'] = '{0:,.2f}'.format(batch_amount)
        context = {'form': form, 'batch_form': batch_form, 'currency_list': currency_list, 'account_list': account_list,
                   'source_type_list': src_code_list, 'batch': batch, 'batch_id': batch_id, 'data_anu': data_anu,
                   'prev_batch': prev_batch, 'next_batch': next_batch, 'prev_status': prev_status, 'next_status': next_status,
                   'prev_journal': prev_journal, 'next_journal': next_journal, 'first_journal': first_journal,
                   'last_journal': last_journal, 'first_status': first_status, 'last_status': last_status,
                   'company_is_decimal': company.currency.is_decimal, 'batch_amount': batch_amount}

        return render(request, 'GL_entry.html', context)
    except OSError as e:
        print(e)
        messages.add_message(request, messages.ERROR, e, extra_tags='journal_GL_add')
        return redirect('/accounting/list/5/' + str(batch_id) + '/')


@login_required
@check_fiscal
def journal_GL_edit(request, journal_id):
    try:
        with transactionlib.atomic():
            data_anu = {'journal_count': 1, 'total_debit': 0, 'total_credit': 0, 'unbalance_amount': 0,
                        'input_state': '1', 'from_currency': 0, 'to_currency': 0, 'source_type_name': 'NULL'}
            company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
            company = Company.objects.get(pk=company_id)
            currency_list = Currency.objects.filter(is_hidden=0)
            account_list = Account.objects.filter(is_hidden=False, is_active=True, company_id=company_id).order_by('account_segment', 'code')
            journal = Journal.objects.get(pk=journal_id)
            journal_excrateid = journal.exchange_rate_fk
            batch = Batch.objects.get(pk=journal.batch_id)
            journal_list = Journal.objects.filter(batch_id=batch.id, is_hidden=False, company_id=company_id)
            prev_batch = 0
            next_batch = 0
            prev_status = 1
            next_status = 1
            prev_journal = 0
            next_journal = 0
            first_journal = 0
            last_journal = 0
            first_status = 0
            last_status = 0
            description = ''
            reference = ''
            if request.method == 'GET':
                transaction_list = Transaction.objects.filter(is_hidden=0, company_id=company_id,
                                                              journal_id=journal_id,
                                                              journal__status__in=(int(STATUS_TYPE_DICT['Open']),
                                                                                   int(STATUS_TYPE_DICT['Posted']),
                                                                                   int(STATUS_TYPE_DICT[
                                                                                       'Prov. Posted'])))
                trx_debit = 0
                trx_credit = 0
                for trx in transaction_list:
                    if trx.rate_date:
                        trx.rate_date = trx.rate_date.strftime("%d-%m-%Y")
                    description = trx.description
                    reference = trx.reference
                    if company.currency.is_decimal:
                        func_amnt = float(round_number(float(trx.functional_amount), 2))
                    else:
                        func_amnt = float(round_number(float(trx.functional_amount), 0))
                    if trx.functional_balance_type == BALANCE_TYPE_DICT['Debit']:
                        trx_debit += func_amnt
                    else:
                        trx_credit += func_amnt
                prev_journal, next_journal, first_journal, last_journal = get_batch_journals(batch.id, journal, False)
                prev_batch, next_batch = get_nearest_batches(company_id, dict(TRANSACTION_TYPES)['GL'], batch.batch_no)
                if prev_batch:
                    prev_status = Journal.objects.get(pk=prev_batch).status
                if next_batch:
                    next_status = Journal.objects.get(pk=next_batch).status
                if first_journal:
                    first_status = Journal.objects.get(pk=first_journal).status
                if last_journal:
                    last_status = Journal.objects.get(pk=last_journal).status
                batch_form = BatchInfoForm(instance=batch)
                batch_amount = Journal.objects.filter(batch_id=batch.id, company_id=company_id, is_hidden=0) \
                                .aggregate(batch_amount=Sum('total_amount'))
                batch_amount = batch_amount.get('batch_amount', Decimal(0.000000))
                if not batch_amount:
                    batch_amount = batch.batch_amount
                batch_form.initial['debit_amount'] = '{0:,.2f}'.format(batch_amount)
                batch_form.initial['credit_amount'] = '{0:,.2f}'.format(batch_amount)

                # batch_form.initial['batch_amount'] = '{0:,.2f}'.format(batch.batch_amount)
                form = JournalGLForm(journal_id, instance=journal, company_id=company_id)
                journal_source = 'NOL'
                if journal.source_type:
                    journal_source = journal.source_type[:2]
                if journal_source == 'AP':
                    src_code_list = SOURCE_TYPES_AP
                elif journal_source == 'AR':
                    src_code_list = SOURCE_TYPES_AR
                elif journal_source == 'GL':
                    src_code_list = SOURCE_TYPES_GL
                else:
                    src_code_list = SOURCE_TYPES

                for src_type_list in src_code_list:
                    # if form.initial['source_type'] == src_type_list[0]:
                    if journal.source_type == src_type_list[0]:
                        data_anu['source_type_name'] = src_type_list[1]
                data_anu['journal_count'] = journal_list.count()
                data_anu['total_debit'] = '{0:,.2f}'.format(trx_debit) if company.currency.is_decimal else '{0:,.0f}'.format(trx_debit)
                data_anu['total_credit'] = '{0:,.2f}'.format(trx_credit) if company.currency.is_decimal else '{0:,.0f}'.format(trx_credit)
                if trx_credit > 0:
                    if company.currency.is_decimal:
                        data_anu['unbalance_amount'] = '{0:,.2f}'.format(abs(trx_debit - trx_credit))
                    else:
                        data_anu['unbalance_amount'] = '{0:,.0f}'.format(abs(trx_debit - trx_credit))
                else:
                    if company.currency.is_decimal:
                        data_anu['unbalance_amount'] = '{0:,.2f}'.format(abs(trx_debit + trx_credit))
                    else:
                        data_anu['unbalance_amount'] = '{0:,.0f}'.format(abs(trx_debit + trx_credit))
                data_anu['to_currency'] = company.currency_id
                data_anu['j_no'] = int(journal.code)
                if journal.status == int(STATUS_TYPE_DICT['Posted']):
                    data_anu['input_state'] = '2'
                context = {
                    'form': form, 'batch_form': batch_form,
                    'currency_list': currency_list,
                    'account_list': account_list,
                    'source_type_list': src_code_list,
                    'transactions': transaction_list,
                    'journal': journal, 'company_is_decimal': company.currency.is_decimal,
                    'journal_type': journal.journal_type,
                    'batch': batch, 'batch_id': batch.id, 'data_anu': data_anu,
                    'prev_batch': prev_batch, 'next_batch': next_batch,
                    'prev_status': prev_status, 'next_status': next_status,
                    'reference': reference, 'description': description,
                    'prev_journal': prev_journal, 'next_journal': next_journal, 
                    'first_journal': first_journal, 'last_journal': last_journal, 
                    'first_status': first_status, 'last_status': last_status,
                    'batch_amount': batch_amount
                }
                return render(request, 'GL_entry.html', context)

            else:
                BatchID = request.POST.get('BatchID')
                batch_form = Batch.objects.get(pk=BatchID)
                JournalID = request.POST.get('JournalID')
                form = JournalGLForm(data=request.POST, company_id=company_id)
                if int(JournalID) > 0:
                    journal = Journal.objects.get(pk=JournalID)
                    form = JournalGLForm(data=request.POST, journal_id=JournalID, instance=journal,
                                         company_id=company_id)

                if form.is_valid():
                    old_journal_amount = 0
                    current_journal_amount = request.POST.get('total_amt')
                    journal_currency = request.POST.get('journal_curr_id')

                    Batch_Entry = batch_form
                    if int(JournalID) > 0:
                        GL_Entry = journal
                        old_journal_amount = GL_Entry.total_amount
                    else:
                        GL_Entry = Journal()

                    # Save Batch
                    if int(JournalID) == 0:
                        Batch_Entry.no_entries += 1
                    Batch_Entry.description = request.POST.get('description')
                    Batch_Entry.update_by = request.user.id
                    Batch_Entry.update_date = datetime.datetime.today()
                    Batch_Entry.save()
                    # Save Journal Info
                    GL_Entry.document_date = request.POST.get('document_date')
                    GL_Entry.source_type = request.POST.get('source_type')
                    GL_Entry.total_amount = float(current_journal_amount)
                    GL_Entry.amount = float(current_journal_amount)
                    GL_Entry.update_by = request.user.id
                    GL_Entry.update_date = datetime.datetime.today()
                    if int(JournalID) == 0:
                        GL_Entry.journal_type = dict(TRANSACTION_TYPES)['GL']
                        GL_Entry.company_id = company_id
                        GL_Entry.is_hidden = False
                        # GL_Entry.currency_id = journal_currency
                        GL_Entry.currency_id = company.currency_id
                        GL_Entry.create_date = datetime.datetime.today()
                        GL_Entry.code = request.POST.get('code')
                        GL_Entry.name = request.POST.get('name')
                        GL_Entry.batch_id = Batch_Entry.id
                        GL_Entry.exchange_rate_fk = journal_excrateid
                    GL_Entry.is_auto_reverse = request.POST.get('is_auto_reverse') if request.POST.get(
                        'is_auto_reverse') else 0
                    GL_Entry.reverse_to_period = None
                    GL_Entry.reverse_to_period_val = None
                    if GL_Entry.is_auto_reverse:
                        GL_Entry.reverse_to_period = request.POST.get('rv_period_opt')
                        if GL_Entry.reverse_to_period and int(GL_Entry.reverse_to_period) == 1:
                            rev_date = GL_Entry.document_date
                            reverse_to_period = add_one_month(datetime.datetime.strptime(rev_date, "%Y-%m-%d"))
                            GL_Entry.reverse_to_period_val = str(reverse_to_period.year) + '-' + str(reverse_to_period.month) + '-01'
                        else:
                            rev_date = request.POST.get('rv_period').split('-')[1] + '-' + \
                                request.POST.get('rv_period').split(
                                    '-')[0] + '-01'
                            GL_Entry.reverse_to_period_val = rev_date

                    perd_month, perd_year = get_fiscal_year_period(company_id, GL_Entry.document_date)
                    if perd_month and perd_year:
                        GL_Entry.perd_month = perd_month
                        GL_Entry.perd_year = perd_year
                    else:
                        GL_Entry.perd_month = int(request.POST.get('perd_month'))
                        GL_Entry.perd_year = int(request.POST.get('perd_year'))
                    if GL_Entry.source_type == 'GL-CL':
                        GL_Entry.perd_month = 15
                    GL_Entry.save()

                    journal_list_total = journal_list.aggregate(amt=Sum('total_amount'))
                    Batch_Entry.batch_amount = journal_list_total['amt']
                    Batch_Entry.save()

                    if request.POST['transaction_list_data']:
                        transaction_list_new = ast.literal_eval(request.POST['transaction_list_data'])
                    else:
                        transaction_list_new = []
                    if len(transaction_list_new) > 0:  # only save transactions when there is unsaved transactions data
                        # delete old trans
                        old_trx_list = Transaction.objects.filter(is_hidden=0, company_id=company_id,
                                                                  journal_id=journal_id)
                        for trx in old_trx_list:
                            trx.is_hidden = 1
                            trx.save()

                        # save transactions
                        trxnum = 1
                        for transaction in transaction_list_new:
                            # trans = None
                            # if transaction['id']:
                            #     trans = Transaction.objects.get(pk=transaction['id'])
                            # else:
                            trans = Transaction()
                            trans.number = trxnum
                            trans.create_date = datetime.datetime.today()
                            trans.functional_balance_type = (BALANCE_TYPE_DICT['Credit'],
                                                             BALANCE_TYPE_DICT['Debit'])[
                                transaction['is_debit_account']]
                            trans.journal_id = GL_Entry.id
                            trans.source_type = GL_Entry.source_type
                            trans.reference = transaction['reference']
                            trans.description = transaction['description']
                            trans.account_id = transaction['account_id']
                            trans.currency_id = transaction['currency_id']
                            trans.functional_currency_id = company.currency_id
                            trans.is_debit_account = transaction['is_debit_account']
                            trans.is_credit_account = transaction['is_credit_account']
                            if transaction['is_debit_account'] == 1:
                                trans.amount = transaction['srcdebit']
                                trans.total_amount = transaction['srcdebit']
                                trans.functional_amount = transaction['funcdebit']
                            else:
                                trans.amount = transaction['srccredit']
                                trans.total_amount = transaction['srccredit']
                                trans.functional_amount = transaction['funccredit']
                            if not company.currency.is_decimal:
                                trans.functional_amount = float(round_number(float(trans.functional_amount), 0))
                            trans.exchange_rate = transaction['exchange_rate']
                            trans.remark = transaction['comment']
                            trans.is_auto_exch = transaction['is_auto_exch']
                            trans.is_hidden = False
                            trans.transaction_date = GL_Entry.document_date
                            try:
                                if transaction['rate_date'] and transaction['rate_date'] != 'None' and transaction['rate_date'] != '':
                                    trans.rate_date = transaction['rate_date']
                                else:
                                    split_date = str(request.POST.get('document_date')).split('-')
                                    trans.rate_date = split_date[0] + '-' + split_date[1] + '-01'
                            except:
                                split_date = str(request.POST.get('document_date')).split('-')
                                trans.rate_date = split_date[0] + '-' + split_date[1] + '-01'
                            trans.update_date = datetime.datetime.today()
                            trans.update_by = request.user.id
                            trans.company_id = company_id
                            trans.save()
                            trxnum += 1

                    return redirect('/accounting/list/5/' + str(BatchID) + '/')

                else:
                    print(INVALID_FORM, ' Form error: ', form.errors)
                    messages.error(request, INVALID_FORM)
    except Exception as e:
        print(EXCEPTION_JOURNAL_ADD % ('GL Entry'), e)
        logging.error(traceback.format_exc())
        messages.error(request, EXCEPTION_JOURNAL_ADD % ('GL Entry'))
    return render_to_response('404.html', RequestContext(request, {'messages_error': EXCEPTION_JOURNAL_ADD % ('GL Entry')}))


@login_required
def journal_GL_view(request, journal_id):
    try:
        data_anu = {'journal_count': 1, 'trx_count': 1, 'total_debit': 0,
                    'total_credit': 0, 'source_type_name': 'NULL', 'input_state': '2',
                    'from_currency': 0, 'to_currency': 0, 'unbalance_amount': 0}
        company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
        journal = Journal.objects.get(pk=journal_id)
        batch = Batch.objects.get(pk=journal.batch_id)
        unposted_batch = Batch.objects.filter(company_id=company_id, is_hidden=False,
                                              batch_type=batch.batch_type,
                                              source_ledger=batch.source_ledger,
                                              status=int(STATUS_TYPE_DICT['Open']))
        currency_list = Currency.objects.filter(is_hidden=0)
        transaction_list = Transaction.objects.filter(is_hidden=False, company_id=company_id,
                                                      journal_id=journal_id,
                                                      journal__status__in=(int(STATUS_TYPE_DICT['Open']),
                                                                           int(STATUS_TYPE_DICT['Posted']),
                                                                           int(STATUS_TYPE_DICT['Reversed']),
                                                                           int(STATUS_TYPE_DICT['Auto Reverse Entry']),
                                                                           int(STATUS_TYPE_DICT['Prov. Posted'])))
        trx_debit = 0
        trx_credit = 0
        prev_batch = 0
        next_batch = 0
        prev_status = 1
        next_status = 1
        prev_journal = 0
        next_journal = 0
        first_journal = 0
        last_journal = 0
        first_status = 0
        last_status = 0
        for trx in transaction_list:
            if trx.functional_balance_type == BALANCE_TYPE_DICT['Debit']:
                trx_debit += float(round_number(float(trx.functional_amount), 2))
            else:
                trx_credit += float(round_number(float(trx.functional_amount), 2))
        account_list = Account.objects.filter(is_hidden=False, is_active=True, company_id=company_id).order_by('account_segment', 'code')
        company = Company.objects.get(pk=company_id)

        form = JournalGLForm(journal_id, instance=journal, company_id=company_id)
        if journal and journal.batch:
            batch = Batch.objects.get(pk=journal.batch_id)
            batch_form = BatchInfoForm(instance=batch)
            prev_journal, next_journal, first_journal, last_journal = get_batch_journals(batch.id, journal, False)
            prev_batch, next_batch = get_nearest_batches(company_id, dict(TRANSACTION_TYPES)['GL'], batch.batch_no)
        else:
            batch = Batch()
            batch_form = BatchInfoForm()
            prev_journal, next_journal, first_journal, last_journal = get_batch_journals(batch.id, None, False)
            prev_batch, next_batch = get_nearest_batches(company_id, dict(TRANSACTION_TYPES)['GL'], None)
        if prev_batch:
            prev_status = Journal.objects.get(pk=prev_batch).status
        if next_batch:
            next_status = Journal.objects.get(pk=next_batch).status
        if first_journal:
            first_status = Journal.objects.get(pk=first_journal).status
        if last_journal:
            last_status = Journal.objects.get(pk=last_journal).status
        # batch_form.initial['batch_amount'] = abs(batch.batch_amount)
        batch_amount = Journal.objects.filter(batch_id=batch.id, company_id=company_id, is_hidden=0) \
                        .aggregate(batch_amount=Sum('total_amount'))
        batch_amount = batch_amount.get('batch_amount', Decimal(0.000000))
        if not batch_amount:
            batch_amount = batch.batch_amount
        batch_form.initial['debit_amount'] = '{0:,.2f}'.format(batch_amount)
        batch_form.initial['credit_amount'] = '{0:,.2f}'.format(batch_amount)
        journal_source = 'NOL'
        if journal.source_type:
            journal_source = journal.source_type[:2]
        if journal_source == 'AP':
            src_code_list = SOURCE_TYPES_AP
        elif journal_source == 'AR':
            src_code_list = SOURCE_TYPES_AR
        elif journal_source == 'GL':
            src_code_list = SOURCE_TYPES_GL
        else:
            src_code_list = SOURCE_TYPES

        for src_type_list in src_code_list:
            # if form.initial['source_type'] == src_type_list[0]:
            if journal.source_type == src_type_list[0]:
                data_anu['source_type_name'] = src_type_list[1]

        data_anu['journal_count'] = batch.no_entries
        data_anu['total_debit'] = '{0:,.2f}'.format(trx_debit) if company.currency.is_decimal else '{0:,.0f}'.format(trx_debit)
        data_anu['total_credit'] = '{0:,.2f}'.format(trx_credit) if company.currency.is_decimal else '{0:,.0f}'.format(trx_credit)
        data_anu['unbalance_amount'] = '{0:,.2f}'.format(
            abs(trx_debit - trx_credit)) if company.currency.is_decimal else '{0:,.0f}'.format(abs(trx_debit - trx_credit))
        data_anu['to_currency'] = company.currency_id
        data_anu['j_no'] = int(journal.code)
        data_anu['batch_no'] = int(batch.batch_no)

        try:
            is_period_closed = FiscalCalendar.objects.filter(is_hidden=0, company_id=company_id,
                                                             fiscal_year=str(journal.perd_year),
                                                             period=journal.perd_month) \
                .values('is_gl_locked').first().get('is_gl_locked')
            if not is_period_closed:
                is_period_closed = False
        except Exception as e:
            print(e)
            is_period_closed = False
        data_anu['is_period_closed'] = is_period_closed

        context = {
            'form': form, 'batch_form': batch_form,
            'currency_list': currency_list,
            'account_list': account_list,
            'source_type_list': src_code_list,
            'transactions': transaction_list,
            'journal': journal, 'company_is_decimal': company.currency.is_decimal,
            'journal_type': journal.journal_type,
            'batch': batch, 'batch_id': batch.id, 'data_anu': data_anu, 'unposted_batch': unposted_batch,
            'prev_batch': prev_batch, 'next_batch': next_batch,
            'prev_status': prev_status, 'next_status': next_status,
            'prev_journal': prev_journal, 'next_journal': next_journal, 
            'first_journal': first_journal, 'last_journal': last_journal, 
            'first_status': first_status, 'last_status': last_status,
        }
        return render(request, 'GL_entry.html', context)

    except Exception as e:
        print(EXCEPTION_JOURNAL_VIEW % ('GL List'), e)
        logging.error(traceback.format_exc())
        messages.error(request, EXCEPTION_JOURNAL_VIEW % ('GL List'))
        return render_to_response('404.html', RequestContext(request, {'messages_error': EXCEPTION_JOURNAL_VIEW % ('GL List')}))


@login_required
def journal_GL_get_trx(request, batch_id, journal_num, isNext):
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    obj = {
        "journal_id": 0,
        "journal_desc": "",
        "journal_date": "",
        "journal_prd": "",
        "Journal_srccode": "",
        "Journal_currency": 0,
        "Journal_currcode": "",
        "journal_code": "",
        "array": []
    }
    journal_num = int(journal_num)
    journal_num_str = '{:05d}'.format(journal_num)
    try:
        journals = Journal.objects.filter(company_id=company_id, batch__id=batch_id, is_hidden=False,
                                          status__in=(int(STATUS_TYPE_DICT['Open']),
                                                      int(STATUS_TYPE_DICT['Posted']),
                                                      int(STATUS_TYPE_DICT['Prov. Posted'])))\
                                .exclude(reference='REVERSING ENTRY')
        journal_count = journals.count()
        journal = journals.filter(Q(code=journal_num) | Q(code=journal_num_str)).first()
        if not journal:
            journal_count -= (journal_num - 1)
            for i in range(journal_count):
                if int(isNext) == 1:
                    journal_num += 1
                else:
                    journal_num -= 1
                journal = journals.filter(code=journal_num).first()
                if journal:
                    break

        if journal:
            obj["journal_id"] = journal.id
            obj["journal_desc"] = journal.name
            obj["journal_date"] = journal.document_date.strftime("%Y-%m-%d")
            obj["journal_prd"] = journal.perd_month
            obj["journal_year"] = journal.perd_year
            obj["Journal_srccode"] = journal.source_type
            obj["Journal_currency"] = journal.currency_id
            obj["Journal_currcode"] = journal.currency.code
            obj["journal_code"] = journal.code
            obj["is_auto_reverse"] = journal.is_auto_reverse
            obj["rv_period_opt"] = journal.reverse_to_period
            obj["rv_period"] = journal.reverse_to_period_val.strftime(
                "%Y-%m") if journal.reverse_to_period_val else None
            trx = Transaction.objects.filter(is_hidden=0, company_id=company_id,
                                             journal_id=journal.id,
                                             journal__status__in=(int(STATUS_TYPE_DICT['Open']),
                                                                  int(STATUS_TYPE_DICT['Posted']),
                                                                  int(STATUS_TYPE_DICT['Prov. Posted'])))
            for trx_list in trx:
                trans = {}
                trans["id"] = trx_list.id
                trans["reference"] = trx_list.reference
                trans["description"] = trx_list.description
                trans["account_id"] = trx_list.account_id
                trans["account_code"] = trx_list.account.code
                trans["account_name"] = trx_list.account.name
                trans["currency_id"] = trx_list.currency_id
                trans["currency_code"] = trx_list.currency.code
                trans["currency_name"] = trx_list.currency.name
                trans["is_decimal"] = trx_list.currency.is_decimal
                trans["total_amount"] = str(round_number(float(trx_list.total_amount), 2))
                trans["exchange_rate"] = str(trx_list.exchange_rate)
                trans["functional_currency_id"] = trx_list.functional_currency_id
                trans["functional_amount"] = str(round_number(float(trx_list.functional_amount), 2))
                trans["remark"] = trx_list.remark
                trans["is_debit_account"] = trx_list.is_debit_account
                trans["functional_balance_type"] = trx_list.functional_balance_type
                trans["is_auto_exch"] = trx_list.is_auto_exch
                obj["array"].append(trans)
        json_content = json.dumps(obj, ensure_ascii=False)
        return HttpResponse(json_content, content_type='application/json')
    except Exception as e:
        print(e)
        json_content = json.dumps(obj, ensure_ascii=False)
        return HttpResponse(json_content, content_type='application/json')


@login_required
def gl_batch_remove(request, batch_id):
    batch = Batch.objects.get(pk=batch_id)
    batch.is_hidden = True
    batch.status = int(STATUS_TYPE_DICT['Removed'])
    batch.save()
    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))


@login_required
def gl_batch_delete(request, batch_id):
    try:
        company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
        batch = Batch.objects.get(pk=batch_id)
        if batch.status != int(STATUS_TYPE_DICT['Posted']):
            batch.status = int(STATUS_TYPE_DICT['Deleted'])
            batch.save()

            journals = Journal.objects.filter(batch_id=batch_id, company_id=company_id, is_hidden=False)
            rev_number = ''
            j_type = ''
            for journal in journals:
                journal.is_hidden = True
                journal.save()
                if journal.source_type in ['AR-GL', 'AP-GL'] and journal.is_rev_do == True:
                    if journal.source_type == 'AR-GL':
                        j_type = dict(TRANSACTION_TYPES)['AR Invoice']
                    else:
                        j_type = dict(TRANSACTION_TYPES)['AP Invoice']
                    revert_journals = Journal.objects.filter(document_number=journal.reference, journal_type=j_type, company_id=company_id, is_hidden=False)
                    for revert_journal in revert_journals:
                        revert_journal.is_rev_do = False
                        revert_journal.rev_perd_month = 0
                        revert_journal.rev_perd_year = 0
                        revert_journal.save()

                    if 'RV' in journal.document_number and 'RV' in journal.name:
                        rev_number = journal.name

            transactions = Transaction.objects.filter(is_hidden=0, company_id=company_id, journal__batch_id=batch_id)
            for transaction in transactions:
                transaction.is_hidden = True
                transaction.save()

            if rev_number:
                posting_number = rev_number.replace('RV-', '')
                rev_logs = RevaluationLogs.objects.filter(is_hidden=False, company_id=company_id,
                                                          journal_type=j_type, posting_sequence=posting_number)
                for rev_log in rev_logs:
                    rev_details = RevaluationDetails.objects.filter(posting_id=rev_log.id, is_hidden=False)
                    for rev in rev_details:
                        rev.is_hidden = True
                        rev.save()

                    rev_log.is_hidden = True
                    rev_log.save()
            # temporary disable codes below for client demo
            # if batch.source_ledger!=SOURCE_LEDGER_DICT['General Ledger']:
            #     try:
            #         #reopen related batch
            #         related_batch = Batch.objects.get(pk=batch.related_batch_id)
            #         if related_batch.batch_type!=5:
            #             related_batch.status = int(STATUS_TYPE_DICT['Posted'])
            #             related_batch.save()

            #             #reopen related journals
            #             related_journals = Journal.objects.filter(batch_id=related_batch.id)
            #             for related_journal in related_journals:
            #                 related_journal.status = int(STATUS_TYPE_DICT['Posted'])
            #                 related_journal.save()
            #     except Exception as e:
            #         messages.warning(request, 'Warning : '+REFERENCE_ERROR+' '+CORRUPT_DATA)
            messages.success(request, DELETE_SUCCESS % (batch.batch_no))
        else:
            messages.error(request, DELETE_BATCH_FAILED + REFRESH_OR_GO_GET_SUPPORT)
    except Exception as e:
        print(e)
        logging.error(traceback.format_exc())
        messages.error(request, DELETE_BATCH_FAILED + REFRESH_OR_GO_GET_SUPPORT)

    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))


@login_required
def journal_GL_delete(request, journal_id):
    try:
        company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
        journal = Journal.objects.get(pk=journal_id)
        journal.is_hidden = True
        journal.save()

        transactions = Transaction.objects.filter(is_hidden=0, company_id=company_id, journal_id=journal.id)
        for transaction in transactions:
            transaction.is_hidden = True
            transaction.save()

        transactions_update = Transaction.objects.filter(is_hidden=0, company_id=company_id,
                                                         journal__batch_id=journal.batch_id, is_debit_account=True)
        if transactions_update:
            batch_amount_updated = transactions_update.aggregate(batch_amount=Sum('functional_amount'))

            if journal.batch:
                batch = Batch.objects.get(pk=journal.batch_id)
                batch.no_entries -= 1
                batch.batch_amount = Decimal(batch_amount_updated['batch_amount'])
                batch.save()
        if journal.batch:
            batch = Batch.objects.get(pk=journal.batch_id)
            return redirect('/accounting/list/5/' + str(batch.id) + '/')
        else:
            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
    except Exception as e:
        print(EXCEPTION_JOURNAL_DELETE % ('GL Entry'), e)
        logging.error(traceback.format_exc())
        messages.error(request, EXCEPTION_JOURNAL_DELETE % ('GL Entry'))
        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))


@login_required
# @check_fiscal
def journal_GL_add_trx(request, batch_id, journal_id):
    array = []
    savedRecord = 0
    data_anu = {
        "status": str(savedRecord),
        "batch_id": str(batch_id),
        "batch_amount": 0,
        "no_entries": 0
    }
    try:
        company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
        company = Company.objects.get(pk=company_id)
        hdr_data = json.loads(request.POST.get('hdr_data'))
        old_batch_amount = 0
        old_journal_amount = 0
        journal_excrateid = 0

        Batch_Entry = Batch()
        GL_Entry = Journal()
        journal_excrateid = hdr_data[0]['excrateid']
        if batch_id and int(batch_id) > 0:
            Batch_Entry = Batch.objects.get(pk=batch_id)
            old_batch_amount = Batch_Entry.batch_amount
        if journal_id and int(journal_id) > 0:
            GL_Entry = Journal.objects.get(pk=journal_id)
            old_journal_amount = GL_Entry.total_amount
            journal_excrateid = GL_Entry.exchange_rate_fk

        # Save Batch
        Batch_Entry.description = hdr_data[0]['batchdesc']
        Batch_Entry.update_by = request.user.id
        if Batch_Entry.id:
            if not GL_Entry.id:
                Batch_Entry.no_entries += 1
            Batch_Entry.batch_amount = float(Batch_Entry.batch_amount) - float(old_journal_amount) + float(
                hdr_data[0]['journalamount'])
            Batch_Entry.update_date = datetime.datetime.today()
        else:
            Batch_Entry.batch_no = generate_batch_number(company_id, dict(TRANSACTION_TYPES)['GL'])
            Batch_Entry.batch_amount = hdr_data[0]['journalamount']
            Batch_Entry.no_entries = 1
            Batch_Entry.currency_id = company.currency_id
            Batch_Entry.status = int(STATUS_TYPE_DICT['Open'])
            Batch_Entry.company_id = company_id
            Batch_Entry.input_type = INPUT_TYPE_DICT['Manual Entry']
            Batch_Entry.document_type = DOCUMENT_TYPE_DICT['Undefined']  # investigate later
            Batch_Entry.batch_type = dict(TRANSACTION_TYPES)['GL']  # gl batch type
            Batch_Entry.is_hidden = False
            Batch_Entry.create_date = datetime.datetime.today()
            Batch_Entry.source_ledger = SOURCE_LEDGER_DICT['General Ledger']
        Batch_Entry.save()

        # Save Journal Master
        GL_Entry.code = hdr_data[0]['journalnum']
        GL_Entry.name = hdr_data[0]['journaldesc']
        GL_Entry.source_type = hdr_data[0]['srccode']
        GL_Entry.document_date = hdr_data[0]['journaldate']
        GL_Entry.total_amount = hdr_data[0]['journalamount']
        GL_Entry.status = int(STATUS_TYPE_DICT['Open'])
        GL_Entry.journal_type = dict(TRANSACTION_TYPES)['GL']
        GL_Entry.company_id = company_id
        GL_Entry.is_hidden = False
        GL_Entry.currency_id = hdr_data[0]['journalcurr']
        GL_Entry.create_date = datetime.datetime.today()
        GL_Entry.update_by = request.user.id
        GL_Entry.batch_id = Batch_Entry.id
        GL_Entry.exchange_rate_fk = journal_excrateid
        GL_Entry.is_auto_reverse = hdr_data[0]['is_auto_reverse'] if hdr_data[0]['is_auto_reverse'] else 0
        GL_Entry.reverse_to_period = None
        GL_Entry.reverse_to_period_val = None
        try:
            if hdr_data[0]['is_auto_reverse']:
                GL_Entry.reverse_to_period = hdr_data[0]['rv_period_opt']
                GL_Entry.reverse_to_period_val = hdr_data[0]['rv_period'].split('-')[0] + '-' + \
                    hdr_data[0]['rv_period'].split('-')[1] + '-01'
        except:
            pass
        GL_Entry.perd_month = int(hdr_data[0]['perd_month'])
        GL_Entry.perd_year = int(hdr_data[0]['perd_year'])
        GL_Entry.save()

        # Save Journal Detail (Transactions)
        transaction_list = json.loads(
            request.POST.get('trxdata'))  # damn you json.loads! it tooks 5 hours for me to get to you !!!
        trx_num = 1
        savedTrx = 0
        for transaction in transaction_list:
            trans = None
            if transaction['id']:
                trans = Transaction.objects.get(pk=transaction['id'])
            else:
                trans = Transaction()
                trans.number = trx_num
                trans.transaction_date = GL_Entry.document_date
                trans.create_date = datetime.datetime.today()
            trans.journal_id = GL_Entry.id
            trans.source_type = GL_Entry.source_type
            trans.reference = transaction['reference']
            trans.description = transaction['description']
            trans.account_id = transaction['account_id']
            trans.currency_id = transaction['currency_id']
            trans.functional_currency_id = company.currency_id
            trans.is_debit_account = transaction['is_debit_account']
            trans.is_credit_account = transaction['is_credit_account']
            if transaction['is_debit_account'] == 1:
                trans.amount = transaction['srcdebit']
                trans.total_amount = transaction['srcdebit']
                trans.functional_amount = transaction['funcdebit']
            else:
                trans.amount = transaction['srccredit']
                trans.total_amount = transaction['srccredit']
                trans.functional_amount = transaction['funccredit']
            if not company.currency.is_decimal:
                trans.functional_amount = float(round_number(float(trans.functional_amount), 0))
            trans.exchange_rate = transaction['exchange_rate']
            trans.remark = transaction['comment']
            trans.is_auto_exch = transaction['is_auto_exch']
            trans.is_hidden = False
            trans.rate_date = GL_Entry.document_date
            trans.update_date = datetime.datetime.today()
            trans.update_by = request.user.id
            trans.company_id = company_id
            trans.functional_balance_type = (BALANCE_TYPE_DICT['Credit'],
                                            BALANCE_TYPE_DICT['Debit'])[trans.is_debit_account]
            trans.save()
            if trans.id:
                savedTrx += 1
            trx_num += 1

        if Batch_Entry.id:
            savedRecord += 1
        if GL_Entry.id:
            savedRecord += 1
        if savedTrx == len(transaction_list):
            savedRecord += 1
        data_anu["status"] = str(savedRecord)
        data_anu["batch_id"] = str(Batch_Entry.id)
        data_anu["batch_amount"] = str(Batch_Entry.batch_amount)
        data_anu["no_entries"] = str(Batch_Entry.no_entries)
        array.append(data_anu)
        json_content = json.dumps(array, ensure_ascii=False)
        return HttpResponse(json_content, content_type="application/json")
    except Exception as e:
        print(e)
        json_content = json.dumps(array, ensure_ascii=False)
        return HttpResponse(json_content, content_type="application/json")


@login_required
def journal_GL_delete_trx(request, trx_id, journal_id):
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    try:
        trx = Transaction.objects.get(pk=trx_id)
        trx.is_hidden = True
        trx.save()

        all_trx = Transaction.objects.filter(is_hidden=0, company_id=company_id,
                                             journal_id=journal_id)
        trx_debit = all_trx.filter(is_debit_account=True).aggregate(Sum('functional_amount'))
        trx_credit = all_trx.filter(is_credit_account=True).aggregate(Sum('functional_amount'))
        total_debit = trx_debit['functional_amount__sum'] if trx_debit['functional_amount__sum'] else 0
        total_credit = trx_credit['functional_amount__sum'] if trx_credit['functional_amount__sum'] else 0
        unbalance = abs(total_debit - total_credit)
        currentAmount = 0
        if unbalance == 0:
            currentAmount = total_debit  # only need to get 1 side debit or credit since it's value will be equal anyway

        journal = Journal.objects.get(pk=journal_id)
        old_journal_amount = journal.total_amount
        journal.total_amount = currentAmount
        journal.save()

        if journal.batch:
            batch = Batch.objects.get(pk=journal.batch_id)
            batch.batch_amount = float(batch.batch_amount) - float(old_journal_amount) + float(currentAmount)
            batch.save()

        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
    except Exception as e:
        print(e)
        logging.error(traceback.format_exc())
    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))


def setProvisionalPostedToOpen(request):
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    fail = 0
    result = True
    try:
        provisional_posted = Batch.objects.filter(company_id=company_id, is_hidden=False,
                                                  batch_type=dict(TRANSACTION_TYPES)['GL'],
                                                  status=int(STATUS_TYPE_DICT['Prov. Posted']))
        if provisional_posted.count():
            for prov_posted in provisional_posted:
                prov_posted.status = STATUS_TYPE_DICT['Posted']
                prov_posted.save()
                if prov_posted.status == STATUS_TYPE_DICT['Posted']:
                    journal_list = Journal.objects.filter(is_hidden=False, batch_id=prov_posted.id,
                                                          company_id=company_id)
                    for journal in journal_list:
                        journal.status = STATUS_TYPE_DICT['Posted']
                        journal.update_date = datetime.datetime.today()
                        journal.save()
                else:
                    fail += 1
        if fail > 0:
            result = False
    except Exception as e:
        print(e)
        result = False
    return result


@login_required
# Reopen Batch with journal
def reopen_GL_batch(request, batch_id):
    with transactionlib.atomic():
        try:
            company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
            batch = Batch.objects.get(pk=batch_id)
            if batch.status == int(STATUS_TYPE_DICT['Prov. Posted']):
                batch.status = STATUS_TYPE_DICT['Open']
                batch.save()
                journal_list = Journal.objects.filter(is_hidden=False, batch_id=batch_id, company_id=company_id)\
                    .select_related('batch')
                for journal in journal_list:
                    journal.status = STATUS_TYPE_DICT['Open']
                    journal.save()
            else:
                last_posted_batch = Batch.objects.filter(is_hidden=0, status=2, company_id=company_id, batch_type=batch.batch_type) \
                    .annotate(int_posting_sequence=RawSQL('CAST(posting_sequence AS UNSIGNED)', params=[])) \
                    .order_by('int_posting_sequence').last()
                reopen_batch = Batch.objects.get(pk=batch_id)
                if last_posted_batch == reopen_batch:
                    # Reopen Batch
                    reopen_batch.status = int(STATUS_TYPE_DICT['Open'])
                    reopen_batch.posting_sequence = 0
                    post_status = False
                    messages.success(request, REOPEN_BATCH_SUCCESS % (reopen_batch.batch_no))
                    reopen_batch.save()

                    # Reopen Journals
                    reopen_journals = Journal.objects.filter(company_id=company_id, is_hidden=0, batch_id=reopen_batch.id)\
                        .select_related('batch').order_by('id')
                    closed = False
                    journal_item = reopen_journals.filter(status=STATUS_TYPE_DICT['Posted']).last()
                    if journal_item:
                        closing_jrn = Journal.objects.filter(is_hidden=False, company_id=company_id,
                                                            perd_year=journal_item.perd_year, perd_month=15,
                                                            batch__status=STATUS_TYPE_DICT['Posted'],
                                                            journal_type=journal_item.journal_type, source_type='GL-CL')\
                            .select_related('batch')
                        if closing_jrn:
                            closed = True

                    accounts_dict = {}
                    fail = False
                    # period_year = reopen_journals.first().perd_year
                    # period_month = reopen_journals.first().perd_month

                    # issue_from, number_of_month = get_latest_journal_info(period_year, period_month)

                    for reopen_journal in reopen_journals:
                        post_status = False
                        # if reopen_journal.source_type in ['GL-RV', 'AP-GL', 'AR-GL']:
                        issue_from, number_of_month = get_latest_journal_info(reopen_journal.perd_year, reopen_journal.perd_month)
                        # if reopen_journal.perd_month < period_month:
                        #     period_month = reopen_journal.perd_month
                        if reopen_journal.source_type not in ['GL-CV', 'GL-CL']:
                            result, accounts_dict = update_account_history(request, reopen_journal, True, accounts_dict, issue_from, number_of_month)
                            if not result:
                                fail = True
                                break
                        elif reopen_journal.source_type == 'GL-CL':
                            if batch.input_type == INPUT_TYPE_DICT['Manual Entry']:
                                send_manual_cl_batch(request, reopen_journal, True)
                        if reopen_journal.status is int(STATUS_TYPE_DICT['Auto Reverse Entry']):
                            reopen_journal.is_hidden = True
                            trxs = Transaction.objects.filter(journal_id=reopen_journal.id).select_related('journal')
                            for trx in trxs:
                                trx.is_hidden = True
                                trx.save()
                        else:
                            reopen_journal.status = int(STATUS_TYPE_DICT['Open'])

                        reopen_journal.save()
                    if not fail:
                        # update_next_acc_his_tr = threading.Thread(name='update_next_acc_his',
                        #                                             target=update_next_year_account_history,
                        #                                             args=(company_id, period_year, period_month, accounts_dict, ), daemon=False)
                        # update_next_acc_his_tr.start()
                        if closed:
                            update_retained_earning_tt = threading.Thread(name='update_retained_earning',
                                                                target=update_retained_earning,
                                                                args=(request, reopen_journals, True, ), daemon=False)
                            update_retained_earning_tt.start()
                    else:
                        transactionlib.set_rollback(True)
                        messages.error(request, POST_BATCH_FAILED % (batch.batch_no) + REFRESH_OR_GO_GET_SUPPORT)
                else:
                    messages.error(request, MESSAGE_ERROR_REOPEN)

        except Exception as e:
            print(e)
            fail = True
            transactionlib.set_rollback(True)
    
    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))


def get_latest_journal_info(current_year, current_month):
    if current_month > 12:
        current_month = 12
    issue_from = str(current_year) + '-' + str(current_month) + '-01'
    
    latest_journal = Journal.objects.filter(is_hidden=False,
                    journal_type=dict(
                        TRANSACTION_TYPES)['GL'],
                    # status=int(
                    #     STATUS_TYPE_DICT['Posted']),
                    error_entry=0,
                    ).exclude(source_type__in=['GL-CL', 'GL-CV']
                    ).order_by('-perd_year', '-perd_month').first()
    if latest_journal:
        if latest_journal.perd_month > 12:
            issue_to = str(latest_journal.perd_year) + '-12-01'
        else:
            issue_to = str(latest_journal.perd_year) + '-' + str(latest_journal.perd_month) + '-01'
    else:
        issue_to = issue_from

    issue_from = datetime.datetime.strptime(issue_from, '%Y-%m-%d')
    issue_to = datetime.datetime.strptime(issue_to, '%Y-%m-%d')
    diff = relativedelta(issue_to, issue_from)
    number_of_month = (diff.years * 12) + diff.months

    return issue_from, number_of_month


@login_required
def get_new_posting_sequence_number(request, batch):
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    last_posting_batch = Batch.objects.filter(
        is_hidden=0, status=STATUS_TYPE_DICT['Posted'], company_id=company_id, batch_type=batch.batch_type) \
        .annotate(int_posting_sequence=RawSQL('CAST(posting_sequence AS UNSIGNED)', params=[])) \
        .order_by('int_posting_sequence').last()
    if last_posting_batch is not None:
        new_posting_number = int(last_posting_batch.posting_sequence) + 1
    else:
        new_posting_number = 1
    # str_length = len(str(new_posting_number))
    # if str_length < 6:
    #     while str_length < 6:
    #         new_posting_number = '0' + str(new_posting_number)
    #         str_length += 1
    # else:
    #     new_posting_number = '0' + str(new_posting_number)

    return new_posting_number


@login_required
# @transactionlib.atomic
def send_GL_batch(request, batch_id, is_provisional):
    GL_CL_count = 0
    errors = []
    with transactionlib.atomic():
        try:
            company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
            gl_batch = Batch.objects.get(pk=batch_id)
            gl_batch.no_entries = Journal.objects.filter(is_hidden=False, batch_id=batch_id, company_id=company_id).count()
            gl_batch.save()
            journal_list = Journal.objects.filter(is_hidden=False,
                                                  status__in=(STATUS_TYPE_DICT['Open'],
                                                              STATUS_TYPE_DICT['Prov. Posted']),
                                                  batch_id=batch_id, company_id=company_id)\
                .select_related('batch')

            if int(is_provisional):
                # if setProvisionalPostedToOpen(request):
                gl_batch.status = STATUS_TYPE_DICT['Prov. Posted']
                gl_batch.save()
                journal_list.update(status=STATUS_TYPE_DICT['Prov. Posted'])
                messages.success(request, POST_BATCH_SUCCESS % (gl_batch.batch_no))
            else:
                reversed_journals = []
                journal_list_ids = []
                journal_list_ids = journal_list.filter(is_auto_reverse=False).values_list('id', flat=True)
                reversed_journals = journal_list.filter(is_auto_reverse=True).values_list('id', flat=True)

                all_transactions = Transaction.objects.filter(is_hidden=False, company_id=company_id,
                                                              journal_id__in=journal_list_ids,
                                                              journal__status__in=(int(STATUS_TYPE_DICT['Open']),
                                                                                   int(STATUS_TYPE_DICT['Prov. Posted'])))\
                    .select_related('journal', 'account')

                for journal_item in journal_list:
                    error_string = {}

                    sumdebit = sumcredit = 0
                    transaction_list = all_transactions.filter(journal_id=journal_item.id)

                    for trx in transaction_list:
                        if trx.functional_balance_type == BALANCE_TYPE_DICT['Debit']:
                            sumdebit += round_number(trx.functional_amount, 2)
                        else:
                            sumcredit += round_number(trx.functional_amount, 2)

                    if sumcredit > 0:
                        unbalance = round_number(abs(sumdebit - sumcredit), 2)
                    else:
                        unbalance = round_number(abs(sumdebit + sumcredit), 2)

                    # Skip unbalance if it is GL Opening Batch
                    if journal_item.source_type == 'GL-CV':
                        unbalance = 0

                    if unbalance > 0:
                        error_string['journal'] = journal_item.code
                        error_string['amount'] = unbalance
                        errors.append(error_string)

                    if journal_item.source_type == 'GL-CL' and journal_item.is_reversed_entry == False:
                        GL_CL_count += 1

                entry_count = gl_batch.no_entries

                if len(errors) == 0:
                    if len(reversed_journals) > 0:
                        reversed_journal_list = Journal.objects.filter(pk__in=reversed_journals)
                        reversed_journal_trxs_list = Transaction.objects.filter(is_hidden=0, company_id=company_id,
                                                                                journal_id__in=reversed_journals)
                        for reversed_journal in reversed_journal_list:
                            rv_journal = deepcopy(reversed_journal)
                            rv_journal.pk = None
                            jour_text = ''
                            if reversed_journal.document_number:
                                jour_text = reversed_journal.document_number
                            rv_journal.name = jour_text
                            rv_journal.code = str(entry_count + 1)
                            rv_journal.reference = 'REVERSING ENTRY'
                            rv_journal.document_number = jour_text + '-Reversed'
                            if reversed_journal.reverse_to_period_val == None:
                                reverse_to_period = add_one_month(reversed_journal.document_date)
                                reverse_to_period_val = str(reverse_to_period.year) + '-' + str(reverse_to_period.month) + '-01'
                            else:
                                reverse_to_period_val = reversed_journal.reverse_to_period_val.strftime("%Y-%m-%d")
                            rv_journal.document_date = reverse_to_period_val
                            rv_journal.posting_date = reverse_to_period_val
                            rv_journal.status = STATUS_TYPE_DICT['Auto Reverse Entry']
                            rv_journal.is_auto_reverse = False
                            rv_journal.reverse_to_period = None
                            rv_journal.reverse_to_period_val = None
                            rv_journal.perd_month = int(reversed_journal.perd_month) + 1 if reversed_journal.perd_month < 12 else 1
                            rv_journal.perd_year = reversed_journal.perd_year if reversed_journal.perd_month < 12 else int(reversed_journal.perd_year) + 1
                            rv_journal.save()
                            entry_count += 1
                            reversed_journal_trxs = []

                            reversed_journal_trxs = reversed_journal_trxs_list.filter(journal=reversed_journal)
                            # for rev_trx in reversed_journal_trxs_list:
                            #     if rev_trx.journal_id == reversed_journal.id:
                            #         reversed_journal_trxs.append(rev_trx)
                            for reversed_journal_trx in reversed_journal_trxs:
                                reversed_trx = deepcopy(reversed_journal_trx)
                                reversed_trx.pk = None
                                reversed_trx.transaction_date = rv_journal.document_date
                                reversed_trx.reference = 'REVERSING ENTRY'
                                reversed_trx.is_debit_account = (True, False)[reversed_journal_trx.is_debit_account]
                                reversed_trx.is_credit_account = (False, True)[reversed_journal_trx.is_debit_account]
                                reversed_trx.functional_balance_type = (BALANCE_TYPE_DICT['Debit'],
                                                                        BALANCE_TYPE_DICT['Credit'])[
                                    reversed_journal_trx.is_debit_account]
                                reversed_trx.journal_id = rv_journal.id
                                reversed_trx.save()
                        # New jounal_list with revered entries added
                        # journal_list = Journal.objects.filter(is_hidden=False, batch_id=batch_id,
                        #                                       company_id=company_id)\
                        #     .select_related('batch').order_by('id')
                    journal_list = None
                    journal_list = Journal.objects.none()
                    journal_list = Journal.objects.filter(is_hidden=False,
                                                  status__in=(STATUS_TYPE_DICT['Open'],
                                                              STATUS_TYPE_DICT['Prov. Posted'],
                                                              STATUS_TYPE_DICT['Auto Reverse Entry']),
                                                  batch_id=batch_id, company_id=company_id)\
                                        .select_related('batch').order_by('id')
                    if GL_CL_count >= int(gl_batch.no_entries):
                        if gl_batch.input_type == INPUT_TYPE_DICT['Manual Entry']:
                            post_status = True
                            for journal_item in journal_list:
                                if send_manual_cl_batch(request, journal_item, False):
                                    send_GL_invoice(request, journal_item, int(is_provisional))
                                else:
                                    post_status = False
                                    transactionlib.set_rollback(True)
                            if post_status:
                                gl_batch.status = int(STATUS_TYPE_DICT['Posted'])
                                messages.success(request, POST_BATCH_SUCCESS % (gl_batch.batch_no))
                        else:
                            for journal_item in journal_list:
                                send_GL_invoice(request, journal_item, int(is_provisional))
                            Close_Accounts = C_Closing(request).closeAccounts(batch_id)
                            if not Close_Accounts[0]:
                                messages.error(request, Close_Accounts[1])
                                gl_batch.status = int(STATUS_TYPE_DICT['Open'])
                                transactionlib.set_rollback(True)
                            else:
                                gl_batch.status = int(STATUS_TYPE_DICT['Posted'])
                                messages.success(request, POST_BATCH_SUCCESS % (gl_batch.batch_no))
                    elif GL_CL_count > 0 and GL_CL_count < gl_batch.no_entries:
                        gl_batch.status = int(STATUS_TYPE_DICT['Open'])
                        messages.error(request, CORRUPT_DATA + '<br />' + POST_BATCH_FAILED % (
                            gl_batch.batch_no) + '<br />' + CLOSING_BATCH_CORRUPT)
                    else:
                        post_status = True
                        closed = False
                        journal_item = journal_list.filter(status__in=(STATUS_TYPE_DICT['Open'],
                                                                       STATUS_TYPE_DICT['Prov. Posted'])).last()
                        if journal_item:
                            closing_jrn = Journal.objects.filter(is_hidden=False, company_id=company_id,
                                                                 perd_year=journal_item.perd_year, perd_month=15,
                                                                 batch__status=STATUS_TYPE_DICT['Posted'],
                                                                 journal_type=journal_item.journal_type, source_type='GL-CL')\
                                .select_related('batch')
                            if closing_jrn:
                                closed = True

                        accounts_dict = {}
                        # period_year = journal_list.first().perd_year
                        # period_month = journal_list.first().perd_month

                        # issue_from, number_of_month = get_latest_journal_info(period_year, period_month)

                        for journal_item in journal_list:
                            # period_year_opening = journal_item.perd_year
                            # next_year_opening = period_year_opening + 1
                            if journal_item.source_type == 'GL-CV':
                                if update_acc_history_glcv(request, journal_item):
                                    send_GL_invoice(request, journal_item, int(is_provisional))
                                else:
                                    post_status = False
                                    break
                            else:
                                # if journal_item.source_type in ['GL-RV', 'AP-GL', 'AR-GL']:
                                issue_from, number_of_month = get_latest_journal_info(journal_item.perd_year, journal_item.perd_month)
                                # if journal_item.perd_month < period_month:
                                #     period_month = journal_item.perd_month
                                result, accounts_dict = update_account_history(request, journal_item, False, accounts_dict, issue_from, number_of_month)
                                    # get_balanced_acc(request, period_year_opening, next_year_opening)
                                if result:
                                    send_GL_invoice(request, journal_item, int(is_provisional))
                                else:
                                    post_status = False
                                    break
                                    

                        if post_status:
                            gl_batch.status = int(STATUS_TYPE_DICT['Posted'])
                            messages.success(request, POST_BATCH_SUCCESS % (gl_batch.batch_no))

                            # update_next_acc_his_t = threading.Thread(name='update_next_acc_his',
                            #                                         target=update_next_year_account_history,
                            #                                         args=(company_id, period_year, period_month, accounts_dict, ), daemon=False)
                            # update_next_acc_his_t.start()

                            if closed:
                                update_retained_earning_t = threading.Thread(name='update_retained_earning',
                                                                    target=update_retained_earning,
                                                                    args=(request, journal_list, ), daemon=False)
                                update_retained_earning_t.start()
                        else:
                            transactionlib.set_rollback(True)
                            messages.error(request, POST_BATCH_FAILED % (gl_batch.batch_no) + REFRESH_OR_GO_GET_SUPPORT)
                    if gl_batch.status == int(STATUS_TYPE_DICT['Posted']):
                        gl_batch.posting_sequence = get_new_posting_sequence_number(request, gl_batch)
                    else:
                        gl_batch.posting_sequence = 0
                    gl_batch.save()

                else:
                    messages.error(request, POST_BATCH_FAILED % (gl_batch.batch_no) + UNBALANCE_JOURNAL)
                    for err in errors:
                        messages.error(request, UNBALANCE_INFO % (err['journal'], err['amount']))

        except Exception as e:
            print(e)
            post_status = False
            transactionlib.set_rollback(True)
            # logging.error(traceback.format_exc())
    
    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))


def update_retained_earning(request, journal_list, reopen=False):
    time.sleep(4)
    result = True
    with transactionlib.atomic():
        try:
            journal = journal_list[0]
            company_id = journal.company_id
            company = Company.objects.get(pk=company_id)
            retained_earning_account = Account.objects.filter(account_type=ACCOUNT_TYPE_DICT['Retained Earning'],
                                                            is_hidden=0,
                                                            is_active=True,
                                                            company_id=company_id)
            if retained_earning_account.count() > 1:
                retained_earning_account = retained_earning_account.filter(name__icontains='RETAINED EARNING').first()
                
            elif retained_earning_account.count() == 1:
                retained_earning_account = retained_earning_account.first()
                
            account_history_list = AccountHistory.objects.filter(is_hidden=0, company_id=company_id,
                                                                period_year=journal.perd_year,
                                                                period_month__contains='CLS',
                                                                account_id=retained_earning_account.id) \
                .exclude(source_currency_id__isnull=True)\
                .select_related('account')

            j_ids = []
            for journal in journal_list:
                j_ids.append(journal.id)
            transaction_list = Transaction.objects.filter(company_id=company_id, is_hidden=0, journal_id__in=j_ids)\
                .select_related('journal', 'account')
            filtered_list = transaction_list.filter(account__account_type=ACCOUNT_TYPE_DICT['Income Statement'])
            for transaction in filtered_list:
                trx_account = transaction.account
                for account_history in account_history_list:
                    if reopen:
                        if account_history.source_currency_id == transaction.currency_id or account_history.source_currency_id == company.currency_id:
                            if transaction.is_debit_account:
                                retained_earning_account.debit_amount = round_number(
                                    retained_earning_account.debit_amount) - round_number(transaction.functional_amount)
                                account_history.functional_debit_amount = round_number(
                                    account_history.functional_debit_amount) - round_number(transaction.functional_amount)
                                account_history.functional_net_change = round_number(
                                    account_history.functional_net_change) - round_number(transaction.functional_amount)
                            else:
                                retained_earning_account.credit_amount = round_number(
                                    retained_earning_account.credit_amount) + round_number(transaction.functional_amount)
                                account_history.functional_credit_amount = round_number(
                                    account_history.functional_credit_amount) + round_number(transaction.functional_amount)
                                account_history.functional_net_change = round_number(
                                    account_history.functional_net_change) + round_number(transaction.functional_amount)
                            account_history.functional_end_balance = round_number(
                                account_history.functional_begin_balance) + round_number(account_history.functional_net_change)

                            if account_history.source_currency_id == transaction.currency_id:
                                if transaction.is_debit_account:
                                    account_history.source_debit_amount = round_number(account_history.source_debit_amount) - round_number(transaction.total_amount)
                                    account_history.source_net_change = round_number(account_history.source_net_change) - round_number(transaction.total_amount)
                                else:
                                    account_history.source_credit_amount = round_number(account_history.source_credit_amount) + round_number(transaction.total_amount)
                                    account_history.source_net_change = round_number(account_history.source_net_change) + round_number(transaction.total_amount)
                                account_history.source_end_balance = round_number(account_history.source_begin_balance) + \
                                    round_number(account_history.source_net_change)

                            account_history.update_date = datetime.datetime.today()
                            account_history.save()

                            retained_earning_account.update_date = datetime.datetime.today()
                            retained_earning_account.save()
                        else:
                            continue
                    else:
                        if account_history.source_currency_id == transaction.currency_id or account_history.source_currency_id == company.currency_id:
                            if transaction.is_debit_account:
                                retained_earning_account.debit_amount = round_number(
                                    retained_earning_account.debit_amount) + round_number(transaction.functional_amount)
                                account_history.functional_debit_amount = round_number(
                                    account_history.functional_debit_amount) + round_number(transaction.functional_amount)
                                account_history.functional_net_change = round_number(
                                    account_history.functional_net_change) + round_number(transaction.functional_amount)
                            else:
                                retained_earning_account.credit_amount = round_number(
                                    retained_earning_account.credit_amount) - round_number(transaction.functional_amount)
                                account_history.functional_credit_amount = round_number(
                                    account_history.functional_credit_amount) - round_number(transaction.functional_amount)
                                account_history.functional_net_change = round_number(
                                    account_history.functional_net_change) - round_number(transaction.functional_amount)
                            account_history.functional_end_balance = round_number(
                                account_history.functional_begin_balance) + round_number(account_history.functional_net_change)

                            if account_history.source_currency_id == transaction.currency_id:
                                if transaction.is_debit_account:
                                    account_history.source_debit_amount = round_number(account_history.source_debit_amount) + round_number(transaction.total_amount)
                                    account_history.source_net_change = round_number(account_history.source_net_change) + round_number(transaction.total_amount)
                                else:
                                    account_history.source_credit_amount = round_number(account_history.source_credit_amount) - round_number(transaction.total_amount)
                                    account_history.source_net_change = round_number(account_history.source_net_change) - round_number(transaction.total_amount)
                                account_history.source_end_balance = round_number(account_history.source_begin_balance) + \
                                    round_number(account_history.source_net_change)

                            account_history.update_date = datetime.datetime.today()
                            account_history.save()

                            retained_earning_account.update_date = datetime.datetime.today()
                            retained_earning_account.save()
                        else:
                            continue

                    # update next year
                    src_eb = account_history.source_end_balance
                    func_eb = account_history.functional_end_balance
                    period_year = journal.perd_year
                    for year in range(period_year + 1, period_year + 2):
                        if year > period_year:
                            last_day = None
                            for i in range(12):
                                _, num_days = calendar.monthrange(year, i + 1)
                                last_day = datetime.date(year, i + 1, num_days)
                                try:
                                    next_history = AccountHistory.objects.select_related('account', 'source_currency').filter(
                                        is_hidden=False, company_id=company_id,
                                        account_id=retained_earning_account.id,
                                        period_month=i + 1,
                                        period_year=year,
                                        source_currency_id=account_history.source_currency_id)\
                                        .exclude(source_currency_id__isnull=True).first()
                                    next_history.source_begin_balance = src_eb
                                    next_history.source_end_balance = round_number(next_history.source_begin_balance) + round_number(next_history.source_net_change)
                                    next_history.functional_begin_balance = func_eb
                                    next_history.functional_end_balance = round_number(
                                        next_history.functional_begin_balance) + round_number(next_history.functional_net_change)
                                    next_history.save()
                                    src_eb = next_history.source_end_balance
                                    func_eb = next_history.functional_end_balance
                                except Exception as e:
                                    period = i + 1
                                    create_account_history(company_id, year, period, last_day, retained_earning_account.id,
                                                        account_history.source_currency_id, src_eb, company.currency_id,
                                                        func_eb)

                            period_ADJ = AccountHistory.objects.select_related('account', 'source_currency').filter(
                                is_hidden=False, company_id=company_id,
                                account_id=retained_earning_account.id,
                                period_month__in=['ADJ'],
                                period_year=year,
                                source_currency_id=account_history.source_currency_id).exclude(source_currency_id__isnull=True)
                            if period_ADJ:
                                for ADJ_CLS in period_ADJ:
                                    ADJ_CLS.source_begin_balance = src_eb
                                    ADJ_CLS.source_end_balance = round_number(
                                        ADJ_CLS.source_begin_balance) + round_number(ADJ_CLS.source_net_change)
                                    ADJ_CLS.functional_begin_balance = func_eb
                                    ADJ_CLS.functional_end_balance = round_number(ADJ_CLS.functional_begin_balance) + \
                                        round_number(ADJ_CLS.functional_net_change)
                                    ADJ_CLS.save()
                            else:
                                create_account_history(company_id, year, 'ADJ', last_day, retained_earning_account.id,
                                                    account_history.source_currency_id, src_eb,
                                                    company.currency_id, func_eb)

                            period_CLS = AccountHistory.objects.select_related('account', 'source_currency').filter(
                                is_hidden=False, company_id=company_id,
                                account_id=retained_earning_account.id,
                                period_month__in=['CLS'],
                                period_year=year,
                                source_currency_id=account_history.source_currency_id).exclude(source_currency_id__isnull=True)
                            if period_CLS:
                                for ADJ_CLS in period_CLS:
                                    ADJ_CLS.source_begin_balance = src_eb
                                    ADJ_CLS.source_end_balance = round_number(
                                        ADJ_CLS.source_begin_balance) + round_number(ADJ_CLS.source_net_change)
                                    ADJ_CLS.functional_begin_balance = func_eb
                                    ADJ_CLS.functional_end_balance = round_number(ADJ_CLS.functional_begin_balance) + \
                                        round_number(ADJ_CLS.functional_net_change)
                                    ADJ_CLS.save()
                            else:
                                create_account_history(company_id, year, 'CLS', last_day, retained_earning_account.id,
                                                    account_history.source_currency_id, src_eb,
                                                    company.currency_id, func_eb)

            # reset account history to zero
            for transaction in filtered_list:
                trx_account = transaction.account
                trx_history_list = AccountHistory.objects.select_related('account').filter(
                    is_hidden=False, company_id=company_id,
                    period_year=journal.perd_year,
                    period_month__contains='CLS',
                    account_id=trx_account.id) \
                    .exclude(source_currency_id__isnull=True)
                for period_CLS in trx_history_list:
                    period_CLS.source_net_change = -1 * period_CLS.source_begin_balance
                    period_CLS.source_end_balance = 0
                    period_CLS.functional_net_change = -1 * period_CLS.functional_begin_balance
                    period_CLS.functional_end_balance = 0
                    period_CLS.update_date = datetime.datetime.today()
                    period_CLS.update_by = request.user.id
                    period_CLS.save()

                    # update next year
                    src_eb = period_CLS.source_end_balance
                    func_eb = period_CLS.functional_end_balance
                    period_year = journal.perd_year
                    for _year in range(period_year + 1, period_year + 2):
                        if _year > period_year:
                            last_day = None
                            for i in range(12):
                                _, num_days = calendar.monthrange(_year, i + 1)
                                last_day = datetime.date(_year, i + 1, num_days)
                                try:
                                    CLS_next_history = AccountHistory.objects.select_related('account', 'source_currency').filter(
                                        is_hidden=False, company_id=company_id, account_id=trx_account.id,
                                        period_month=i + 1, period_year=_year, source_currency_id=period_CLS.source_currency_id)\
                                            .exclude(source_currency_id__isnull=True).first()

                                    CLS_next_history.source_begin_balance = src_eb
                                    CLS_next_history.source_end_balance = round_number(
                                        CLS_next_history.source_begin_balance) + round_number(CLS_next_history.source_net_change)
                                    CLS_next_history.functional_begin_balance = func_eb
                                    CLS_next_history.functional_end_balance = round_number(CLS_next_history.functional_begin_balance) + \
                                        round_number(CLS_next_history.functional_net_change)
                                    CLS_next_history.save()
                                    src_eb = CLS_next_history.source_end_balance
                                    func_eb = CLS_next_history.functional_end_balance
                                except Exception as e:
                                    _period = i + 1
                                    create_account_history(company_id, _year, _period, last_day, trx_account.id,
                                                        period_CLS.source_currency_id,
                                                        src_eb, company.currency_id, func_eb)

                            next_period_ADJ = AccountHistory.objects.select_related('account', 'source_currency').filter(
                                is_hidden=False, company_id=company_id,
                                account_id=trx_account.id,
                                period_month__in=['ADJ'],
                                period_year=_year,
                                source_currency_id=period_CLS.source_currency_id).exclude(source_currency_id__isnull=True)
                            if next_period_ADJ:
                                for next_ADJ_CLS in next_period_ADJ:
                                    next_ADJ_CLS.source_begin_balance = src_eb
                                    next_ADJ_CLS.source_end_balance = round_number(
                                        next_ADJ_CLS.source_begin_balance) + round_number(next_ADJ_CLS.source_net_change)
                                    next_ADJ_CLS.functional_begin_balance = func_eb
                                    next_ADJ_CLS.functional_end_balance = round_number(next_ADJ_CLS.functional_begin_balance) + \
                                        round_number(next_ADJ_CLS.functional_net_change)
                                    next_ADJ_CLS.save()
                            else:
                                create_account_history(company_id, _year, 'ADJ', last_day, trx_account.id,
                                                    period_CLS.source_currency_id, src_eb,
                                                    company.currency_id, func_eb)

                            next_period_CLS = AccountHistory.objects.select_related('account', 'source_currency').filter(
                                is_hidden=False, company_id=company_id,
                                account_id=trx_account.id,
                                period_month__in=['CLS'],
                                period_year=_year,
                                source_currency_id=period_CLS.source_currency_id).exclude(source_currency_id__isnull=True)
                            if next_period_CLS:
                                for next_ADJ_CLS in next_period_CLS:
                                    next_ADJ_CLS.source_begin_balance = src_eb
                                    next_ADJ_CLS.source_end_balance = round_number(
                                        next_ADJ_CLS.source_begin_balance) + round_number(next_ADJ_CLS.source_net_change)
                                    next_ADJ_CLS.functional_begin_balance = func_eb
                                    next_ADJ_CLS.functional_end_balance = round_number(next_ADJ_CLS.functional_begin_balance) + \
                                        round_number(next_ADJ_CLS.functional_net_change)
                                    next_ADJ_CLS.save()
                            else:
                                create_account_history(company_id, _year, 'CLS', last_day, trx_account.id,
                                                    period_CLS.source_currency_id, src_eb,
                                                    company.currency_id, func_eb)

        except Exception as e:
            print(e)
            result = False
            transactionlib.set_rollback(True)

    return result

@login_required
def UnpostedBatch__asJson(request):
    try:
        draw = request.POST['draw']
        start = request.POST['start']
        length = request.POST['length']
        search = request.POST['search[value]']
        company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
        batch_type = request.POST['batch_type']
        source_ledger = request.POST['source_ledger']
        input_type_dict = dict(INPUT_TYPES)
        status_type_dict = dict(STATUS_TYPE)

        list_filter = Batch.objects.filter(company_id=company_id, is_hidden=False,
                                           batch_type=batch_type,
                                           status=int(STATUS_TYPE_DICT['Open']))

        if 'is_post_batches' in request.POST and int(batch_type) == dict(TRANSACTION_TYPES)['GL']:
            pass
        else:
            list_filter = list_filter.filter(source_ledger=source_ledger)
        records_total = list_filter.count()

        if search:
            list_filter = list_filter. \
                filter(Q(batch_no__icontains=search) |
                       Q(description__icontains=search) |
                       Q(batch_amount__icontains=search))

        # filtered data
        records_filtered = list_filter.count()

        # Order by list_limit base on order_dir and order_column
        order_column = request.POST['order[0][column]']
        column_name = ""
        if order_column == "0":
            column_name = "id"
        elif order_column == "1":
            column_name = "description"
        elif order_column == "2":
            column_name = "input_type"
        elif order_column == "3":
            column_name = "status"
        elif order_column == "4":
            column_name = "batch_type"
        elif order_column == "5":
            column_name = "batch_amount"
        order_dir = request.POST['order[0][dir]']

        list = []
        if order_dir == "asc":
            list = list_filter.order_by(column_name)[int(start):(int(start) + int(length))]
        elif order_dir == "desc":
            list = list_filter.order_by('-' + column_name)[int(start):(int(start) + int(length))]
        # Create data list
        array = []
        for field in list:
            batch_functional_amount = batch_source_amount = 0
            transaction_list = Transaction.objects.filter(is_hidden=0, company_id=company_id,
                                                          journal__batch_id=field.id,
                                                          journal__status__in=(int(STATUS_TYPE_DICT['Open']),
                                                                               int(STATUS_TYPE_DICT['Posted'])))
            if int(batch_type) == dict(TRANSACTION_TYPES)['GL']:
                transactions = transaction_list.filter(is_debit_account=True)
                if not transactions:
                    transactions = transaction_list.filter(is_credit_account=True)
            else:
                transactions = transaction_list

            if transactions:
                for transaction in transactions:
                    src_amt = (float(round_number(float(transaction.total_amount), 2)),
                               float(round_number(float(transaction.functional_amount) / float(transaction.exchange_rate), 2)))[
                        transaction.total_amount <= 0]
                    if int(batch_type) == dict(TRANSACTION_TYPES)['GL']:
                        batch_functional_amount += float(round_number(float(transaction.functional_amount), 2))
                        batch_source_amount += src_amt
                    else:
                        if transaction.journal.document_type and transaction.journal.document_type == \
                                DOCUMENT_TYPE_DICT['Credit Note']:
                            batch_functional_amount -= float(round_number(float(transaction.functional_amount), 2))
                            batch_source_amount -= src_amt
                        else:
                            batch_functional_amount += float(round_number(
                                float(transaction.functional_amount), 2))
                            batch_source_amount += src_amt
            batch_source_amount = (float(round_number(math.fabs(batch_source_amount), 2)), 0)[
                field.status == int(STATUS_TYPE_DICT['Deleted'])]
            batch_functional_amount = (float(round_number(math.fabs(batch_functional_amount), 2)), 0)[
                field.status == int(STATUS_TYPE_DICT['Deleted'])]
            data = {}
            data["id"] = str(field.id)
            data["status"] = status_type_dict.get(str(field.status))
            data["batch_num"] = str(field.batch_no)
            data["batch_desc"] = field.description
            data["input_type"] = input_type_dict.get(field.input_type) if field.input_type else ''
            data["source_ledger"] = field.source_ledger
            if field.batch_type in (dict(TRANSACTION_TYPES)['AR Invoice'], dict(TRANSACTION_TYPES)['AR Receipt']):
                data["source_ledger"] = 'AR'
            elif field.batch_type in (dict(TRANSACTION_TYPES)['AP Invoice'], dict(TRANSACTION_TYPES)['AP Payment']):
                data["source_ledger"] = 'AP'
            else:
                data["source_ledger"] = 'GL'
            batch_amount = batch_functional_amount if batch_functional_amount > 0 else 0
            data["batch_amount"] = intcomma("%.2f" % batch_amount)
            array.append(data)
        content = {"draw": draw, "data": array, "recordsTotal": records_total, "recordsFiltered": records_filtered}

        json_content = json.dumps(content, ensure_ascii=False)
        return HttpResponse(json_content, content_type='application/json')

    except Exception as e:
        print(e)
        logger.error(traceback.format_exc())
        return HttpResponseNotFound


@login_required
def create_reverse_batch(request):
    result = True
    status = None
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    try:
        source_batch_id = request.POST.get('source_batch_id')
        reverse_batch_id = request.POST.get('reverse_batch_id')
        reverse_type = request.POST.get('reverse_type')
        batch_desc = request.POST.get('batch_desc')
        entry_desc = request.POST.get('entry_desc')
        journal_id_reverse = request.POST.get('journal_id_reverse')
        source_batch = Batch.objects.get(pk=source_batch_id, company_id=company_id, is_hidden=False)
        source_journals = Journal.objects.filter(batch_id=source_batch.id, company_id=company_id,
                                                 is_hidden=False).order_by('id')
        journals_count = source_journals.count()
        if int(reverse_type) == 1:
            source_journals = source_journals.get(pk=journal_id_reverse, company_id=company_id, is_hidden=False)
            journals_count = 1
        source_transactions = Transaction.objects.filter(company_id=company_id, is_hidden=False,
                                                         journal__batch_id=source_batch.id)
        total_records = journals_count + source_transactions.count() + 1
        fail = 0

        source_batch = Batch.objects.get(pk=reverse_batch_id, company_id=company_id, is_hidden=False)
        try:
            reverse_batch = deepcopy(source_batch)
            reverse_batch.description = batch_desc
            reverse_batch.update_by = request.user.id
            reverse_batch.save()
        except Exception as e:
            print(e)
            fail += 1

        idx = 1
        if int(reverse_type) == 1:
            fail += create_entry(request, reverse_batch, source_journals, entry_desc, idx)
        else:
            for source_jounal in source_journals:
                fail += create_entry(request, reverse_batch, source_jounal, entry_desc, idx)
                idx += 1

        if fail < total_records:
            status = REVERSE_TRANSACTION_SUCCESS % (reverse_batch.batch_no)
        else:
            result = False
            status = REVERSE_TRANSACTION_FAILED % (source_batch.batch_no) + REFRESH_OR_GO_GET_SUPPORT

    except Exception as e:
        print('EXCEPTION_JOURNAL_REVERSE', e)
        result = False
        status = 'EXCEPTION_JOURNAL_REVERSE'

    content = {"result": result, "status": status}
    return HttpResponse(json.dumps(content, ensure_ascii=False), content_type='application/json')


def create_entry(request, batch, entries, entry_desc, p_idx):
    fail = 0
    try:
        company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0

        try:
            reverse_jounal = deepcopy(entries)
            reverse_jounal.id = None
            reverse_jounal.status = (int(STATUS_TYPE_DICT['Open']),
                                     entries.status)[entries.status == int(STATUS_TYPE_DICT['Auto Reverse Entry'])]
            reverse_jounal.name = entry_desc
            reverse_jounal.batch_id = batch.id
            reverse_jounal.create_date = datetime.datetime.now()
            reverse_jounal.update_by = request.user.id
            # batch.no_entries += (1, 0)[entries.status == int(STATUS_TYPE_DICT['Auto Reverse Entry'])]
            batch.batch_amount += entries.total_amount

            old_journals = Journal.objects.filter(batch_id=batch.id, is_hidden=False)
            entry_no = 1
            if old_journals.count():
                sort_journals = sorted(old_journals, key=lambda Journal: int(Journal.code))
                last_entry = sort_journals[-1]
                entry_no = int(last_entry.code) + 1
            if old_journals.count():
                batch.no_entries = old_journals.count() + 1
            else:
                batch.no_entries = 1
            batch.save()

            if int(batch.no_entries) > 0:
                reverse_jounal.code = str(entry_no)
            else:
                reverse_jounal.code = str(p_idx)
            reverse_jounal.is_auto_reverse = False
            reverse_jounal.is_reversed_entry = True
            reverse_jounal.save()

            source_transactions = Transaction.objects.filter(company_id=company_id, is_hidden=False,
                                                             journal_id=entries.id)
            for source_transaction in source_transactions:
                try:
                    reverse_transaction = deepcopy(source_transaction)
                    reverse_transaction.id = None
                    reverse_transaction.is_debit_account = (True, False)[source_transaction.is_debit_account == True]
                    reverse_transaction.is_credit_account = not reverse_transaction.is_debit_account
                    reverse_transaction.journal_id = reverse_jounal.id
                    reverse_transaction.create_date = datetime.datetime.now()
                    reverse_transaction.update_by = request.user.id
                    reverse_transaction.related_invoice_id = entries.id
                    reverse_transaction.functional_balance_type = (BALANCE_TYPE_DICT['Debit'],
                                                                   BALANCE_TYPE_DICT['Credit'])[
                        source_transaction.functional_balance_type == BALANCE_TYPE_DICT['Debit']]
                    reverse_transaction.save()
                except Exception as e:
                    print(e)
                    fail += 1
        except Exception as e:
            print(e)
            fail += 1

    except Exception as e:
        print(e)

    return fail


def new_empty_batch(request):
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    company = Company.objects.get(pk=company_id)
    source_batch_id = request.POST.get('batch_id')
    source_batch_type = request.POST.get('batch_type')
    content = {"batch_id": None, "batch_no": None, "batch_desc": None, "batch_type": None}
    try:
        source_batch_source_ledger = None
        try:
            source_batch = Batch.objects.get(pk=source_batch_id, is_hidden=False, company_id=company_id)
            source_batch_source_ledger = source_batch.source_ledger
        except Exception as e:
            print(e)
        batch = Batch()
        batch.batch_no = generate_batch_number(company_id, source_batch_type)
        batch.description = 'REVERSE BATCH'
        batch.batch_type = source_batch_type
        batch.status = int(STATUS_TYPE_DICT['Open'])
        batch.input_type = INPUT_TYPE_DICT['Generated']
        batch.company_id = company_id
        batch.currency_id = company.currency_id
        batch.related_batch_id = source_batch_id
        batch.update_by = request.user.id
        batch.source_ledger = source_batch_source_ledger
        batch.save()
        content = {"batch_id": batch.id,
                   "batch_no": batch.batch_no,
                   "batch_desc": batch.description,
                   "batch_type": batch.batch_type}
    except Exception as e:
        print(e)

    return HttpResponse(json.dumps(content, ensure_ascii=False), content_type='application/json')


def delete_empty_batch(request):
    try:
        company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
        source_batch_type = request.POST.get('batch_type')
        today = datetime.datetime.today()
        try:
            empty_batches = Batch.objects.filter(create_date=today, no_entries=0, batch_type=source_batch_type,
                                                 is_hidden=False, company_id=company_id)
            if empty_batches:
                for batch in empty_batches:
                    batch.delete()
                content = {"message": 'Deleted'}
            else:
                content = {"message": 'No batch found'}
        except Exception as e:
            print(e)
            content = {"message": 'Error'}

    except Exception as e:
        print(e)

    return HttpResponse(json.dumps(content, ensure_ascii=False), content_type='application/json')


def update_acc_history_glcv(request, journal):
    result = True
    with transactionlib.atomic():
        try:
            company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
            company = Company.objects.get(pk=company_id)
            period_year = journal.perd_year
            if period_year == 0:
                period_year = journal.document_date.year
            period_month = journal.perd_month
            if period_month == 0:
                period_month_str = str(journal.document_date.month)
            elif period_month == 14:
                period_month_str = 'ADJ'
            elif period_month == 15:
                period_month_str = 'CLS'
            else:
                period_month_str = str(period_month)

            # year_list = AccountHistory.objects.filter(is_hidden=0, company_id__in=[company_id, None]).values(
            #     'period_year').distinct()

            transaction_list = Transaction.objects.filter(company_id=company_id, is_hidden=0, journal_id=journal.id)\
                .select_related('journal', 'account')

            # for trans_reset in transaction_list:
            account_history_list_reset = AccountHistory.objects.select_related('account').filter(
                is_hidden=False, company_id=company_id,
                account_id__in=transaction_list.values_list('account_id', flat=True), period_year=period_year,
                period_month=period_month)

            account_history_list_reset.update(functional_debit_amount=0, functional_credit_amount=0,
                                              source_debit_amount=0, source_credit_amount=0,
                                              source_net_change=0, functional_net_change=0)

            for transaction in transaction_list:
                account = transaction.account

                # get 12 period record of that account for current year
                account_history_list = AccountHistory.objects.select_related('account', 'source_currency', 'functional_currency').filter(
                    is_hidden=False, company_id=company_id,
                    account_id=account.id, period_year=period_year,
                    source_currency_id=transaction.currency_id,
                    functional_currency_id=company.currency_id).exclude(source_currency_id__isnull=True)

                # whenever an Account got update, it will generate 12 record for that year + ADJ + CLS
                period_list = list(map(str, list(range(1, 13))))
                period_list.extend(['ADJ', 'CLS'])

                AccountHistoryLengthValid = True
                account_history_list_count = account_history_list.count()
                if account_history_list_count < 14:
                    period_month_list = []
                    for account_history in account_history_list:
                        period_month_list.append(account_history.period_month)

                    for i in period_list:
                        if (i not in period_month_list):
                            try:
                                i_int = int(i)
                            except Exception as e:
                                print(e)
                                i_int = 12
                            _, num_days = calendar.monthrange(period_year, i_int)
                            last_day = datetime.date(period_year, i_int, num_days)
                            create_account_history(company_id, period_year, i, last_day, account.id,
                                                   transaction.currency_id, 0, company.currency_id, 0)
                elif account_history_list_count > 14:
                    period_month_list = []
                    for account_history in account_history_list:
                        period_month_list.append(account_history.period_month)
                    messages.error(request, UNEXPECTED_ACCOUNT_HISTORY_LENGTH)
                    AccountHistoryLengthValid = False

                if AccountHistoryLengthValid:
                    # get currenct month AccountHistory
                    account_history_list = AccountHistory.objects.select_related('account', 'source_currency').filter(
                        is_hidden=False, company_id=company_id,
                        account_id=account.id,
                        period_month=period_month_str,
                        period_year=period_year, source_currency_id=transaction.currency_id).exclude(source_currency_id__isnull=True)

                    for account_history in account_history_list:
                        if account_history.source_currency_id == transaction.currency_id or account_history.source_currency_id == company.currency_id:
                            if transaction.is_debit_account:
                                account.debit_amount = round_number(account.debit_amount) + round_number(transaction.functional_amount)
                                account_history.functional_debit_amount = round_number(
                                    account_history.functional_debit_amount) + round_number(transaction.functional_amount)
                                account_history.functional_net_change = round_number(
                                    account_history.functional_net_change) + round_number(transaction.functional_amount)
                            else:
                                account.credit_amount = round_number(account.credit_amount) - round_number(transaction.functional_amount)
                                account_history.functional_credit_amount = round_number(
                                    account_history.functional_credit_amount) - round_number(transaction.functional_amount)
                                account_history.functional_net_change = round_number(
                                    account_history.functional_net_change) - round_number(transaction.functional_amount)
                            account_history.functional_end_balance = round_number(account_history.functional_begin_balance) + \
                                round_number(account_history.functional_net_change)

                            if account_history.source_currency_id == transaction.currency_id:
                                if transaction.is_debit_account:
                                    account_history.source_debit_amount = round_number(
                                        account_history.source_debit_amount) + round_number(transaction.total_amount)
                                    account_history.source_net_change = round_number(account_history.source_net_change) + round_number(transaction.total_amount)
                                else:
                                    account_history.source_credit_amount = round_number(
                                        account_history.source_credit_amount) - round_number(transaction.total_amount)
                                    account_history.source_net_change = round_number(account_history.source_net_change) - round_number(transaction.total_amount)
                                account_history.source_end_balance = round_number(
                                    account_history.source_begin_balance) + round_number(account_history.source_net_change)

                            account_history.update_date = datetime.datetime.today()
                            account_history.update_by = request.user.id
                            account_history.save()

                            account.update_date = datetime.datetime.today()
                            account.update_by = request.user.id
                            account.save()
                        else:
                            continue

        except Exception as e:
            print(e)
            result = False
            transactionlib.set_rollback(True)
    return result


def update_next_year_account_history(company_id, period_year, period_month, accounts_dict):
    result = True
    time.sleep(2)

    if period_month == 14:
        period_month_str = 'ADJ'
    elif period_month == 15:
        period_month_str = 'CLS'
    else:
        period_month_str = str(period_month)

    with transactionlib.atomic():
        try:
            company = Company.objects.get(pk=company_id)
            acc_ids = []
            accounts_list = list(accounts_dict.values())
            for item in accounts_list:
                acc_id = int(item.split('-')[0])
                if acc_id not in acc_ids:
                    acc_ids.append(int(acc_id))

            all_histories = AccountHistory.objects.filter(
                                    is_hidden=False,
                                    company_id=company_id,
                                    account_id__in=acc_ids,
                                    period_year=period_year)\
                                .exclude(source_currency_id__isnull=True)

            next_year = period_year + 1
            next_histories = AccountHistory.objects.filter(
                                    is_hidden=False,
                                    company_id=company_id,
                                    account_id__in=acc_ids,
                                    period_year=next_year)\
                                .exclude(source_currency_id__isnull=True)

            for item in accounts_list:
                account_id = int(item.split('-')[0])
                currency_id = int(item.split('-')[1])

                # update current year
                account_history = all_histories.filter(period_month=period_month_str,
                                                        account_id=account_id,
                                                        source_currency_id=currency_id)\
                                            .exclude(source_currency_id__isnull=True).first()
                src_eb = account_history.source_end_balance
                func_eb = account_history.functional_end_balance
                for i in range(period_month + 1, 13):
                    try:
                        next_history = all_histories.filter(period_month=i,
                                                            account_id=account_id,
                                                            source_currency_id=currency_id).first()

                        next_history.source_begin_balance = src_eb
                        next_history.source_end_balance = round_number(next_history.source_begin_balance) + round_number(next_history.source_net_change)
                        next_history.functional_begin_balance = func_eb
                        next_history.functional_end_balance = round_number(
                            next_history.functional_begin_balance) + round_number(next_history.functional_net_change)
                        next_history.save()
                        src_eb = next_history.source_end_balance
                        func_eb = next_history.functional_end_balance
                    except ObjectDoesNotExist as e:
                        print(e)

                period_ADJ = all_histories.filter(period_month__in=['ADJ'],
                                                        account_id=account_id,
                                                        source_currency_id=currency_id).exclude(source_currency_id__isnull=True)
                if period_ADJ:
                    for ADJ_CLS in period_ADJ:
                        ADJ_CLS.source_begin_balance = src_eb
                        ADJ_CLS.source_end_balance = round_number(
                            ADJ_CLS.source_begin_balance) + round_number(ADJ_CLS.source_net_change)
                        ADJ_CLS.functional_begin_balance = func_eb
                        ADJ_CLS.functional_end_balance = round_number(
                            ADJ_CLS.functional_begin_balance) + round_number(ADJ_CLS.functional_net_change)
                        ADJ_CLS.save()
                else:
                    last_day = datetime.date(period_year, 12, 31)
                    create_account_history(company_id, period_year, 'ADJ', last_day, account_id,
                                        currency_id, src_eb, company.currency_id, func_eb)

                period_CLS = all_histories.filter(period_month__in=['CLS'],
                                                        account_id=account_id,
                                                        source_currency_id=currency_id).exclude(source_currency_id__isnull=True)
                if period_CLS:
                    for ADJ_CLS in period_CLS:
                        ADJ_CLS.source_begin_balance = src_eb
                        ADJ_CLS.source_end_balance = round_number(
                            ADJ_CLS.source_begin_balance) + round_number(ADJ_CLS.source_net_change)
                        ADJ_CLS.functional_begin_balance = func_eb
                        ADJ_CLS.functional_end_balance = round_number(
                            ADJ_CLS.functional_begin_balance) + round_number(ADJ_CLS.functional_net_change)
                        ADJ_CLS.save()
                else:
                    last_day = datetime.date(period_year, 12, 31)
                    create_account_history(company_id, period_year, 'CLS', last_day, account_id,
                                        currency_id, src_eb, company.currency_id, func_eb)

                # update next year
                CLS = all_histories.filter(period_month='CLS', account_id=account_id, source_currency_id=currency_id).first()
                if CLS:
                    src_eb = CLS.source_end_balance
                    func_eb = CLS.functional_end_balance
                    last_day = None
                    for i in range(12):
                        _, num_days = calendar.monthrange(next_year, i + 1)
                        last_day = datetime.date(next_year, i + 1, num_days)
                        try:
                            next_history = next_histories.filter(
                                                period_month=i + 1,
                                                source_currency_id=currency_id,
                                                account_id=account_id)\
                                                    .exclude(source_currency_id__isnull=True).first()
                            next_history.source_begin_balance = src_eb
                            next_history.source_end_balance = round_number(
                                next_history.source_begin_balance) + round_number(next_history.source_net_change)
                            next_history.functional_begin_balance = func_eb
                            next_history.functional_end_balance = round_number(
                                next_history.functional_begin_balance) + round_number(next_history.functional_net_change)
                            next_history.save()
                            src_eb = next_history.source_end_balance
                            func_eb = next_history.functional_end_balance
                        except Exception as e:
                            period = i + 1
                            create_account_history(company_id, next_year, period, last_day, account_id,
                                                currency_id, src_eb, company.currency_id, func_eb)

                    period_ADJ = next_histories.filter(
                                        period_month__in=['ADJ'],
                                        source_currency_id=currency_id,
                        account_id=account_id).exclude(source_currency_id__isnull=True)
                    if period_ADJ:
                        for ADJ_CLS in period_ADJ:
                            ADJ_CLS.source_begin_balance = src_eb
                            ADJ_CLS.source_end_balance = round_number(
                                ADJ_CLS.source_begin_balance) + round_number(ADJ_CLS.source_net_change)
                            ADJ_CLS.functional_begin_balance = func_eb
                            ADJ_CLS.functional_end_balance = round_number(
                                ADJ_CLS.functional_begin_balance) + round_number(ADJ_CLS.functional_net_change)
                            ADJ_CLS.save()
                    else:
                        create_account_history(company_id, next_year, 'ADJ', last_day, account_id,
                                            currency_id, src_eb, company.currency_id, func_eb)

                    period_CLS = next_histories.filter(
                                        period_month__in=['CLS'],
                                        source_currency_id=currency_id,
                        account_id=account_id).exclude(source_currency_id__isnull=True)
                    if period_CLS:
                        for ADJ_CLS in period_CLS:
                            ADJ_CLS.source_begin_balance = src_eb
                            ADJ_CLS.source_end_balance = round_number(
                                ADJ_CLS.source_begin_balance) + round_number(ADJ_CLS.source_net_change)
                            ADJ_CLS.functional_begin_balance = func_eb
                            ADJ_CLS.functional_end_balance = round_number(
                                ADJ_CLS.functional_begin_balance) + round_number(ADJ_CLS.functional_net_change)
                            ADJ_CLS.save()
                    else:
                        create_account_history(company_id, next_year, 'CLS', last_day, account_id,
                                            currency_id, src_eb, company.currency_id, func_eb)

        except Exception as e:
            print(e)
            result = False
            # transactionlib.set_rollback(True)
    return result


def send_manual_cl_batch(request, journal, reopen):
    result = True
    period_list = list(map(str, list(range(1, 13))))
    period_list.extend(['ADJ', 'CLS'])
    with transactionlib.atomic():
        try:
            company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
            company = Company.objects.get(pk=company_id)
            period_year = journal.perd_year
            if period_year == 0:
                period_year = journal.document_date.year
            period_month = journal.perd_month
            if period_month == 0:
                period_month_str = str(journal.document_date.month)
            elif period_month == 14:
                period_month_str = 'ADJ'
            elif period_month == 15:
                period_month_str = 'CLS'
            else:
                period_month_str = str(period_month)

            transaction_list = Transaction.objects.filter(company_id=company_id, is_hidden=0, journal_id=journal.id)\
                .select_related('journal', 'account')
            account_ids = transaction_list.values_list('account_id', flat=True)

            pl_filtered_list = transaction_list.filter(account__account_type=ACCOUNT_TYPE_DICT['Income Statement'])

            all_account_history_list = AccountHistory.objects.filter(is_hidden=False, company_id=company_id,
                                                                        period_year=period_year, account_id__in=account_ids)\
                .exclude(source_currency_id__isnull=True)\
                .select_related('account')

            account_history_list_by_account_id = {}

            for acc_id in account_ids:
                account_history_list_by_account_id[acc_id] = all_account_history_list.filter(account_id=acc_id)

            for transaction in transaction_list:
                account = transaction.account

                # for functional currency
                account_history_list = account_history_list_by_account_id[account.id].filter(
                            source_currency_id=company.currency_id,
                    functional_currency_id=company.currency_id).exclude(source_currency_id__isnull=True)
                if not len(account_history_list):
                    for i in period_list:
                        try:
                            i_int = int(i)
                        except Exception as e:
                            print(e)
                            i_int = 12
                        _, num_days = calendar.monthrange(period_year, i_int)
                        last_day = datetime.date(period_year, i_int, num_days)
                        create_account_history(company_id, period_year, i, last_day, account.id,
                                                company.currency_id, 0, company.currency_id, 0)

                    th_account_history_list = AccountHistory.objects.select_related('account'
                                                    ).filter(is_hidden=False, company_id=company_id,
                                                    period_year=period_year, account_id=account.id)\
                                                .exclude(source_currency_id__isnull=True)
                                                    
                    account_history_list_by_account_id[account.id] = th_account_history_list

                # for transaction.currency_id
                # get 12 period record of that account for current year
                account_history_list = account_history_list_by_account_id[account.id].filter(
                    source_currency_id=transaction.currency_id,
                    functional_currency_id=transaction.functional_currency_id)

                # if there is no account history of this account for the period_year
                if not len(account_history_list):
                    for i in period_list:
                        try:
                            i_int = int(i)
                        except Exception as e:
                            print(e)
                            i_int = 12
                        _, num_days = calendar.monthrange(period_year, i_int)
                        last_day = datetime.date(period_year, i_int, num_days)
                        create_account_history(company_id, period_year, i, last_day, account.id,
                                                transaction.currency_id, 0, company.currency_id, 0)

                    the_account_history_list = AccountHistory.objects.select_related('account'
                                                        ).filter(is_hidden=False, company_id=company_id,
                                                        period_year=period_year, account_id=account.id)\
                                                    .exclude(source_currency_id__isnull=True)
                        
                    account_history_list_by_account_id[account.id] = the_account_history_list

                    account_history_list = account_history_list_by_account_id[account.id].filter(
                        source_currency_id=transaction.currency_id,
                        functional_currency_id=transaction.functional_currency_id)\
                        .exclude(source_currency_id__isnull=True)

                AccountHistoryLengthValid = True
                account_history_list_count = len(account_history_list)

                if account_history_list_count < 14:
                    period_month_list = account_history_list.values_list('period_month', flat=True)

                    for i in period_list:
                        if (i not in period_month_list):
                            try:
                                i_int = int(i)
                            except Exception as e:
                                print(e)
                                i_int = 12
                            _, num_days = calendar.monthrange(period_year, i_int)
                            last_day = datetime.date(period_year, i_int, num_days)
                            create_account_history(company_id, period_year, i, last_day, account.id,
                                                    transaction.currency_id, 0, company.currency_id, 0)
                elif account_history_list_count > 14:
                    messages.error(request, 'Account ' + account.code + ' has ' + UNEXPECTED_ACCOUNT_HISTORY_LENGTH)
                    AccountHistoryLengthValid = False

                if AccountHistoryLengthValid:
                    # get currenct month AccountHistory
                    a_account_history_list = account_history_list_by_account_id[account.id].filter(
                        period_month=period_month_str, period_year=period_year,
                        source_currency_id__in=[transaction.currency_id, company.currency_id])

                    for account_history in a_account_history_list:
                        if reopen:
                            if account_history.source_currency_id == transaction.currency_id or account_history.source_currency_id == company.currency_id:
                                functional_amount = round_number(transaction.functional_amount)
                                if transaction.is_debit_account:
                                    account.debit_amount = round_number(account.debit_amount) - functional_amount
                                    account_history.functional_debit_amount = round_number(
                                        account_history.functional_debit_amount) - functional_amount
                                    account_history.functional_net_change = round_number(
                                        account_history.functional_net_change) - functional_amount
                                else:
                                    account.credit_amount = round_number(account.credit_amount) + functional_amount
                                    account_history.functional_credit_amount = round_number(
                                        account_history.functional_credit_amount) + functional_amount
                                    account_history.functional_net_change = round_number(
                                        account_history.functional_net_change) + functional_amount
                                account_history.functional_end_balance = round_number(
                                    account_history.functional_begin_balance) + round_number(account_history.functional_net_change)

                                if account_history.source_currency_id == transaction.currency_id:
                                    total_amount = round_number(transaction.total_amount)
                                    if transaction.is_debit_account:
                                        account_history.source_debit_amount = round_number(
                                            account_history.source_debit_amount) - total_amount
                                        account_history.source_net_change = round_number(
                                            account_history.source_net_change) - total_amount
                                    else:
                                        account_history.source_credit_amount = round_number(
                                            account_history.source_credit_amount) + total_amount
                                        account_history.source_net_change = round_number(
                                            account_history.source_net_change) + total_amount
                                    account_history.source_end_balance = round_number(
                                        account_history.source_begin_balance) + round_number(account_history.source_net_change)

                                account_history.update_date = datetime.datetime.today()
                                account_history.update_by = request.user.id
                                account_history.save()

                                account.update_date = datetime.datetime.today()
                                account.update_by = request.user.id
                                account.save()
                            else:
                                continue
                        else:
                            if account_history.source_currency_id == transaction.currency_id or account_history.source_currency_id == company.currency_id:
                                functional_amount = round_number(transaction.functional_amount)
                                if transaction.is_debit_account:
                                    account.debit_amount = round_number(account.debit_amount) + functional_amount
                                    account_history.functional_debit_amount = round_number(
                                        account_history.functional_debit_amount) + functional_amount
                                    account_history.functional_net_change = round_number(
                                        account_history.functional_net_change) + functional_amount
                                else:
                                    account.credit_amount = round_number(account.credit_amount) - functional_amount
                                    account_history.functional_credit_amount = round_number(
                                        account_history.functional_credit_amount) - functional_amount
                                    account_history.functional_net_change = round_number(
                                        account_history.functional_net_change) - functional_amount
                                account_history.functional_end_balance = round_number(
                                    account_history.functional_begin_balance) + round_number(account_history.functional_net_change)

                                if account_history.source_currency_id == transaction.currency_id:
                                    total_amount = round_number(transaction.total_amount)
                                    if transaction.is_debit_account:
                                        account_history.source_debit_amount = round_number(
                                            account_history.source_debit_amount) + total_amount
                                        account_history.source_net_change = round_number(
                                            account_history.source_net_change) + total_amount
                                    else:
                                        account_history.source_credit_amount = round_number(
                                            account_history.source_credit_amount) - total_amount
                                        account_history.source_net_change = round_number(
                                            account_history.source_net_change) - total_amount
                                    account_history.source_end_balance = round_number(
                                        account_history.source_begin_balance) + round_number(account_history.source_net_change)

                                account_history.update_date = datetime.datetime.today()
                                account_history.update_by = request.user.id
                                account_history.save()

                                account.update_date = datetime.datetime.today()
                                account.update_by = request.user.id
                                account.save()
                            else:
                                continue


                        # # update current year
                        # all_histories = AccountHistory.objects.filter(
                        #         is_hidden=False,
                        #         company_id=company_id,
                        #         account_id=account.id,
                        #         period_year=period_year,
                        #         source_currency_id=account_history.source_currency_id)
                        # src_eb = account_history.source_end_balance
                        # func_eb = account_history.functional_end_balance
                        # for i in range(period_month + 1, 13):
                        #     try:
                        #         next_history = all_histories.filter(period_month=i).first()

                        #         next_history.source_begin_balance = src_eb
                        #         next_history.source_end_balance = round_number(next_history.source_begin_balance) + round_number(next_history.source_net_change)
                        #         next_history.functional_begin_balance = func_eb
                        #         next_history.functional_end_balance = round_number(
                        #             next_history.functional_begin_balance) + round_number(next_history.functional_net_change)
                        #         next_history.save()
                        #         src_eb = next_history.source_end_balance
                        #         func_eb = next_history.functional_end_balance
                        #     except ObjectDoesNotExist as e:
                        #         print(e)

                        # period_ADJ_CLS = all_histories.filter(period_month__in=('CLS', 'ADJ'))
                        # if period_ADJ_CLS:
                        #     for ADJ_CLS in period_ADJ_CLS:
                        #         ADJ_CLS.source_begin_balance = src_eb
                        #         ADJ_CLS.source_end_balance = round_number(
                        #             ADJ_CLS.source_begin_balance) + round_number(ADJ_CLS.source_net_change)
                        #         ADJ_CLS.functional_begin_balance = func_eb
                        #         ADJ_CLS.functional_end_balance = round_number(
                        #             ADJ_CLS.functional_begin_balance) + round_number(ADJ_CLS.functional_net_change)
                        #         ADJ_CLS.save()
                        # else:
                        #     create_account_history(company_id, year, 'ADJ', last_day, account.id,
                        #                         account_history.source_currency_id, src_eb,
                        #                         company.currency_id, func_eb)
                        #     create_account_history(company_id, year, 'CLS', last_day, account.id,
                        #                         account_history.source_currency_id, src_eb,
                        #                     company.currency_id, func_eb)

                        # update next years after current year
                        all_histories = AccountHistory.objects.filter(
                                is_hidden=False,
                                company_id=company_id,
                                account_id=account.id,
                                source_currency_id=account_history.source_currency_id)\
                            .annotate(int_period_year=RawSQL('CAST(period_year AS UNSIGNED)', params=[])) \
                            .exclude(source_currency_id__isnull=True)\
                            .exclude(int_period_year__lt=period_year)

                        CLS = all_histories.filter(
                            period_month='CLS',
                            period_year=period_year).first()

                        if CLS:
                            src_eb = CLS.source_end_balance
                            func_eb = CLS.functional_end_balance
                            for year in range(period_year + 1, period_year + 2):
                                last_day = None
                                for i in range(12):
                                    _, num_days = calendar.monthrange(year, i + 1)
                                    last_day = datetime.date(year, i + 1, num_days)
                                    try:
                                        next_history = all_histories.filter(
                                            period_month=i + 1,
                                            period_year=year).first()
                                        next_history.source_begin_balance = src_eb
                                        next_history.source_end_balance = round_number(
                                            next_history.source_begin_balance) + round_number(next_history.source_net_change)
                                        next_history.functional_begin_balance = func_eb
                                        next_history.functional_end_balance = round_number(
                                            next_history.functional_begin_balance) + round_number(next_history.functional_net_change)
                                        next_history.save()
                                        src_eb = next_history.source_end_balance
                                        func_eb = next_history.functional_end_balance
                                    except Exception as e:
                                        period = i + 1
                                        create_account_history(company_id, year, period, last_day, account.id,
                                                                account_history.source_currency_id,
                                                                src_eb, company.currency_id,
                                                                func_eb)

                                period_ADJ = all_histories.filter(
                                    period_month__in=['ADJ'],
                                    period_year=year)
                                if period_ADJ:
                                    for ADJ_CLS in period_ADJ:
                                        ADJ_CLS.source_begin_balance = src_eb
                                        ADJ_CLS.source_end_balance = round_number(
                                            ADJ_CLS.source_begin_balance) + round_number(ADJ_CLS.source_net_change)
                                        ADJ_CLS.functional_begin_balance = func_eb
                                        ADJ_CLS.functional_end_balance = round_number(
                                            ADJ_CLS.functional_begin_balance) + round_number(ADJ_CLS.functional_net_change)
                                        ADJ_CLS.save()
                                else:
                                    create_account_history(company_id, year, 'ADJ', last_day, account.id,
                                                            account_history.source_currency_id, src_eb,
                                                            company.currency_id, func_eb)

                                period_CLS = all_histories.filter(
                                    period_month__in=['CLS'],
                                    period_year=year)
                                if period_CLS:
                                    for ADJ_CLS in period_CLS:
                                        ADJ_CLS.source_begin_balance = src_eb
                                        ADJ_CLS.source_end_balance = round_number(
                                            ADJ_CLS.source_begin_balance) + round_number(ADJ_CLS.source_net_change)
                                        ADJ_CLS.functional_begin_balance = func_eb
                                        ADJ_CLS.functional_end_balance = round_number(
                                            ADJ_CLS.functional_begin_balance) + round_number(ADJ_CLS.functional_net_change)
                                        ADJ_CLS.save()
                                else:
                                    create_account_history(company_id, year, 'CLS', last_day, account.id,
                                                                account_history.source_currency_id, src_eb,
                                                                company.currency_id, func_eb)

            if len(pl_filtered_list):
                journal_list = []
                journal_list.append(journal)
                update_retained_earning(request, journal_list, reopen)

        except Exception as e:
            print(e)
            result = False
            transactionlib.set_rollback(True)
    return result


def update_account_history(request, journal, reopen, accounts_dict, issue_from, number_of_month):
    result = True
    period_list = list(map(str, list(range(1, 13))))
    period_list.extend(['ADJ', 'CLS'])
    try:
        company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
        company = Company.objects.get(pk=company_id)
        period_year = journal.perd_year
        if period_year == 0:
            period_year = journal.document_date.year
        period_month = journal.perd_month
        if period_month == 0:
            period_month_str = str(journal.document_date.month)
        elif period_month == 14:
            period_month_str = 'ADJ'
        elif period_month == 15:
            period_month_str = 'CLS'
        else:
            period_month_str = str(period_month)

        transaction_list = Transaction.objects.filter(company_id=company_id, is_hidden=0, journal_id=journal.id)\
            .select_related('journal', 'account')
        account_ids = transaction_list.values_list('account_id', flat=True)

        all_account_history_list = AccountHistory.objects.filter(is_hidden=False, company_id=company_id,
                                                                    period_year=period_year, account_id__in=account_ids)\
            .exclude(source_currency_id__isnull=True)\
            .select_related('account')

        account_history_list_by_account_id = {}

        for acc_id in account_ids:
            account_history_list_by_account_id[acc_id] = all_account_history_list.filter(account_id=acc_id)

        for transaction in transaction_list:
            account = transaction.account

            # for functional currency
            c_account_history_list = account_history_list_by_account_id[account.id].filter(
                        source_currency_id=company.currency_id,
                        functional_currency_id=company.currency_id)
            if not c_account_history_list.exists():
                for i in period_list:
                    try:
                        i_int = int(i)
                    except Exception as e:
                        print(e)
                        i_int = 12
                    _, num_days = calendar.monthrange(period_year, i_int)
                    last_day = datetime.date(period_year, i_int, num_days)
                    create_account_history(company_id, period_year, i, last_day, account.id,
                                            company.currency_id, 0, company.currency_id, 0)

                th_account_history_list = AccountHistory.objects.select_related('account'
                                ).filter(is_hidden=False, company_id=company_id,
                                period_year=period_year, account_id=account.id)\
                        .exclude(source_currency_id__isnull=True)
                account_history_list_by_account_id[account.id] = th_account_history_list
            # if company.currency_id account history length of this account is less then 14
            elif c_account_history_list.count() < 14:
                c_period_month_list = c_account_history_list.values_list('period_month', flat=True)
                for i in period_list:
                    if i not in c_period_month_list:
                        try:
                            i_int = int(i)
                        except Exception as e:
                            print(e)
                            i_int = 12
                        _, num_days = calendar.monthrange(period_year, i_int)
                        last_day = datetime.date(period_year, i_int, num_days)
                        create_account_history(company_id, period_year, i, last_day, account.id,
                                               company.currency_id, 0, company.currency_id, 0)

                th_account_history_list = AccountHistory.objects.select_related('account'
                                ).filter(is_hidden=False, company_id=company_id,
                                period_year=period_year, account_id=account.id)\
                        .exclude(source_currency_id__isnull=True)
                account_history_list_by_account_id[account.id] = th_account_history_list
            # for transaction.currency_id
            # get 12 period record of that account for current year
            t_account_history_list = account_history_list_by_account_id[account.id].filter(
                source_currency_id=transaction.currency_id,
                functional_currency_id=transaction.functional_currency_id)

            # if there is no account history of this account for the period_year
            if not t_account_history_list.exists():
                for i in period_list:
                    try:
                        i_int = int(i)
                    except Exception as e:
                        print(e)
                        i_int = 12
                    _, num_days = calendar.monthrange(period_year, i_int)
                    last_day = datetime.date(period_year, i_int, num_days)
                    create_account_history(company_id, period_year, i, last_day, account.id,
                                            transaction.currency_id, 0, company.currency_id, 0)

                the_account_history_list = AccountHistory.objects.select_related('account'
                                ).filter(is_hidden=False, company_id=company_id,
                                period_year=period_year, account_id=account.id)\
                        .exclude(source_currency_id__isnull=True)
                account_history_list_by_account_id[account.id] = the_account_history_list
            # if transaction.currency_id account history length of this account is less then 14
            elif t_account_history_list.count() < 14:
                t_period_month_list = t_account_history_list.values_list('period_month', flat=True)
                for i in period_list:
                    if i not in t_period_month_list:
                        try:
                            i_int = int(i)
                        except Exception as e:
                            print(e)
                            i_int = 12
                        _, num_days = calendar.monthrange(period_year, i_int)
                        last_day = datetime.date(period_year, i_int, num_days)
                        create_account_history(company_id, period_year, i, last_day, account.id,
                                                transaction.currency_id, 0, company.currency_id, 0)

                the_account_history_list = AccountHistory.objects.select_related('account'
                                ).filter(is_hidden=False, company_id=company_id,
                                period_year=period_year, account_id=account.id)\
                        .exclude(source_currency_id__isnull=True)
                account_history_list_by_account_id[account.id] = the_account_history_list

            account_history_list = account_history_list_by_account_id[account.id].filter(
                            source_currency_id=transaction.currency_id,
                            functional_currency_id=transaction.functional_currency_id)
            
            AccountHistoryLengthValid = True
            account_history_list_count = account_history_list.count()

            if account_history_list_count != 14:
                if account_history_list_count < 14:
                    period_month_list = account_history_list.values_list('period_month', flat=True)
                    for i in period_list:
                        if i not in period_month_list:
                            try:
                                i_int = int(i)
                            except Exception as e:
                                print(e)
                                i_int = 12
                            _, num_days = calendar.monthrange(period_year, i_int)
                            last_day = datetime.date(period_year, i_int, num_days)
                            create_account_history(company_id, period_year, i, last_day, account.id,
                                                    transaction.currency_id, 0, company.currency_id, 0)
                # elif account_history_list_count > 14:
                #     messages.error(request, 'Account ' + account.code + ' has ' + UNEXPECTED_ACCOUNT_HISTORY_LENGTH)
                #     AccountHistoryLengthValid = False

            if AccountHistoryLengthValid:
                # get currenct month AccountHistory
                a_account_history_list = None
                a_account_history_list = account_history_list_by_account_id[account.id].filter(
                    period_month=period_month_str, period_year=period_year,
                    source_currency_id__in=[transaction.currency_id, company.currency_id])

                for account_history in a_account_history_list:
                    if reopen:
                        if account_history.source_currency_id == transaction.currency_id or account_history.source_currency_id == company.currency_id:
                            # try:
                            #     new_key = str(account.id) + '-' + str(account_history.source_currency_id)
                            #     all_keys = list(accounts_dict.keys())
                            #     if new_key not in all_keys:
                            #         accounts_dict.update({new_key: new_key})
                            # except Exception as e:
                            #     print(e)
                            functional_amount = round_number(transaction.functional_amount)
                            if transaction.is_debit_account:
                                # account.debit_amount = round_number(account.debit_amount) - functional_amount
                                account_history.functional_debit_amount = round_number(
                                    account_history.functional_debit_amount) - functional_amount
                                account_history.functional_net_change = round_number(
                                    account_history.functional_net_change) - functional_amount
                            else:
                                # account.credit_amount = round_number(account.credit_amount) + functional_amount
                                account_history.functional_credit_amount = round_number(
                                    account_history.functional_credit_amount) + functional_amount
                                account_history.functional_net_change = round_number(
                                    account_history.functional_net_change) + functional_amount
                            account_history.functional_end_balance = round_number(
                                account_history.functional_begin_balance) + round_number(account_history.functional_net_change)

                            if account_history.source_currency_id == transaction.currency_id:
                                total_amount = round_number(transaction.total_amount)
                                if transaction.is_debit_account:
                                    account_history.source_debit_amount = round_number(
                                        account_history.source_debit_amount) - total_amount
                                    account_history.source_net_change = round_number(
                                        account_history.source_net_change) - total_amount
                                else:
                                    account_history.source_credit_amount = round_number(
                                        account_history.source_credit_amount) + total_amount
                                    account_history.source_net_change = round_number(
                                        account_history.source_net_change) + total_amount
                                account_history.source_end_balance = round_number(
                                    account_history.source_begin_balance) + round_number(account_history.source_net_change)

                            account_history.update_date = datetime.datetime.today()
                            account_history.update_by = request.user.id
                            account_history.save()

                            # account.update_date = datetime.datetime.today()
                            # account.update_by = request.user.id
                            # account.save()
                        else:
                            continue
                    else:
                        if account_history.source_currency_id == transaction.currency_id or account_history.source_currency_id == company.currency_id:
                            # try:
                            #     new_key = str(account.id) + '-' + str(account_history.source_currency_id)
                            #     all_keys = list(accounts_dict.keys())
                            #     if new_key not in all_keys:
                            #         accounts_dict.update({new_key: new_key})
                            # except Exception as e:
                            #     print(e)
                            functional_amount = round_number(transaction.functional_amount)
                            if transaction.is_debit_account:
                                # account.debit_amount = round_number(account.debit_amount) + functional_amount
                                account_history.functional_debit_amount = round_number(
                                    account_history.functional_debit_amount) + functional_amount
                                account_history.functional_net_change = round_number(
                                    account_history.functional_net_change) + functional_amount
                            else:
                                # account.credit_amount = round_number(account.credit_amount) - functional_amount
                                account_history.functional_credit_amount = round_number(
                                    account_history.functional_credit_amount) - functional_amount
                                account_history.functional_net_change = round_number(
                                    account_history.functional_net_change) - functional_amount
                            account_history.functional_end_balance = round_number(
                                account_history.functional_begin_balance) + round_number(account_history.functional_net_change)

                            if account_history.source_currency_id == transaction.currency_id:
                                total_amount = round_number(transaction.total_amount)
                                if transaction.is_debit_account:
                                    account_history.source_debit_amount = round_number(
                                        account_history.source_debit_amount) + total_amount
                                    account_history.source_net_change = round_number(
                                        account_history.source_net_change) + total_amount
                                else:
                                    account_history.source_credit_amount = round_number(
                                        account_history.source_credit_amount) - total_amount
                                    account_history.source_net_change = round_number(
                                        account_history.source_net_change) - total_amount
                                account_history.source_end_balance = round_number(
                                    account_history.source_begin_balance) + round_number(account_history.source_net_change)

                            account_history.update_date = datetime.datetime.today()
                            account_history.update_by = request.user.id
                            account_history.save()

                            # account.update_date = datetime.datetime.today()
                            # account.update_by = request.user.id
                            # account.save()
                        else:
                            continue
                    
                    src_eb = account_history.source_end_balance
                    func_eb = account_history.functional_end_balance
                    
                    # if last period then update ADJ and CLS
                    if period_month == 12:
                        period_ADJ_ = AccountHistory.objects.filter(is_hidden=False, company_id=company_id,
                                                                period_year=period_year, 
                                                                period_month='ADJ',
                                                                account_id=account.id,
                                                                source_currency_id=account_history.source_currency_id)\
                                            .exclude(source_currency_id__isnull=True)\
                                            .select_related('account')
                        if period_ADJ_:
                            for ADJ_CLS in period_ADJ_:
                                ADJ_CLS.source_begin_balance = src_eb
                                ADJ_CLS.source_end_balance = round_number(
                                    ADJ_CLS.source_begin_balance) + round_number(ADJ_CLS.source_net_change)
                                ADJ_CLS.functional_begin_balance = func_eb
                                ADJ_CLS.functional_end_balance = round_number(
                                    ADJ_CLS.functional_begin_balance) + round_number(ADJ_CLS.functional_net_change)
                                ADJ_CLS.save()
                        else:
                            last_day = str(period_year) + '-12-31'
                            create_account_history(company_id, period_year, 'ADJ', last_day, account.id,
                                                account_history.source_currency_id, src_eb,
                                                company.currency_id, func_eb)

                        period_CLS_ = AccountHistory.objects.filter(is_hidden=False, company_id=company_id,
                                                                period_year=period_year, 
                                                                period_month='CLS',
                                                                account_id=account.id,
                                                                source_currency_id=account_history.source_currency_id)\
                                            .exclude(source_currency_id__isnull=True)\
                                            .select_related('account')
                        if period_CLS_:
                            for ADJ_CLS in period_CLS_:
                                ADJ_CLS.source_begin_balance = src_eb
                                ADJ_CLS.source_end_balance = round_number(
                                    ADJ_CLS.source_begin_balance) + round_number(ADJ_CLS.source_net_change)
                                ADJ_CLS.functional_begin_balance = func_eb
                                ADJ_CLS.functional_end_balance = round_number(
                                    ADJ_CLS.functional_begin_balance) + round_number(ADJ_CLS.functional_net_change)
                                ADJ_CLS.save()
                        else:
                            last_day = str(period_year) + '-12-31'
                            create_account_history(company_id, period_year, 'CLS', last_day, account.id,
                                                account_history.source_currency_id, src_eb,
                                                company.currency_id, func_eb)

                        period__CLS__ = AccountHistory.objects.filter(is_hidden=False, company_id=company_id,
                                                                    period_year=period_year,
                                                                    period_month='CLS',
                                                                    account_id=account.id,
                                                                    source_currency_id=account_history.source_currency_id)\
                            .exclude(source_currency_id__isnull=True)\
                            .select_related('account')
                        if period__CLS__.exists():
                            period__CLS__ = period__CLS__.last()
                            src_eb = period__CLS__.source_end_balance
                            func_eb = period__CLS__.functional_end_balance

                    # update next three months
                    next_histories = AccountHistory.objects.filter(is_hidden=False, company_id=company_id,
                                                                    period_year__gte=issue_from.year,
                                                                    account_id=account.id,
                                                                    source_currency_id=account_history.source_currency_id)\
                                                .exclude(source_currency_id__isnull=True)
                    for period in range(1, number_of_month + 3):
                        current_date = issue_from + relativedelta(months=period)
                        current_year = current_date.year
                        current_period = current_date.month

                        # next_historie = next_histories.filter(period_year=current_year, period_month=current_period)\
                        #                         .exclude(source_currency_id__isnull=True)
                        try:
                            next_history = next_histories.get(period_year=current_year, period_month=current_period)
                            next_history.source_begin_balance = src_eb
                            next_history.source_end_balance = round_number(
                                next_history.source_begin_balance) + round_number(next_history.source_net_change)
                            next_history.functional_begin_balance = func_eb
                            next_history.functional_end_balance = round_number(
                                next_history.functional_begin_balance) + round_number(next_history.functional_net_change)
                            next_history.save()
                            src_eb = next_history.source_end_balance
                            func_eb = next_history.functional_end_balance
                        except Exception as e:
                            print(e)
                            create_account_history(company_id, current_year, current_period, current_date, account.id,
                                                    account_history.source_currency_id,
                                                    src_eb, company.currency_id, func_eb)

                        if current_period == 12:
                            period_ADJ__ = next_histories.filter(period_year=current_year, period_month='ADJ',)\
                                                .exclude(source_currency_id__isnull=True)
                            if period_ADJ__:
                                for ADJ_CLS in period_ADJ__:
                                    ADJ_CLS.source_begin_balance = src_eb
                                    ADJ_CLS.source_end_balance = round_number(
                                        ADJ_CLS.source_begin_balance) + round_number(ADJ_CLS.source_net_change)
                                    ADJ_CLS.functional_begin_balance = func_eb
                                    ADJ_CLS.functional_end_balance = round_number(
                                        ADJ_CLS.functional_begin_balance) + round_number(ADJ_CLS.functional_net_change)
                                    ADJ_CLS.save()
                            else:
                                create_account_history(company_id, current_year, 'ADJ', current_date, account.id,
                                                    account_history.source_currency_id, src_eb,
                                                    company.currency_id, func_eb)

                            period_CLS__ = next_histories.filter(period_year=current_year, period_month='CLS')\
                                                .exclude(source_currency_id__isnull=True)
                            if period_CLS__:
                                for ADJ_CLS in period_CLS__:
                                    ADJ_CLS.source_begin_balance = src_eb
                                    ADJ_CLS.source_end_balance = round_number(
                                        ADJ_CLS.source_begin_balance) + round_number(ADJ_CLS.source_net_change)
                                    ADJ_CLS.functional_begin_balance = func_eb
                                    ADJ_CLS.functional_end_balance = round_number(
                                        ADJ_CLS.functional_begin_balance) + round_number(ADJ_CLS.functional_net_change)
                                    ADJ_CLS.save()
                            else:
                                create_account_history(company_id, current_year, 'CLS', current_date, account.id,
                                                    account_history.source_currency_id, src_eb,
                                                    company.currency_id, func_eb)

                            period_CLS___ = next_histories.filter(period_year=current_year, period_month='CLS')\
                                                .exclude(source_currency_id__isnull=True)

                            if period_CLS___.exists():
                                period_CLS___ = period_CLS___.last()
                                src_eb = period_CLS___.source_end_balance
                                func_eb = period_CLS___.functional_end_balance


            else:
                result = False
                break
    except Exception as e:
        print(e)
        result = False
    return result, accounts_dict


def get_balanced_acc(request, current_year, next_year):
    result = True
    with transactionlib.atomic():
        try:
            current_year = current_year
            next_year = current_year + 1
            company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
            balance_acc_opening = Account.objects.filter(company_id=company_id, is_active=True,
                                                         is_hidden=False).exclude(
                account_type=int(ACCOUNT_TYPE_DICT['Income Statement']))
            if balance_acc_opening.count() > 0:

                account_history_list = AccountHistory.objects.filter(is_hidden=0, company_id=company_id,
                                                                     account__in=balance_acc_opening)

                account_axist = account_history_list.filter(period_year=next_year)
                currency_opening = account_history_list.filter(period_month=12, period_year=current_year) \
                    .exclude(source_currency_id__isnull=True) \
                    .values('source_currency_id') \
                    .distinct()

                for cr_opn in currency_opening:
                    id_cur_acc = cr_opn['source_currency_id']
                    accountHistory = account_history_list.filter(period_year=current_year,
                                                                 source_currency_id=id_cur_acc)

                    if not account_axist:
                        last_standing = account_history_list.filter(period_month=12, period_year=current_year,
                                                                    source_currency_id=id_cur_acc).first()
                        sum_begin_balance = last_standing.source_end_balance
                        sum_fun_begin_bal = last_standing.functional_end_balance
                        for opn in accountHistory:
                            currency_id_source = opn.source_currency_id
                            curr_fung = opn.functional_currency_id
                            m_period = opn.period_month
                            account_id = opn.account_id
                            if m_period == 'CLS':
                                _, num_days = calendar.monthrange(next_year, int(12))

                                last_day = datetime.date(next_year, int(12), num_days)
                                create_account_history(company_id, next_year, m_period, last_day, account_id,
                                                       currency_id_source, sum_begin_balance, curr_fung,
                                                       sum_fun_begin_bal)
                            elif m_period == 'ADJ':
                                _, num_days = calendar.monthrange(next_year, int(12))

                                last_day = datetime.date(next_year, int(12), num_days)
                                create_account_history(company_id, next_year, m_period, last_day, account_id,
                                                       currency_id_source, sum_begin_balance, curr_fung,
                                                       sum_fun_begin_bal)
                            else:
                                _, num_days = calendar.monthrange(next_year, int(m_period))

                                last_day = datetime.date(next_year, int(m_period), num_days)
                                create_account_history(company_id, next_year, m_period, last_day, account_id,
                                                       currency_id_source, sum_begin_balance, curr_fung,
                                                       sum_fun_begin_bal)

        except Exception as e:
            print(e)
            result = False
            transactionlib.set_rollback(True)
    return result


def create_account_history(company_id, year, period, last_day, account_id, source_currency_id, source_net_change,
                           functional_currency_id, func_net_change):
    try:
        account_history = AccountHistory()
        account_history.period_year = year
        account_history.period_month = period
        account_history.period_date = last_day
        account_history.company_id = company_id
        account_history.account_id = account_id
        account_history.source_currency_id = source_currency_id
        account_history.source_begin_balance = source_net_change
        account_history.source_net_change = 0
        account_history.source_end_balance = account_history.source_begin_balance + account_history.source_net_change
        account_history.functional_currency_id = functional_currency_id
        account_history.functional_begin_balance = func_net_change
        account_history.functional_net_change = 0
        account_history.functional_end_balance = account_history.functional_begin_balance + account_history.functional_net_change
        account_history.create_date = datetime.datetime.today()
        account_history.save()
        return True
    except Exception as e:
        print(e)
        return False


def gl_revaluation(request):
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    company = Company.objects.get(pk=company_id)
    session_date = request.session['session_date']
    fsc_calendar = FiscalCalendar.objects.filter(company_id=company_id, is_hidden=0, start_date__lte=session_date, end_date__gte=session_date).first()
    if fsc_calendar:
        session_year = fsc_calendar.fiscal_year
        session_period = fsc_calendar.period
    else:
        session_year = session_date.year
        session_period = session_date.month
    account = Account.objects.filter(is_hidden=False, is_active=True, company_id=company_id).order_by('account_segment', 'code')
    company_currency = Company.objects.filter(pk=company_id).values('currency', 'currency__id',
                                                                    'currency__name').first()
    revaluation_code = RevaluationCode.objects.filter(is_hidden=0, company_id=company_id)
    data_currency = Currency.objects.filter(is_hidden=0).exclude(pk=company_currency['currency']).values('id', 'name',
                                                                                                         'code',
                                                                                                         'symbol')
    for curr in data_currency:
        exchange_rate = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                    from_currency_id=curr['id'],
                                                    to_currency_id=company_currency['currency__id'],
                                                    flag='ACCOUNTING').order_by('exchange_date').last()
        curr['exchrateid'] = None
        curr['rate'] = 0
        curr['rate_date'] = datetime.datetime.now().strftime("%Y-%m-%d")
        if exchange_rate:
            exchrateid = exchange_rate.id
            rate = exchange_rate.rate
            rate_date = str(exchange_rate.exchange_date)
            curr['exchrateid'] = exchrateid
            curr['rate'] = rate
            curr['rate_date'] = rate_date

    if request.method == 'POST':
        revaluation_list = ast.literal_eval(request.POST['rev_list_data'])
        revaluation_list.sort(key=lambda r: (r['rev_code_id'], r['curr_id']))
        isDuplicate = False
        lastCurr = ''
        lastRevId = ''
        current_period = company.current_period_month
        current_year = company.current_period_year
        for rv_list in revaluation_list:
            if rv_list['curr_id'] == lastCurr and rv_list['rev_code_id'] == lastRevId:
                isDuplicate = True
            lastCurr = rv_list['curr_id']
            lastRevId = rv_list['rev_code_id']
            current_period = rv_list['period_to']
            current_year = rv_list['fiscal_year']


        if not isDuplicate:
            Generate_GL_RV = C_GL_Revaluation_ver3(request).GenerateGLRevaluation(revaluation_list)
            if Generate_GL_RV[0]:
                messages.success(request, Generate_GL_RV[1])
                company.current_period_month = current_period
                company.current_period_year = current_year
                company.save()
            else:
                if Generate_GL_RV[2] == 'error':
                    messages.warning(request, 'WARNING: ' + Generate_GL_RV[1])
                else:
                    messages.error(request, 'ERROR: ' + Generate_GL_RV[1])
        else:
            messages.error(request, 'ERROR: ' + RV_ERR_DUPLICATE_CURR)

    responseData = {
        'all_currency': data_currency,
        'all_account': account,
        'all_revaluation_code': revaluation_code,
        'session_date': session_date.strftime("%d-%m-%Y"),
        'session_year': session_year,
        'session_period': session_period
    }
    return render(request, 'gl-revaluation-form.html', responseData)


@login_required
def print_Gl_balance_listing(request):
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    company = Company.objects.get(pk=company_id)
    session_date = request.session['session_date']
    fsc_calendar = FiscalCalendar.objects.filter(company_id=company_id, is_hidden=0, start_date__lte=session_date, end_date__gte=session_date).first()
    fsc_years = FiscalCalendar.objects.filter(company_id=company_id, is_hidden=0).values_list('fiscal_year', flat=True).order_by('fiscal_year').distinct()
    if fsc_calendar:
        fsc_year = fsc_calendar.fiscal_year
        fsc_month = fsc_calendar.period
        fsc_date = datetime.date(int(fsc_year), fsc_month, 1)
        fsc_date = fsc_date.strftime("%d-%m-%Y")
    else:
        fsc_date = session_date.strftime("%d-%m-%Y")
    account_list = Account.objects.filter(company_id=company_id, is_hidden=False).order_by('account_segment', 'code')
    if company.use_segment:
        segment_list = CostCenters.objects.filter(company_id=company_id, is_hidden=False)
    else:
        segment_list = None
    context = {
        'segment_list': segment_list,
        'account_list': account_list,
        'fsc_date': fsc_date,
        'fsc_years': fsc_years
    }
    return render_to_response('GL-balance-sheet-report.html', RequestContext(request, context))


@login_required
def print_Gl_profit_listing(request):
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    company = Company.objects.get(pk=company_id)
    session_date = request.session['session_date']
    fsc_calendar = FiscalCalendar.objects.filter(company_id=company_id, is_hidden=0, start_date__lte=session_date, end_date__gte=session_date).first()
    fsc_years = FiscalCalendar.objects.filter(company_id=company_id, is_hidden=0).values_list('fiscal_year', flat=True).order_by('fiscal_year').distinct()
    if fsc_calendar:
        fsc_year = fsc_calendar.fiscal_year
        fsc_month = fsc_calendar.period
        fsc_date = datetime.date(int(fsc_year), fsc_month, 1)
        fsc_date = fsc_date.strftime("%d-%m-%Y")
    else:
        fsc_date = session_date.strftime("%d-%m-%Y")
    account_list = Account.objects.filter(company_id=company_id, is_hidden=False).order_by('account_segment', 'code')
    if company.use_segment:
        segment_list = CostCenters.objects.filter(company_id=company_id, is_hidden=False)
    else:
        segment_list = None
    context = {
        'segment_list': segment_list,
        'account_list': account_list,
        'fsc_date': fsc_date,
        'fsc_years': fsc_years
    }
    return render_to_response('GL-profit-loss-report.html', RequestContext(request, context))


@login_required
def print_Gl_trial_balance_listing(request):
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    session_date = request.session['session_date']
    fsc_calendar = FiscalCalendar.objects.filter(company_id=company_id, is_hidden=0, start_date__lte=session_date, end_date__gte=session_date).first()
    fsc_years = FiscalCalendar.objects.filter(company_id=company_id, is_hidden=0).values_list('fiscal_year', flat=True).order_by('fiscal_year').distinct()
    if fsc_calendar:
        fsc_year = fsc_calendar.fiscal_year
        fsc_month = fsc_calendar.period
        fsc_date = datetime.date(int(fsc_year), fsc_month, 1)
        fsc_date = fsc_date.strftime("%d-%m-%Y")
    else:
        fsc_date = session_date.strftime("%d-%m-%Y")
    return render_to_response('GL-trial-balance-report.html',
                              RequestContext(request, {'gl_report_list': GL_REPORT_LIST, 'fsc_date': fsc_date, 'fsc_years': fsc_years}))


@login_required
@check_fiscal
def journal_AP_Payment_add(request, batch_id):
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    form = APPaymentInfoForm(company_id=company_id, session_date=request.session['session_date'])
    doc_number = AR_AP_generate_document_number(
        company_id,
        dict(TRANSACTION_TYPES)['AP Payment'])
    try:
        with transactionlib.atomic():
            # if batch_id = 0, mean this is newly created batch
            context = {}
            entry_no = 1
            p_batch = 0
            n_batch = 0
            prev_batch = 0
            next_batch = 0
            prev_journal = 0
            next_journal = 0
            first_journal = 0
            last_journal = 0
            if batch_id != '0':
                batch = Batch.objects.get(pk=batch_id)
                j_list = Journal.objects.filter(batch_id=batch_id, company_id=company_id, is_hidden=0) \
                                .exclude(journal_type=dict(TRANSACTION_TYPES)['AD']) \
                                .order_by('id')
                if j_list:
                    j_list = sorted(j_list, key=lambda Journal: int(Journal.code))
                    last_entry = j_list[-1].code
                    entry_no = int(last_entry) + 1
                batch_form = BatchInfoForm(instance=batch)
                related_journal = Journal.objects.filter(batch_id=batch.id, company_id=company_id, is_hidden=0).first()
                if related_journal:
                    context['bank_id'] = related_journal.bank_id
                prev_journal, next_journal, first_journal, last_journal = get_batch_journals(batch.id, None, False)
                prev_batch, next_batch = get_nearest_batches(company_id, dict(TRANSACTION_TYPES)['AP Payment'], batch.batch_no)
            else:
                batch = Batch()
                batch.batch_type = dict(TRANSACTION_TYPES)['AP Payment']
                batch_form = BatchInfoForm(session_date=request.session['session_date'])
                prev_batch, next_batch = get_nearest_batches(company_id, dict(TRANSACTION_TYPES)['AP Payment'], None)
            form.initial = {'code': entry_no, 'document_number': doc_number, 'payment_check_number': '000000000000'}
            if prev_batch:
                p_batch = Journal.objects.get(pk=prev_batch).batch_id
            if next_batch:
                n_batch = Journal.objects.get(pk=next_batch).batch_id
            company = Company.objects.get(pk=company_id)
            distribution_code_list = DistributionCode.objects.filter(is_hidden=False, is_active=True,
                                                                     company_id=company_id,
                                                                     type=DIS_CODE_TYPE_DICT['AP Distribution Code'])
            account_list = Account.objects.filter(is_hidden=False, is_active=True, company_id=company_id).order_by('account_segment', 'code')
            tax_list = Tax.objects.filter(is_hidden=False,
                                          company_id=company_id,
                                          tax_group__company_id=company_id,
                                          tax_group__transaction_type=int(TAX_TRX_TYPES_DICT['Purchases']))
            total_func_debit = 0.0
            total_func_credit = 0.0
            distribution_code_list_ap = []
            for dist_code_list in distribution_code_list:
                distribution_code_list_obj = {}
                distribution_code_list_obj['id'] = dist_code_list.id
                distribution_code_list_obj['code'] = dist_code_list.code
                distribution_code_list_obj['name'] = dist_code_list.name
                distribution_code_list_obj['gl_account_id'] = dist_code_list.gl_account_id
                distribution_code_list_obj['tax_id'] = None
                for tax_code in tax_list:
                    if tax_code.distribution_code_id:
                        if tax_code.distribution_code_id == dist_code_list.id:
                            distribution_code_list_obj['tax_id'] = tax_code.id
                            break
                distribution_code_list_ap.append(distribution_code_list_obj)
            if request.method == 'POST':
                batch_form = BatchInfoForm(request.POST, instance=batch)
                form = APPaymentInfoForm(request.POST, company_id=company_id)

                if 'is_locked' in request.session and request.session['is_locked']:
                    context.update(
                        {'form': form, 'batch_form': batch_form, 'distribution_code_list': distribution_code_list,
                         'account_list': account_list, 'tax_list': tax_list, 'batch': batch, 'entry_no': entry_no,
                         'next_journal': next_journal, 'prev_journal': prev_journal, 'first_journal': first_journal,
                         'last_journal': last_journal, 'next_batch': next_batch, 'prev_batch': prev_batch, 'is_locked': 1})
                    return render(request, 'AP_payment_entry.html', context)
                if form.is_valid() and batch_form.is_valid():
                    # init Batch to have Batch ID for related Entry
                    Batch_entry = batch_form.save(commit=False)
                    Batch_entry.source_ledger = SOURCE_LEDGER_DICT['Account Payable']
                    # Batch_entry.batch_date = datetime.datetime.today()
                    Batch_entry.create_date = datetime.datetime.today()
                    Batch_entry.save()

                    # Add new payment with PAYMENT Type
                    if request.POST['transaction_type'] == '1':
                        # calculate and import Entry data
                        AP_Payment_entry = form.save(commit=False)
                        AP_Payment_entry.batch_id = Batch_entry.id
                        AP_Payment_entry.document_type = DOCUMENT_TYPE_DICT['Payment']
                        AP_Payment_entry.transaction_type = request.POST['transaction_type']
                        if 'is_posted' in request.POST:
                            AP_Payment_entry.status = int(STATUS_TYPE_DICT['Posted'])
                        else:
                            AP_Payment_entry.status = int(STATUS_TYPE_DICT['Open'])
                        AP_Payment_entry.journal_type = dict(TRANSACTION_TYPES)['AP Payment']
                        AP_Payment_entry.update_by = request.user.id
                        AP_Payment_entry.company_id = company_id
                        AP_Payment_entry.is_hidden = False
                        if 'is_manual_doc' in request.POST and request.POST['is_manual_doc']:
                            AP_Payment_entry.document_number = request.POST['document_number']
                        else:
                            AP_Payment_entry.document_number = AR_AP_generate_document_number(
                                company.id,
                                dict(TRANSACTION_TYPES)['AP Payment'])
                        AP_Payment_entry.original_currency_id = AP_Payment_entry.supplier.currency.id
                        AP_Payment_entry.payment_currency_id = AP_Payment_entry.bank.currency.id
                        AP_Payment_entry.save()

                        if 'is_posted' in request.POST:
                            GL_AP_Payment_Entry = deepcopy(AP_Payment_entry)
                            GL_AP_Payment_Entry.pk = None
                            GL_AP_Payment_Entry.journal_type = dict(TRANSACTION_TYPES)['GL']
                            GL_AP_Payment_Entry.status = int(STATUS_TYPE_DICT['Open'])
                            GL_AP_Payment_Entry.save()

                        # get latest exchange rate
                        account_set_item = AccountSet.objects.get(pk=request.POST['account_set'])
                        exchange_rate = None
                        if 'exchange_rate' in request.POST and request.POST['exchange_rate']:
                            AP_Payment_entry.exchange_rate = request.POST['exchange_rate']
                        if 'exchange_rate_fk' in request.POST and request.POST['exchange_rate_fk']:
                            exchange_rate = ExchangeRate.objects.get(pk=request.POST['exchange_rate_fk'])
                        if not AP_Payment_entry.exchange_rate:
                            from_currency = AP_Payment_entry.bank.currency_id
                            to_currency = company.currency_id
                            exchange_rate = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                                        from_currency_id=from_currency,
                                                                        to_currency_id=to_currency,
                                                                        flag='ACCOUNTING', exchange_date=str(AP_Payment_entry.document_date.year) + '-' + str(AP_Payment_entry.document_date.month) + '-01').first()
                            if not exchange_rate:
                                exchange_rate = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                                            from_currency_id=from_currency,
                                                                            to_currency_id=to_currency,
                                                                            exchange_date__lte=AP_Payment_entry.document_date,
                                                                            flag='ACCOUNTING').order_by('exchange_date').last()
                            if not exchange_rate:
                                if from_currency == to_currency:
                                    # exchange_rate = ExchangeRate()
                                    # exchange_rate.from_currency_id = from_currency
                                    # exchange_rate.to_currency_id = to_currency
                                    # exchange_rate.company_id = company.id
                                    # exchange_rate.rate = 1
                                    # exchange_rate.is_hidden = 0
                                    # exchange_rate.flag = 'ACCOUNTING'
                                    # exchange_rate.save()
                                    AP_Payment_entry.exchange_rate = 1
                                    AP_Payment_entry.exchange_rate_fk_id = None
                                    exchange_rate = None
                                else:
                                    try:
                                        transactionlib.rollback()
                                    except:
                                        pass
                                    messages.error(request, NO_EXCHANGE_RATE)
                                    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
                            else:
                                AP_Payment_entry.exchange_rate = exchange_rate.rate
                                AP_Payment_entry.exchange_rate_fk_id = exchange_rate.id
                        # if 'orig_rate' in request.POST:
                        #     AP_Payment_entry.orig_exch_rate = request.POST['orig_rate'] if request.POST['orig_rate'] != '' else exchange_rate.rate
                        # else:
                        #     AP_Payment_entry.orig_exch_rate = exchange_rate.rate

                        perd_month, perd_year = get_fiscal_year_period(company_id, AP_Payment_entry.document_date)
                        if perd_month and perd_year:
                            AP_Payment_entry.perd_month = perd_month
                            AP_Payment_entry.perd_year = perd_year
                        else:
                            AP_Payment_entry.perd_month = int(request.POST.get('perd_month'))
                            AP_Payment_entry.perd_year = int(request.POST.get('perd_year'))
                        AP_Payment_entry.save()

                        if AP_Payment_entry.account_set_id and AP_Payment_entry.supplier.account_set_id == None:
                            AP_Payment_entry.supplier.account_set_id = AP_Payment_entry.account_set_id
                            AP_Payment_entry.supplier.save()

                        # add related transaction for Payment/Misc Payment journal
                        # Debit for AP, Credit for AR
                        related_invoice_list = []
                        transaction_list_new = ast.literal_eval(request.POST['transaction_list_data']) if request.POST['transaction_list_data'] else []
                        for transaction in transaction_list_new:
                            trans = Transaction()
                            trans.is_debit_account = True
                            trans.is_credit_account = False
                            trans.amount = transaction['applied_amount'].replace(",", "")
                            trans.base_tax_amount = transaction['applied_amount'].replace(",", "")
                            trans.discount_amount = transaction['discount_amount'].replace(",", "")
                            trans.update_by = request.user.id
                            trans.company_id = company_id
                            if AP_Payment_entry.original_currency_id:
                                trans.currency_id = AP_Payment_entry.original_currency_id
                            else:
                                trans.currency_id = AP_Payment_entry.currency_id
                            if trans.currency_id == AP_Payment_entry.currency_id:
                                trans.exchange_rate = AP_Payment_entry.exchange_rate
                            elif trans.currency_id == company.currency_id:
                                trans.exchange_rate = 1.0
                            elif trans.currency_id != company.currency_id and\
                                'orig_exch_rate' in request.POST and request.POST['orig_exch_rate'] and\
                                    request.POST['orig_exch_rate'] != 1.0:
                                trans.exchange_rate = request.POST['orig_exch_rate']
                            if not trans.exchange_rate:
                                if trans.currency_id != AP_Payment_entry.currency_id:
                                    from_currency = trans.currency_id
                                    to_currency = company.currency_id

                                    exchange_rate = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                                                from_currency_id=from_currency,
                                                                                to_currency_id=to_currency,
                                                                                flag='ACCOUNTING', exchange_date=str(AP_Payment_entry.document_date.year) + '-' + str(AP_Payment_entry.document_date.month) + '-01').first()
                                    if not exchange_rate:
                                        exchange_rate = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                                                    from_currency_id=from_currency,
                                                                                    to_currency_id=to_currency,
                                                                                    exchange_date__lte=AP_Payment_entry.document_date,
                                                                                    flag='ACCOUNTING').order_by('exchange_date').last()
                                    if exchange_rate:
                                        trans.exchange_rate = exchange_rate.rate
                                    else:
                                        trans.exchange_rate = 1.0
                                else:
                                    trans.exchange_rate = AP_Payment_entry.exchange_rate
                            trans.total_amount = transaction['applied_amount'].replace(",", "")
                            trans.journal_id = AP_Payment_entry.id
                            trans.account_id = account_set_item.control_account_id if account_set_item.control_account else None
                            trans.related_invoice_id = transaction['invoice_id']

                            # calculate the paid amount and outstanding amount for related_invoice
                            related_invoice = None
                            related_invoice = Journal.objects.get(pk=transaction['invoice_id'])
                            # related_invoice.discount_amount = float(related_invoice.discount_amount) + float(trans.discount_amount)
                            # related_invoice.paid_amount = float(related_invoice.paid_amount) + float(trans.amount)
                            # related_invoice.outstanding_amount = float(related_invoice.outstanding_amount) - float(
                            #     trans.amount)
                            discount_amount = float(related_invoice.real_discount) + float(trans.discount_amount)
                            outstanding_amount = float(related_invoice.real_outstanding) - float(
                                trans.amount)

                            real_outstanding_amount = float(outstanding_amount) - \
                                float(trans.discount_amount)
                            related_invoice.real_outstanding = real_outstanding_amount
                            related_invoice.real_discount = discount_amount

                            # if float(real_outstanding_amount) <= 0:
                            #     related_invoice.is_fully_paid = True
                            #     related_invoice.fully_paid_date = AP_Payment_entry.document_date
                            #     related_invoice.outstanding_amount = 0
                            # else:
                            #     related_invoice.is_fully_paid = False
                            #     related_invoice.fully_paid_date = None

                            trans.functional_currency_id = company.currency_id
                            trans.functional_amount = float(round_number(float(trans.total_amount) * float(trans.exchange_rate)))
                            if exchange_rate:
                                trans.rate_date = exchange_rate.exchange_date
                            else:
                                try:
                                    split_date = str(AP_Payment_entry.document_date).split('-')
                                    trans.rate_date = split_date[0] + '-' + split_date[1] + '-01'
                                except:
                                    trans.rate_date = AP_Payment_entry.document_date

                            if 'is_posted' in request.POST:
                                # write GL row for Amount
                                if float(trans.amount) > 0:
                                    gl_trans_debit = deepcopy(trans)
                                    gl_trans_debit.pk = None
                                    gl_trans_debit.reference = GL_AP_Payment_Entry.payment_check_number
                                    gl_trans_debit.remark = GL_AP_Payment_Entry.name + ' - ' + to_string(
                                        GL_AP_Payment_Entry.reference) + ' - ' + to_string(trans.remark)
                                    gl_trans_debit.journal_id = GL_AP_Payment_Entry.id
                                    gl_trans_debit.total_amount = transaction['amount'].replace(",", "")
                                    gl_trans_debit.tax_amount = 0
                                    gl_trans_debit.functional_amount = round_number(gl_trans_debit.total_amount * trans.exchange_rate)
                                    gl_trans_debit.transaction_date = getTransactionDate(request, GL_AP_Payment_Entry.document_date)
                                    gl_trans_debit.save()
                                    total_func_debit += round_number(gl_trans_debit.functional_amount)

                                    # related_invoice.payment_number += 1

                            related_invoice.save()
                            # related_invoice_list.append(related_invoice.id)
                            # trans.related_journal_outstanding = real_outstanding_amount
                            trans.functional_balance_type = (BALANCE_TYPE_DICT['Credit'],
                                                             BALANCE_TYPE_DICT['Debit'])[trans.is_debit_account]
                            trans.transaction_date = getTransactionDate(request, AP_Payment_entry.document_date)
                            trans.save()

                        AP_Payment_entry.amount = request.POST['total_amount'].replace(",", "")
                        AP_Payment_entry.total_amount = request.POST['total_amount'].replace(",", "")
                        AP_Payment_entry.payment_amount = request.POST['payment_amount'].replace(",", "")
                        AP_Payment_entry.original_amount = request.POST['original_amount'].replace(",", "")
                        AP_Payment_entry.save()

                        doc_number = update_next_doc_number(company.id, AP_Payment_entry.document_number, dict(TRANSACTION_TYPES)['AP Payment'])

                        # fix aging
                        if len(related_invoice_list):
                            update_aging_thread = threading.Thread(name='fix_payments_outs_amount_ap',
                                                                target=fix_payments_outs_amount,
                                                                args=(request, 'AP', related_invoice_list, ), daemon=False)
                            update_aging_thread.start()

                    # Add new Payment with MISC PAYMENT type
                    elif request.POST['transaction_type'] == '2':
                        AP_Payment_entry = form.save(commit=False)
                        AP_Payment_entry.batch_id = Batch_entry.id
                        AP_Payment_entry.document_type = DOCUMENT_TYPE_DICT['Miscellaneous Payment']
                        AP_Payment_entry.transaction_type = request.POST['transaction_type']
                        if 'is_posted' in request.POST:
                            AP_Payment_entry.status = int(STATUS_TYPE_DICT['Posted'])
                            AP_Payment_entry.posting_date = request.session['session_date'] \
                                if request.session['session_date'] else datetime.date.today()
                        else:
                            AP_Payment_entry.status = int(STATUS_TYPE_DICT['Open'])
                        AP_Payment_entry.journal_type = dict(TRANSACTION_TYPES)['AP Payment']
                        AP_Payment_entry.update_by = request.user.id
                        AP_Payment_entry.company_id = company_id
                        AP_Payment_entry.is_hidden = False
                        if 'is_manual_doc' in request.POST and request.POST['is_manual_doc']:
                            AP_Payment_entry.document_number = request.POST['document_number']
                        else:
                            AP_Payment_entry.document_number = AR_AP_generate_document_number(
                                company.id,
                                dict(TRANSACTION_TYPES)['AP Payment'])
                        AP_Payment_entry.amount = request.POST['amount'].replace(",", "")
                        AP_Payment_entry.tax_amount = request.POST['tax_amount'].replace(",", "")
                        AP_Payment_entry.total_amount = request.POST['total_amount'].replace(",", "")
                        AP_Payment_entry.orig_exch_rate = 0
                        AP_Payment_entry.save()

                        if 'is_posted' in request.POST:
                            GL_AP_Payment_Entry = deepcopy(AP_Payment_entry)
                            GL_AP_Payment_Entry.pk = None
                            GL_AP_Payment_Entry.journal_type = dict(TRANSACTION_TYPES)['GL']
                            GL_AP_Payment_Entry.status = int(STATUS_TYPE_DICT['Open'])
                            GL_AP_Payment_Entry.save()

                        exchange_rate = None
                        if 'exchange_rate' in request.POST and request.POST['exchange_rate']:
                            AP_Payment_entry.exchange_rate = request.POST['exchange_rate']
                        if 'exchange_rate_fk' in request.POST and request.POST['exchange_rate_fk']:
                            exchange_rate = ExchangeRate.objects.get(pk=request.POST['exchange_rate_fk'])
                        if not AP_Payment_entry.exchange_rate:
                            # get latest exchange rate
                            from_currency = AP_Payment_entry.bank.currency_id
                            to_currency = company.currency_id
                            exchange_rate = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                                        from_currency_id=from_currency,
                                                                        to_currency_id=to_currency,
                                                                        flag='ACCOUNTING', exchange_date=str(AP_Payment_entry.document_date.year) + '-' + str(AP_Payment_entry.document_date.month) + '-01').first()
                            if not exchange_rate:
                                exchange_rate = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                                            from_currency_id=from_currency,
                                                                            to_currency_id=to_currency,
                                                                            exchange_date__lte=AP_Payment_entry.document_date,
                                                                            flag='ACCOUNTING').order_by('exchange_date').last()
                            if not exchange_rate:
                                if from_currency == to_currency:
                                    # exchange_rate = ExchangeRate()
                                    # exchange_rate.from_currency_id = from_currency
                                    # exchange_rate.to_currency_id = to_currency
                                    # exchange_rate.company_id = company.id
                                    # exchange_rate.rate = 1
                                    # exchange_rate.is_hidden = 0
                                    # exchange_rate.flag = 'ACCOUNTING'
                                    # exchange_rate.save()
                                    AP_Payment_entry.exchange_rate = 1
                                    AP_Payment_entry.exchange_rate_fk_id = None
                                    exchange_rate = None
                                else:
                                    try:
                                        transactionlib.rollback()
                                    except:
                                        pass
                                    messages.error(request, NO_EXCHANGE_RATE)
                                    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
                            else:
                                AP_Payment_entry.exchange_rate = exchange_rate.rate
                                AP_Payment_entry.exchange_rate_fk_id = exchange_rate.id
                        if 'orig_rate' in request.POST:
                            AP_Payment_entry.orig_exch_rate = request.POST['orig_rate'] if request.POST['orig_rate'] != '' else exchange_rate.rate
                        else:
                            AP_Payment_entry.orig_exch_rate = AP_Payment_entry.exchange_rate

                        perd_month, perd_year = get_fiscal_year_period(company_id, AP_Payment_entry.document_date)
                        if perd_month and perd_year:
                            AP_Payment_entry.perd_month = perd_month
                            AP_Payment_entry.perd_year = perd_year
                        else:
                            AP_Payment_entry.perd_month = int(request.POST.get('perd_month'))
                            AP_Payment_entry.perd_year = int(request.POST.get('perd_year'))
                        AP_Payment_entry.save()

                        doc_number = update_next_doc_number(company_id, AP_Payment_entry.document_number, dict(TRANSACTION_TYPES)['AP Payment'])

                        # add related transaction for Payment/Misc Payment journal
                        # Debit for AP, Credit for AR
                        transaction_list_new = ast.literal_eval(request.POST['transaction_list_data']) if request.POST['transaction_list_data'] else []
                        for transaction in transaction_list_new:
                            trans = Transaction()
                            trans.distribution_code_id = transaction['distribution_id'] if transaction.get(
                                'distribution_id') else None
                            # trans.remark = transaction['description']
                            trans.description = transaction['description']
                            trans.account_id = transaction['account_id']
                            trans.amount = transaction['amount'].replace(",", "")
                            trans.base_tax_amount = transaction['base_tax_amount'].replace(",", "")
                            trans.tax_amount = transaction['tax_amount'].replace(",", "")
                            trans.total_amount = transaction['total_amount'].replace(",", "")
                            if transaction['tax_id'] and transaction['tax_id'] is not '0' and transaction['tax_id'] is not '':
                                trans.tax_id = int(transaction['tax_id'])
                            trans.currency_id = request.POST['currency']
                            trans.journal_id = AP_Payment_entry.id
                            trans.order_id = AP_Payment_entry.order_id
                            trans.company_id = company_id
                            trans.is_debit_account = True
                            trans.is_tax_include = int(transaction['is_tax_included'])
                            trans.is_tax_transaction = int(transaction['is_tax_transaction'])
                            trans.is_manual_tax_input = int(transaction['is_manual_tax_input'])
                            trans.update_by = request.user.id

                            trans.exchange_rate = AP_Payment_entry.exchange_rate
                            trans.functional_currency_id = company.currency_id
                            trans.functional_amount = float(round_number(float(trans.total_amount) * float(AP_Payment_entry.exchange_rate)))
                            if exchange_rate:
                                trans.rate_date = exchange_rate.exchange_date
                            else:
                                try:
                                    split_date = str(AP_Payment_entry.document_date).split('-')
                                    trans.rate_date = split_date[0] + '-' + split_date[1] + '-01'
                                except:
                                    trans.rate_date = AP_Payment_entry.document_date

                            trans.functional_balance_type = (BALANCE_TYPE_DICT['Credit'],
                                                             BALANCE_TYPE_DICT['Debit'])[trans.is_debit_account]
                            trans.transaction_date = getTransactionDate(request, AP_Payment_entry.document_date)
                            trans.save()

                            if 'is_posted' in request.POST:
                                # write GL row for Amount
                                if float(trans.amount) > 0:
                                    gl_trans_debit = deepcopy(trans)
                                    gl_trans_debit.pk = None
                                    gl_trans_debit.reference = GL_AP_Payment_Entry.payment_check_number
                                    gl_trans_debit.remark = GL_AP_Payment_Entry.name + ' - ' + to_string(
                                        GL_AP_Payment_Entry.reference) + ' - ' + to_string(trans.remark)
                                    gl_trans_debit.journal_id = GL_AP_Payment_Entry.id
                                    gl_trans_debit.total_amount = transaction['amount'].replace(",", "")
                                    gl_trans_debit.tax_amount = 0
                                    gl_trans_debit.functional_amount = float(round_number(float(gl_trans_debit.total_amount) * float(
                                        AP_Payment_entry.exchange_rate)))
                                    gl_trans_debit.save()
                                    total_func_debit += float(gl_trans_debit.functional_amount)
                                # if the tax_amount > 0, write a row for GST Output Tax transaction
                                if float(trans.tax_amount) > 0:
                                    gl_trans_tax = deepcopy(trans)
                                    gl_trans_tax.reference = GL_AP_Payment_Entry.payment_check_number
                                    gl_trans_tax.remark = GL_AP_Payment_Entry.name + ' - ' + to_string(
                                        GL_AP_Payment_Entry.reference) + ' - ' + to_string(trans.remark)
                                    gl_trans_tax.amount = transaction['tax_amount'].replace(",", "")
                                    gl_trans_tax.tax_amount = 0
                                    gl_trans_tax.total_amount = transaction['tax_amount'].replace(",", "")
                                    gl_trans_tax.functional_amount = float(round_number(float(gl_trans_tax.total_amount) * float(
                                        AP_Payment_entry.exchange_rate)))
                                    # tax_account = Account.objects.get(code='2380')
                                    gl_trans_tax.account_id = trans.tax.tax_account_code_id
                                    gl_trans_tax.save()
                                    total_func_debit += float(gl_trans_tax.functional_amount)

                    # calculate and import Batch data
                    batch_amount = Journal.objects.filter(batch_id=Batch_entry.id, company_id=company_id, is_hidden=0) \
                        .aggregate(batch_amount=Sum('total_amount'))
                    Batch_entry.batch_amount = batch_amount.get('batch_amount', Decimal(0.000000))
                    Batch_entry.company_id = company.id
                    Batch_entry.input_type = int(INPUT_TYPE_DICT['Manual Entry'])
                    Batch_entry.currency_id = request.POST['currency']
                    Batch_entry.no_entries += 1
                    Batch_entry.status = int(STATUS_TYPE_DICT['Open'])
                    if not Batch_entry.batch_no:
                        Batch_entry.batch_no = generate_batch_number(company.id, Batch_entry.batch_type)
                    Batch_entry.save()

                    messages.success(request, "AP Payment entry is created successfully")
                    # return redirect('/accounting/list/%s/%s/' % (Batch_entry.batch_type, Batch_entry.id))
                    return redirect('/accounting/add/APPayment/%s/' % (Batch_entry.id))
                else:
                    print("Form Error: ", form.errors)
                    print("Btach Form Error: ", batch_form.errors)
        if 'is_locked' in request.session and request.session['is_locked']:
            is_locked = 1
        else:
            is_locked = 0
        context.update({'form': form, 'batch_form': batch_form, 'distribution_code_list': distribution_code_list_ap,
                        'account_list': account_list, 'tax_list': tax_list, 'batch': batch, 'entry_no': entry_no,
                        'next_journal': next_journal, 'prev_journal': prev_journal, 'first_journal': first_journal,
                        'last_journal': last_journal, 'next_batch': next_batch, 'prev_batch': prev_batch,
                        'n_batch': n_batch, 'p_batch': p_batch, 'is_locked': is_locked})

        return render(request, 'AP_payment_entry.html', context)
    except Exception as e:
        print(EXCEPTION_JOURNAL_ADD % ('AP Payment'), e)
        logging.error(traceback.format_exc())
        messages.error(request, EXCEPTION_JOURNAL_ADD % ('AP Payment'))
        return redirect('/accounting/list/%s/%s/' % (dict(TRANSACTION_TYPES)['AP Payment'], batch_id))


@login_required
@check_fiscal
def journal_AP_Payment_edit(request, batch_id, journal_id):
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    try:
        with transactionlib.atomic():
            # if batch_id = 0, mean this is newly created batch
            context = {}
            p_batch = 0
            n_batch = 0
            prev_batch = 0
            next_batch = 0
            prev_journal = 0
            next_journal = 0
            first_journal = 0
            last_journal = 0
            journal = Journal.objects.get(pk=journal_id)
            is_manual_doc = journal.is_manual_doc
            if batch_id != '0':
                batch = Batch.objects.get(pk=batch_id)
                batch_form = BatchInfoForm(instance=batch)
                related_journal = Journal.objects.filter(batch_id=batch.id, company_id=company_id, is_hidden=0).first()
                context['bank_id'] = related_journal.bank_id
                prev_journal, next_journal, first_journal, last_journal = get_batch_journals(batch.id, journal, False)
                prev_batch, next_batch = get_nearest_batches(company_id, dict(TRANSACTION_TYPES)['AP Payment'], batch.batch_no)
            else:
                batch = Batch()
                batch.batch_type = dict(TRANSACTION_TYPES)['AP Payment']
                batch_form = BatchInfoForm()
                prev_batch, next_batch = get_nearest_batches(company_id, dict(TRANSACTION_TYPES)['AP Payment'], None)

            if prev_batch:
                p_batch = Journal.objects.get(pk=prev_batch).batch_id
            if next_batch:
                n_batch = Journal.objects.get(pk=next_batch).batch_id
            form = APPaymentInfoForm(instance=journal, company_id=company_id)
            company = Company.objects.get(pk=company_id)
            all_transaction_list = Transaction.objects.filter(company_id=company_id, is_hidden=0, journal_id=journal_id)
            # if int(journal.transaction_type)==1:
            # transaction_list = all_transaction_list.exclude(account_id=journal.bank.account_id)
            transaction_list = all_transaction_list
            if journal.transaction_type == PAYMENT_TRANSACTION_TYPES_DICT['Payment']:
                transaction_list = transaction_list.annotate(pending_balance=Sum((F('related_invoice__outstanding_amount'))))
            for transaction in transaction_list:
                if transaction.related_invoice:
                    # cut_date = request.session['session_date'].strftime(("%Y-%m-%d"))
                    # outstanding_balance = transaction.related_invoice.has_outstanding(cut_date)[1]
                    # transaction.outstanding_amount = (transaction.related_invoice.document_amount - (transaction.amount + transaction.discount_amount))
                    # transaction.outstanding_amount = outstanding_balance
                    outstanding_balance = transaction.related_invoice.real_outstanding
                    if outstanding_balance != 0:
                        if outstanding_balance < 0:
                            if int(transaction.related_invoice.document_type) == int(DOCUMENT_TYPE_DICT['Credit Note']):
                                outstanding_balance = math.fabs(outstanding_balance)
                            else:
                                outstanding_balance = 0
                    # else:
                    #     cut_date = request.session['session_date'].strftime(("%Y-%m-%d"))
                    #     outstanding_balance = transaction.related_invoice.has_outstanding(cut_date)[1]
                    transaction.outstanding_amount = outstanding_balance
                    if transaction.outstanding_amount > 0:
                        transaction.pending_balance = float(transaction.amount + transaction.discount_amount) + float(transaction.outstanding_amount)
                    else:
                        transaction.pending_balance = float(transaction.amount + transaction.discount_amount)

            if not transaction_list:
                transaction_list = all_transaction_list.filter(is_debit_account=True)

            deleted_transaction_list = transaction_list
            distribution_code_list = DistributionCode.objects.filter(is_hidden=False, is_active=True,
                                                                     company_id=company_id,
                                                                     type=DIS_CODE_TYPE_DICT['AP Distribution Code'])
            account_list = Account.objects.filter(is_hidden=False, is_active=True, company_id=company_id).order_by('account_segment', 'code')
            tax_list = Tax.objects.filter(is_hidden=False,
                                          company_id=company_id,
                                          tax_group__company_id=company_id,
                                          tax_group__transaction_type=int(TAX_TRX_TYPES_DICT['Purchases']))
            total_func_debit = 0.0

            distribution_code_list_ap = []
            for dist_code_list in distribution_code_list:
                distribution_code_list_obj = {}
                distribution_code_list_obj['id'] = dist_code_list.id
                distribution_code_list_obj['code'] = dist_code_list.code
                distribution_code_list_obj['name'] = dist_code_list.name
                distribution_code_list_obj['gl_account_id'] = dist_code_list.gl_account_id
                distribution_code_list_obj['tax_id'] = None
                for tax_code in tax_list:
                    if tax_code.distribution_code_id:
                        if tax_code.distribution_code_id == dist_code_list.id:
                            distribution_code_list_obj['tax_id'] = tax_code.id
                            break
                distribution_code_list_ap.append(distribution_code_list_obj)
            if request.method == 'POST':
                new_post = []
                if request.POST['transaction_type'] == '1' and request.POST['transaction_list_data']:
                    for old_trx in ast.literal_eval(request.POST['transaction_list_data']):
                        list_2 = {}
                        if old_trx['id']:
                            list_2['id'] = old_trx['id']
                        else:
                            list_2['id'] = None
                        list_2['document_number'] = old_trx['document_number']
                        list_2['document_type'] = old_trx['document_type']
                        list_2['payment_number'] = int(old_trx['payment_number'])
                        list_2['outstanding_amount'] = old_trx['outstanding_amount'].replace(",", "")
                        list_2['applied_amount'] = old_trx['applied_amount'].replace(",", "")
                        list_2['discount_amount'] = old_trx['discount_amount'].replace(",", "")
                        list_2['net_amount'] = old_trx['net_amount']
                        list_2['document_amount'] = old_trx['document_amount'].replace(",", "")
                        list_2['due_date'] = old_trx['due_date']
                        list_2['invoice_id'] = int(old_trx['invoice_id'])
                        new_post.append(list_2)
                    tot_amu = request.POST.get('total_amount', '')
                    tot_amu_1 = tot_amu.replace(",", "")
                    amu = request.POST.get('appliedAmount', '')
                    amu_1 = amu.replace(",", "")
                    batch_amu = request.POST.get('batch_amount', '')
                    batch_amu_1 = batch_amu.replace(",", "")
                    doc_amount = request.POST.get('document_amount', '')
                    doc_amount_1 = doc_amount.replace(",", "")
                    post = request.POST.copy()  # to make it mutable
                    post.update({
                        'total_amount': tot_amu_1,
                        'amount': amu_1,
                        'batch_amount': batch_amu_1,
                        'document_amount': doc_amount_1
                    })
                    request.POST = post
                elif request.POST['transaction_type'] == '2' and request.POST['transaction_list_data']:
                    tran_type = 0
                    for old_trx in ast.literal_eval(request.POST['transaction_list_data']):
                        list_1 = {}
                        list_1['amount'] = old_trx['amount'].replace(",", "")
                        list_1['base_tax_amount'] = old_trx['base_tax_amount'].replace(",", "")
                        if old_trx['id']:
                            list_1['id'] = old_trx['id']
                        else:
                            list_1['id'] = None
                        list_1['distribution_id'] = old_trx['distribution_id']
                        list_1['distribution_code'] = old_trx['distribution_code']
                        list_1['account_id'] = old_trx['account_id']
                        list_1['account_code'] = old_trx['account_code']
                        list_1['account_name'] = old_trx['account_name']
                        list_1['description'] = old_trx['description']
                        list_1['tax_amount'] = old_trx['tax_amount'].replace(",", "")
                        list_1['total_amount'] = old_trx['total_amount'].replace(",", "")
                        list_1['is_tax_included'] = int(old_trx['is_tax_included'])
                        list_1['is_tax_transaction'] = int(old_trx['is_tax_transaction'])
                        list_1['is_manual_tax_input'] = int(old_trx['is_manual_tax_input'])
                        list_1['tax_id'] = old_trx['tax_id']
                        new_post.append(list_1)

                        tot_amu = request.POST.get('total_amount', '')
                        tot_amu_1 = tot_amu.replace(",", "")
                        amu = request.POST.get('amount', '')
                        amu_1 = amu.replace(",", "")
                        batch_amu = request.POST.get('batch_amount', '')
                        batch_amu_1 = batch_amu.replace(",", "")
                        doc_amount = request.POST.get('document_amount', '')
                        doc_amount_1 = doc_amount.replace(",", "")
                        post = request.POST.copy()  # to make it mutable
                        post.update({
                            'total_amount': tot_amu_1,
                            'amount': amu_1,
                            'batch_amount': batch_amu_1,
                            'document_amount': doc_amount_1
                        })
                        request.POST = post
                request.POST['transaction_list_data'] = new_post
                batch_form = BatchInfoForm(request.POST, instance=batch)
                form = APPaymentInfoForm(request.POST, instance=journal, company_id=company_id)

                if 'is_locked' in request.session and request.session['is_locked']:
                    context.update(
                        {'form': form, 'batch_form': batch_form, 'distribution_code_list': distribution_code_list,
                         'account_list': account_list, 'tax_list': tax_list, 'batch': batch, 'is_locked': 1,
                         'transactions': transaction_list, 'journal': journal, 'next_journal': next_journal,
                         'prev_journal': prev_journal, 'first_journal': first_journal, 'last_journal': last_journal,
                         'next_batch': next_batch, 'prev_batch': prev_batch, 'n_batch': n_batch, 'p_batch': p_batch})
                    return render(request, 'AP_payment_entry.html', context)

                if form.is_valid() and batch_form.is_valid():
                    # init Batch to have Batch ID for related Entry
                    Batch_entry = batch_form.save(commit=False)
                    Batch_entry.source_ledger = SOURCE_LEDGER_DICT['Account Payable']
                    Batch_entry.save()

                    # Add new payment with PAYMENT Type
                    if request.POST['transaction_type'] == '1':
                        # calculate and import Entry data
                        AP_Payment_entry = form.save(commit=False)
                        AP_Payment_entry.batch_id = Batch_entry.id
                        AP_Payment_entry.document_type = DOCUMENT_TYPE_DICT['Payment']
                        AP_Payment_entry.transaction_type = request.POST['transaction_type']
                        if 'is_posted' in request.POST:
                            AP_Payment_entry.status = int(STATUS_TYPE_DICT['Posted'])
                        else:
                            AP_Payment_entry.status = int(STATUS_TYPE_DICT['Open'])
                        AP_Payment_entry.journal_type = dict(TRANSACTION_TYPES)['AP Payment']
                        AP_Payment_entry.update_by = request.user.id
                        AP_Payment_entry.company_id = company_id
                        AP_Payment_entry.is_hidden = False
                        AP_Payment_entry.document_number = request.POST['document_number']
                        AP_Payment_entry.is_manual_doc = is_manual_doc
                        AP_Payment_entry.payment_check_number = request.POST['payment_check_number']
                        AP_Payment_entry.original_currency_id = AP_Payment_entry.supplier.currency.id
                        AP_Payment_entry.payment_currency_id = AP_Payment_entry.bank.currency.id
                        AP_Payment_entry.has_old_rate = False
                        AP_Payment_entry.save()

                        if 'is_posted' in request.POST:
                            GL_AP_Payment_Entry = deepcopy(AP_Payment_entry)
                            GL_AP_Payment_Entry.pk = None
                            GL_AP_Payment_Entry.journal_type = dict(TRANSACTION_TYPES)['GL']
                            GL_AP_Payment_Entry.status = int(STATUS_TYPE_DICT['Open'])
                            GL_AP_Payment_Entry.save()

                        # get latest exchange rate
                        account_set_item = AccountSet.objects.get(pk=request.POST['account_set'])
                        exchange_rate = None
                        if 'exchange_rate' in request.POST and request.POST['exchange_rate']:
                            AP_Payment_entry.exchange_rate = request.POST['exchange_rate']
                        if 'exchange_rate_fk' in request.POST and request.POST['exchange_rate_fk']:
                            exchange_rate = ExchangeRate.objects.get(pk=request.POST['exchange_rate_fk'])
                        if not AP_Payment_entry.exchange_rate:
                            from_currency = AP_Payment_entry.bank.currency_id
                            to_currency = company.currency_id
                            exchange_rate = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                                        from_currency_id=from_currency,
                                                                        to_currency_id=to_currency,
                                                                        flag='ACCOUNTING', exchange_date=str(AP_Payment_entry.document_date.year) + '-' + str(AP_Payment_entry.document_date.month) + '-01').first()
                            if not exchange_rate:
                                exchange_rate = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                                            from_currency_id=from_currency,
                                                                            to_currency_id=to_currency,
                                                                            exchange_date__lte=AP_Payment_entry.document_date,
                                                                            flag='ACCOUNTING').order_by('exchange_date').last()
                            if not exchange_rate:
                                if from_currency == to_currency:
                                    # exchange_rate = ExchangeRate()
                                    # exchange_rate.from_currency_id = from_currency
                                    # exchange_rate.to_currency_id = to_currency
                                    # exchange_rate.company_id = company.id
                                    # exchange_rate.rate = 1
                                    # exchange_rate.is_hidden = 0
                                    # exchange_rate.flag = 'ACCOUNTING'
                                    # exchange_rate.save()
                                    AP_Payment_entry.exchange_rate = 1
                                    AP_Payment_entry.exchange_rate_fk_id = None
                                    exchange_rate = None
                                else:
                                    try:
                                        transactionlib.rollback()
                                    except:
                                        pass
                                    messages.error(request, NO_EXCHANGE_RATE)
                                    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
                            else:
                                AP_Payment_entry.exchange_rate = exchange_rate.rate
                                AP_Payment_entry.exchange_rate_fk_id = exchange_rate.id
                        # if 'orig_rate' in request.POST:
                        #     AP_Payment_entry.orig_exch_rate = request.POST['orig_rate'] if request.POST['orig_rate'] != '' else exchange_rate.rate
                        # else:
                        #     AP_Payment_entry.orig_exch_rate = exchange_rate.rate

                        perd_month, perd_year = get_fiscal_year_period(company_id, AP_Payment_entry.document_date)
                        if perd_month and perd_year:
                            AP_Payment_entry.perd_month = perd_month
                            AP_Payment_entry.perd_year = perd_year
                        else:
                            AP_Payment_entry.perd_month = int(request.POST.get('perd_month'))
                            AP_Payment_entry.perd_year = int(request.POST.get('perd_year'))
                        AP_Payment_entry.save()

                        # add related transaction for Payment/Misc Payment journal
                        # Debit for AP, Credit for AR
                        related_invoice_list = []
                        transaction_list_new = request.POST['transaction_list_data'] if request.POST['transaction_list_data'] else []
                        for transaction in transaction_list_new:
                            trans = None
                            if transaction['id']:
                                # get a list of deleted old_transaction
                                deleted_transaction_list = deleted_transaction_list.exclude(pk=transaction['id'])
                                trans = Transaction.objects.get(pk=transaction['id'])
                                trans.is_debit_account = True
                                trans.is_credit_account = False
                                # calculate the paid amount and outstanding amount for related_invoice
                                related_invoice = None
                                related_invoice = Journal.objects.get(pk=transaction['invoice_id'])
                                # revert the previous amount first, then calculate the new value
                                related_invoice.real_discount = float(related_invoice.real_discount) - float(trans.discount_amount)
                                related_invoice.real_outstanding = float(related_invoice.real_outstanding) + float(trans.amount) + float(trans.discount_amount)

                                trans.amount = transaction['applied_amount']
                                trans.total_amount = transaction['applied_amount']
                                trans.base_tax_amount = transaction['applied_amount']
                                trans.discount_amount = transaction['discount_amount']
                                trans.update_by = request.user.id
                                trans.company_id = company_id
                                if AP_Payment_entry.original_currency_id:
                                    trans.currency_id = AP_Payment_entry.original_currency_id
                                else:
                                    trans.currency_id = AP_Payment_entry.currency_id
                                if trans.currency_id == AP_Payment_entry.currency_id:
                                    trans.exchange_rate = AP_Payment_entry.exchange_rate
                                elif trans.currency_id == company.currency_id:
                                    trans.exchange_rate = 1.0
                                elif trans.currency_id != company.currency_id and\
                                    'orig_exch_rate' in request.POST and request.POST['orig_exch_rate'] and\
                                        request.POST['orig_exch_rate'] != 1.0:
                                    trans.exchange_rate = request.POST['orig_exch_rate']
                                if not trans.exchange_rate:
                                    if trans.currency_id != AP_Payment_entry.currency_id:
                                        from_currency = trans.currency_id
                                        to_currency = company.currency_id

                                        exchange_rate = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                                                    from_currency_id=from_currency,
                                                                                    to_currency_id=to_currency,
                                                                                    flag='ACCOUNTING', exchange_date=str(AP_Payment_entry.document_date.year) + '-' + str(AP_Payment_entry.document_date.month) + '-01').first()
                                        if not exchange_rate:
                                            exchange_rate = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                                                        from_currency_id=from_currency,
                                                                                        to_currency_id=to_currency,
                                                                                        exchange_date__lte=AP_Payment_entry.document_date,
                                                                                        flag='ACCOUNTING').order_by('exchange_date').last()
                                        if exchange_rate:
                                            trans.exchange_rate = exchange_rate.rate
                                        else:
                                            trans.exchange_rate = 1.0
                                    else:
                                        trans.exchange_rate = AP_Payment_entry.exchange_rate
                                trans.journal_id = AP_Payment_entry.id
                                trans.account_id = account_set_item.control_account_id if account_set_item.control_account else None
                                trans.related_invoice_id = transaction['invoice_id']

                                trans.functional_currency_id = company.currency_id
                                trans.functional_amount = float(round_number(float(trans.total_amount) * float(trans.exchange_rate)))
                                trans.functional_balance_type = (BALANCE_TYPE_DICT['Credit'],
                                                                 BALANCE_TYPE_DICT['Debit'])[trans.is_debit_account]
                                if exchange_rate:
                                    trans.rate_date = exchange_rate.exchange_date
                                else:
                                    try:
                                        split_date = str(AP_Payment_entry.document_date).split('-')
                                        trans.rate_date = split_date[0] + '-' + split_date[1] + '-01'
                                    except:
                                        trans.rate_date = AP_Payment_entry.document_date

                                # related_invoice.discount_amount = float(related_invoice.discount_amount) + float(trans.discount_amount)
                                # related_invoice.paid_amount = float(related_invoice.paid_amount) + float(trans.amount)
                                # related_invoice.outstanding_amount = float(related_invoice.outstanding_amount) - float(
                                #     related_invoice.paid_amount)
                                discount_amount = float(related_invoice.real_discount) + float(trans.discount_amount)
                                outstanding_amount = float(related_invoice.real_outstanding) - float(trans.amount)

                                real_outstanding_amount = float(outstanding_amount) - float(trans.discount_amount)
                                related_invoice.real_outstanding = real_outstanding_amount
                                related_invoice.real_discount = discount_amount

                                # if float(real_outstanding_amount) <= 0:
                                #     related_invoice.is_fully_paid = True
                                #     related_invoice.fully_paid_date = AP_Payment_entry.document_date
                                #     related_invoice.outstanding_amount = 0
                                # else:
                                #     related_invoice.is_fully_paid = False
                                #     related_invoice.fully_paid_date = None

                                # trans.related_journal_outstanding = real_outstanding_amount
                                trans.save()
                                related_invoice.save()
                                # related_invoice_list.append(related_invoice.id)
                            else:
                                trans = Transaction()
                                trans.is_debit_account = True
                                trans.is_credit_account = False
                                trans.amount = transaction['applied_amount']
                                trans.base_tax_amount = transaction['applied_amount']
                                trans.discount_ = transaction['discount_amount']
                                trans.update_by = request.user.id
                                trans.company_id = company_id
                                if AP_Payment_entry.original_currency_id:
                                    trans.currency_id = AP_Payment_entry.original_currency_id
                                else:
                                    trans.currency_id = AP_Payment_entry.currency_id
                                if trans.currency_id == AP_Payment_entry.currency_id:
                                    trans.exchange_rate = AP_Payment_entry.exchange_rate
                                elif trans.currency_id == company.currency_id:
                                    trans.exchange_rate = 1.0
                                elif trans.currency_id != company.currency_id and\
                                    'orig_exch_rate' in request.POST and request.POST['orig_exch_rate'] and\
                                        request.POST['orig_exch_rate'] != 1.0:
                                    trans.exchange_rate = request.POST['orig_exch_rate']
                                if not trans.exchange_rate:
                                    if trans.currency_id != AP_Payment_entry.currency_id:
                                        from_currency = trans.currency_id
                                        to_currency = company.currency_id

                                        exchange_rate = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                                                    from_currency_id=from_currency,
                                                                                    to_currency_id=to_currency,
                                                                                    flag='ACCOUNTING', exchange_date=str(AP_Payment_entry.document_date.year) + '-' + str(AP_Payment_entry.document_date.month) + '-01').first()
                                        if not exchange_rate:
                                            exchange_rate = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                                                        from_currency_id=from_currency,
                                                                                        to_currency_id=to_currency,
                                                                                        exchange_date__lte=AP_Payment_entry.document_date,
                                                                                        flag='ACCOUNTING').order_by('exchange_date').last()
                                        if exchange_rate:
                                            trans.exchange_rate = exchange_rate.rate
                                        else:
                                            trans.exchange_rate = 1.0
                                    else:
                                        trans.exchange_rate = AP_Payment_entry.exchange_rate
                                trans.total_amount = float(transaction['applied_amount'])
                                trans.journal_id = AP_Payment_entry.id
                                trans.account_id = account_set_item.control_account_id if account_set_item.control_account else None
                                trans.related_invoice_id = transaction['invoice_id']

                                # calculate the paid amount and outstanding amount for related_invoice
                                related_invoice = None
                                related_invoice = Journal.objects.get(pk=transaction['invoice_id'])
                                discount_amount = float(related_invoice.real_discount) + float(trans.discount_amount)
                                outstanding_amount = float(related_invoice.real_outstanding) - float(trans.amount)

                                real_outstanding_amount = float(outstanding_amount) - float(trans.discount_amount)
                                related_invoice.real_outstanding = real_outstanding_amount
                                related_invoice.real_discount = discount_amount

                                # if float(real_outstanding_amount) <= 0:
                                #     related_invoice.is_fully_paid = True
                                #     related_invoice.fully_paid_date = AP_Payment_entry.document_date
                                #     related_invoice.outstanding_amount = 0
                                # else:
                                #     related_invoice.is_fully_paid = False
                                #     related_invoice.fully_paid_date = None

                                trans.functional_currency_id = company.currency_id
                                trans.functional_amount = float(round_number(float(trans.total_amount) * float(trans.exchange_rate)))
                                if exchange_rate:
                                    trans.rate_date = exchange_rate.exchange_date
                                else:
                                    try:
                                        split_date = str(AP_Payment_entry.document_date).split('-')
                                        trans.rate_date = split_date[0] + '-' + split_date[1] + '-01'
                                    except:
                                        trans.rate_date = AP_Payment_entry.document_date

                                if 'is_posted' in request.POST:
                                    # write GL row for Amount
                                    if float(trans.amount) > 0:
                                        gl_trans_debit = deepcopy(trans)
                                        gl_trans_debit.pk = None
                                        gl_trans_debit.reference = GL_AP_Payment_Entry.payment_check_number
                                        gl_trans_debit.remark = GL_AP_Payment_Entry.name + ' - ' + to_string(
                                            GL_AP_Payment_Entry.reference) + ' - ' + to_string(trans.remark)
                                        gl_trans_debit.journal_id = GL_AP_Payment_Entry.id
                                        gl_trans_debit.total_amount = transaction['amount']
                                        gl_trans_debit.tax_amount = 0
                                        gl_trans_debit.functional_amount = float(round_number(float(gl_trans_debit.total_amount) * float(
                                            trans.exchange_rate)))
                                        gl_trans_debit.transaction_date = getTransactionDate(request, GL_AP_Payment_Entry.document_date)
                                        gl_trans_debit.save()
                                        total_func_debit += float(gl_trans_debit.functional_amount)

                                        # related_invoice.payment_number += 1

                                related_invoice.save()
                                # trans.related_journal_outstanding = related_invoice.outstanding_amount
                                trans.functional_balance_type = (BALANCE_TYPE_DICT['Credit'],
                                                                 BALANCE_TYPE_DICT['Debit'])[trans.is_debit_account]
                                trans.transaction_date = getTransactionDate(request, AP_Payment_entry.document_date)
                                trans.save()
                                deleted_transaction_list = deleted_transaction_list.exclude(pk=trans.id)
                                # related_invoice_list.append(related_invoice.id)
                        AP_Payment_entry.amount = request.POST['total_amount'].replace(",", "")
                        AP_Payment_entry.total_amount = request.POST['total_amount'].replace(",", "")
                        AP_Payment_entry.payment_amount = request.POST['payment_amount'].replace(",", "")
                        AP_Payment_entry.original_amount = request.POST['original_amount'].replace(",", "")
                        AP_Payment_entry.save()

                        for deleted_transaction in deleted_transaction_list:
                            deleted_transaction.is_hidden = 1
                            related_invoice = None
                            if deleted_transaction.related_invoice_id:
                                related_invoice = Journal.objects.get(pk=deleted_transaction.related_invoice_id)
                                # revert the previous amount first, then calculate the new value
                                discount_amount = float(
                                    related_invoice.real_discount) - float(deleted_transaction.discount_amount)
                                outstanding_amount = float(
                                    related_invoice.real_outstanding) + float(deleted_transaction.amount)

                                real_outstanding_amount = float(outstanding_amount) - float(deleted_transaction.discount_amount)
                                related_invoice.real_outstanding = real_outstanding_amount
                                related_invoice.real_discount = discount_amount
                                related_invoice.is_fully_paid = False
                                related_invoice.fully_paid_date = None
                                related_invoice.save()
                            deleted_transaction.save()
                            # related_invoice_list.append(related_invoice.id)

                        # fix aging
                        if len(related_invoice_list):
                            update_aging_thread = threading.Thread(name='fix_payments_outs_amount_ap',
                                                                target=fix_payments_outs_amount,
                                                                args=(request, 'AP', related_invoice_list, ), daemon=False)
                            update_aging_thread.start()
                    # Add new Payment with MISC PAYMENT type
                    elif request.POST['transaction_type'] == '2':
                        AP_Payment_entry = form.save(commit=False)
                        AP_Payment_entry.batch_id = Batch_entry.id
                        AP_Payment_entry.document_type = DOCUMENT_TYPE_DICT['Miscellaneous Payment']
                        AP_Payment_entry.transaction_type = request.POST['transaction_type']
                        if 'is_posted' in request.POST:
                            AP_Payment_entry.status = int(STATUS_TYPE_DICT['Posted'])
                            AP_Payment_entry.posting_date = datetime.date.today()
                        else:
                            AP_Payment_entry.status = int(STATUS_TYPE_DICT['Open'])
                        AP_Payment_entry.journal_type = dict(TRANSACTION_TYPES)['AP Payment']
                        AP_Payment_entry.update_by = request.user.id
                        AP_Payment_entry.company_id = company_id
                        AP_Payment_entry.is_hidden = False
                        AP_Payment_entry.document_number = request.POST['document_number']
                        AP_Payment_entry.is_manual_doc = is_manual_doc
                        AP_Payment_entry.amount = request.POST['amount']
                        AP_Payment_entry.tax_amount = request.POST['tax_amount']
                        AP_Payment_entry.total_amount = request.POST['total_amount']
                        AP_Payment_entry.payment_check_number = request.POST['payment_check_number']
                        AP_Payment_entry.orig_exch_rate = 0
                        AP_Payment_entry.has_old_rate = False
                        AP_Payment_entry.save()

                        if 'is_posted' in request.POST:
                            GL_AP_Payment_Entry = deepcopy(AP_Payment_entry)
                            GL_AP_Payment_Entry.pk = None
                            GL_AP_Payment_Entry.journal_type = dict(TRANSACTION_TYPES)['GL']
                            GL_AP_Payment_Entry.status = int(STATUS_TYPE_DICT['Open'])
                            GL_AP_Payment_Entry.save()

                        exchange_rate = None
                        if 'exchange_rate' in request.POST and request.POST['exchange_rate']:
                            AP_Payment_entry.exchange_rate = request.POST['exchange_rate']
                        if 'exchange_rate_fk' in request.POST and request.POST['exchange_rate_fk']:
                            exchange_rate = ExchangeRate.objects.get(pk=request.POST['exchange_rate_fk'])
                        if not AP_Payment_entry.exchange_rate:
                            # get latest exchange rate
                            from_currency = AP_Payment_entry.bank.currency_id
                            to_currency = company.currency_id
                            exchange_rate = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                                        from_currency_id=from_currency,
                                                                        to_currency_id=to_currency,
                                                                        flag='ACCOUNTING', exchange_date=str(AP_Payment_entry.document_date.year) + '-' + str(AP_Payment_entry.document_date.month) + '-01').first()
                            if not exchange_rate:
                                exchange_rate = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                                            from_currency_id=from_currency,
                                                                            to_currency_id=to_currency,
                                                                            exchange_date__lte=AP_Payment_entry.document_date,
                                                                            flag='ACCOUNTING').order_by('exchange_date').last()

                            if not exchange_rate:
                                if from_currency == to_currency:
                                    # exchange_rate = ExchangeRate()
                                    # exchange_rate.from_currency_id = from_currency
                                    # exchange_rate.to_currency_id = to_currency
                                    # exchange_rate.company_id = company.id
                                    # exchange_rate.rate = 1
                                    # exchange_rate.is_hidden = 0
                                    # exchange_rate.flag = 'ACCOUNTING'
                                    # exchange_rate.save()
                                    AP_Payment_entry.exchange_rate = 1
                                    AP_Payment_entry.exchange_rate_fk_id = None
                                    exchange_rate = None
                                else:
                                    try:
                                        transactionlib.rollback()
                                    except:
                                        pass
                                    messages.error(request, NO_EXCHANGE_RATE)
                                    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
                            else:
                                AP_Payment_entry.exchange_rate = exchange_rate.rate
                                AP_Payment_entry.exchange_rate_fk_id = exchange_rate.id
                        if 'orig_rate' in request.POST:
                            AP_Payment_entry.orig_exch_rate = request.POST['orig_rate'] if request.POST['orig_rate'] != '' else exchange_rate.rate
                        else:
                            AP_Payment_entry.orig_exch_rate = AP_Payment_entry.exchange_rate

                        perd_month, perd_year = get_fiscal_year_period(company_id, AP_Payment_entry.document_date)
                        if perd_month and perd_year:
                            AP_Payment_entry.perd_month = perd_month
                            AP_Payment_entry.perd_year = perd_year
                        else:
                            AP_Payment_entry.perd_month = int(request.POST.get('perd_month'))
                            AP_Payment_entry.perd_year = int(request.POST.get('perd_year'))
                        AP_Payment_entry.save()

                        # add related transaction for Payment/Misc Payment journal
                        # Debit for AP, Credit for AR
                        transaction_list_new = request.POST['transaction_list_data'] if request.POST['transaction_list_data'] else []
                        for transaction in transaction_list_new:
                            trans = None
                            if transaction['id']:
                                # get a list of deleted old_transaction
                                deleted_transaction_list = deleted_transaction_list.exclude(pk=transaction['id'])

                                trans = Transaction.objects.get(pk=transaction['id'])
                                trans.distribution_code_id = transaction['distribution_id'] if transaction.get(
                                    'distribution_id') else None
                                # trans.remark = transaction['description']
                                trans.description = transaction['description']
                                trans.account_id = transaction['account_id']
                                trans.amount = transaction['amount']
                                trans.base_tax_amount = transaction['base_tax_amount']
                                trans.tax_amount = transaction['tax_amount']
                                trans.total_amount = transaction['total_amount']
                                if transaction['tax_id'] and transaction['tax_id'] is not '0' and transaction['tax_id'] is not '':
                                    trans.tax_id = int(transaction['tax_id'])
                                else:
                                    trans.tax_id = None
                                trans.currency_id = request.POST['currency']
                                trans.is_tax_include = int(transaction['is_tax_included'])
                                trans.is_tax_transaction = int(transaction['is_tax_transaction'])
                                trans.is_manual_tax_input = int(transaction['is_manual_tax_input'])

                                trans.exchange_rate = AP_Payment_entry.exchange_rate
                                trans.functional_currency_id = company.currency_id
                                trans.functional_amount = float(round_number(float(trans.total_amount) * float(AP_Payment_entry.exchange_rate)))
                                if exchange_rate:
                                    trans.rate_date = exchange_rate.exchange_date
                                else:
                                    try:
                                        split_date = str(AP_Payment_entry.document_date).split('-')
                                        trans.rate_date = split_date[0] + '-' + split_date[1] + '-01'
                                    except:
                                        trans.rate_date = AP_Payment_entry.document_date

                                trans.save()
                            else:
                                trans = Transaction()
                                trans.distribution_code_id = transaction['distribution_id'] if transaction.get(
                                    'distribution_id') else None
                                # trans.remark = transaction['description']
                                trans.description = transaction['description']
                                trans.account_id = transaction['account_id']
                                trans.amount = transaction['amount']
                                trans.base_tax_amount = transaction['amount']
                                trans.tax_amount = transaction['tax_amount']
                                trans.total_amount = transaction['total_amount']
                                if transaction['tax_id'] and transaction['tax_id'] is not '0' and transaction['tax_id'] is not '':
                                    trans.tax_id = int(transaction['tax_id'])
                                else:
                                    trans.tax_id = None
                                trans.currency_id = request.POST['currency']
                                trans.journal_id = AP_Payment_entry.id
                                trans.order_id = AP_Payment_entry.order_id
                                trans.company_id = company_id
                                trans.is_debit_account = True
                                trans.is_tax_include = int(transaction['is_tax_included'])
                                trans.is_tax_transaction = int(transaction['is_tax_transaction'])
                                trans.is_manual_tax_input = int(transaction['is_manual_tax_input'])
                                trans.update_by = request.user.id

                                trans.exchange_rate = AP_Payment_entry.exchange_rate
                                trans.functional_currency_id = company.currency_id
                                trans.functional_amount = float(round_number(float(trans.total_amount) * float(AP_Payment_entry.exchange_rate)))
                                if exchange_rate:
                                    trans.rate_date = exchange_rate.exchange_date
                                else:
                                    try:
                                        split_date = str(AP_Payment_entry.document_date).split('-')
                                        trans.rate_date = split_date[0] + '-' + split_date[1] + '-01'
                                    except:
                                        trans.rate_date = AP_Payment_entry.document_date

                                trans.functional_balance_type = (BALANCE_TYPE_DICT['Credit'],
                                                                 BALANCE_TYPE_DICT['Debit'])[trans.is_debit_account]
                                trans.transaction_date = getTransactionDate(request, AP_Payment_entry.document_date)
                                trans.save()
                                deleted_transaction_list = deleted_transaction_list.exclude(pk=trans.id)

                        for deleted_transaction in deleted_transaction_list:
                            deleted_transaction.is_hidden = 1
                            deleted_transaction.save()

                            if 'is_posted' in request.POST:
                                # write GL row for Amount
                                if float(trans.amount) > 0:
                                    gl_trans_debit = deepcopy(trans)
                                    gl_trans_debit.pk = None
                                    gl_trans_debit.reference = GL_AP_Payment_Entry.payment_check_number
                                    gl_trans_debit.remark = GL_AP_Payment_Entry.name + ' - ' + to_string(
                                        GL_AP_Payment_Entry.reference) + ' - ' + to_string(trans.remark)
                                    gl_trans_debit.journal_id = GL_AP_Payment_Entry.id
                                    gl_trans_debit.total_amount = transaction['amount']
                                    gl_trans_debit.tax_amount = 0
                                    gl_trans_debit.functional_amount = float(round_number(float(gl_trans_debit.total_amount) * float(
                                        AP_Payment_entry.exchange_rate)))
                                    gl_trans_debit.transaction_date = getTransactionDate(request, GL_AP_Payment_Entry.document_date)
                                    gl_trans_debit.save()
                                    total_func_debit += float(gl_trans_debit.functional_amount)
                                # if the tax_amount > 0, write a row for GST Output Tax transaction
                                if float(trans.tax_amount) > 0:
                                    gl_trans_tax = deepcopy(trans)
                                    gl_trans_tax.reference = GL_AP_Payment_Entry.payment_check_number
                                    gl_trans_tax.remark = GL_AP_Payment_Entry.name + ' - ' + to_string(
                                        GL_AP_Payment_Entry.reference) + ' - ' + to_string(trans.remark)
                                    gl_trans_tax.amount = transaction['tax_amount']
                                    gl_trans_tax.base_tax_amount = transaction['tax_amount']
                                    gl_trans_tax.tax_amount = 0
                                    gl_trans_tax.total_amount = transaction['tax_amount']
                                    gl_trans_tax.functional_amount = float(round_number(float(gl_trans_tax.total_amount) * float(
                                        AP_Payment_entry.exchange_rate)))
                                    # tax_account = Account.objects.get(code='2380')
                                    gl_trans_tax.account_id = trans.tax.tax_account_code_id
                                    gl_trans_tax.transaction_date = getTransactionDate(request, GL_AP_Payment_Entry.document_date)
                                    gl_trans_tax.save()
                    # calculate and import Batch data
                    batch_amount = Journal.objects.filter(batch_id=Batch_entry.id, company_id=company_id, is_hidden=0) \
                        .aggregate(batch_amount=Sum('total_amount'))
                    Batch_entry.batch_amount = batch_amount.get('batch_amount', Decimal(0.000000))
                    Batch_entry.company_id = company.id
                    Batch_entry.input_type = int(INPUT_TYPE_DICT['Manual Entry'])
                    Batch_entry.currency_id = request.POST['currency']
                    Batch_entry.status = int(STATUS_TYPE_DICT['Open'])
                    if not Batch_entry.batch_no:
                        Batch_entry.batch_no = generate_batch_number(company.id, Batch_entry.batch_type)
                    Batch_entry.save()

                    return redirect('/accounting/list/%s/%s/' % (Batch_entry.batch_type, Batch_entry.id))
                else:
                    print("Form Error: ", form.errors)
        
        has_old_rate = 1 if journal.has_old_rate else 0
        if 'is_locked' in request.session and request.session['is_locked']:
            is_locked = 1
        else:
            is_locked = 0
        context.update({'form': form, 'batch_form': batch_form, 'distribution_code_list': distribution_code_list_ap,
                        'account_list': account_list, 'tax_list': tax_list, 'batch': batch, 'is_locked': is_locked,
                        'transactions': transaction_list, 'journal': journal, 'next_journal': next_journal,
                        'prev_journal': prev_journal, 'first_journal': first_journal, 'last_journal': last_journal,
                        'next_batch': next_batch, 'prev_batch': prev_batch, 'n_batch': n_batch, 'p_batch': p_batch,
                        'journal_type': journal.journal_type, 'has_old_rate': has_old_rate})
        return render(request, 'AP_payment_entry.html', context)
    except Exception as e:
        print(EXCEPTION_JOURNAL_EDIT % ('AP Payment'), e)
        logging.error(traceback.format_exc())
        messages.error(request, EXCEPTION_JOURNAL_EDIT % ('AP Payment'))
        return redirect('/accounting/list/%s/%s/' % (dict(TRANSACTION_TYPES)['AP Payment'], batch_id))


@login_required
def journal_AP_Payment_delete(request, journal_id):
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    try:
        with transactionlib.atomic():
            # get journal
            journal = Journal.objects.get(pk=journal_id)
            journal.is_hidden = True
            journal.update_by = request.user.id
            journal.save()
            # update batch number entries
            batch = Batch.objects.get(pk=journal.batch_id)
            batch.no_entries -= 1
            batch.update_by = request.user.id

            # journal transactions
            if journal.transaction_type == PAYMENT_TRANSACTION_TYPES_DICT['Payment']:
                related_invoice_list = []
                transactions = Transaction.objects.filter(company_id=company_id, is_hidden=0, journal_id=journal_id)
                for trans in transactions:
                    trans.is_hidden = True
                    trans.update_by = request.user.id
                    trans.save()
                    if trans.is_debit_account == 1:
                        if trans.related_invoice_id:
                            related_invoice = Journal.objects.get(pk=trans.related_invoice_id)
                            discount_amount = float(
                                related_invoice.real_discount) - float(trans.discount_amount)
                            outstanding_amount = float(
                                related_invoice.real_outstanding) + float(trans.amount)

                            real_outstanding_amount = float(outstanding_amount) - float(trans.discount_amount)
                            related_invoice.real_outstanding = real_outstanding_amount
                            related_invoice.real_discount = discount_amount
                            related_invoice.is_fully_paid = False
                            related_invoice.fully_paid_date = None
                            related_invoice.save()
                            # related_invoice_list.append(related_invoice.id)
                            if trans.exchange_rate:
                                trans.functional_amount = float(round_number(float(trans.amount) * float(trans.exchange_rate)))
                        trans.save()
                # fix aging
                if len(related_invoice_list):
                    update_aging_thread = threading.Thread(name='fix_payments_outs_amount_ap',
                                                        target=fix_payments_outs_amount,
                                                        args=(request, 'AP', related_invoice_list, ), daemon=False)
                    update_aging_thread.start()
            else:
                transactions = Transaction.objects.filter(company_id=company_id, is_hidden=0,
                                                          journal_id=journal_id)
                for trans in transactions:
                    trans.is_hidden = True
                    trans.update_by = request.user.id
                    trans.save()

            batch_amount = Journal.objects.filter(batch_id=batch.id, company_id=company_id, is_hidden=0) \
                .aggregate(batch_amount=Sum('total_amount'))
            if batch_amount.get('batch_amount'):
                batch.batch_amount = batch_amount.get('batch_amount')
            else:
                batch.batch_amount = Decimal(0.000000)
            batch.save()

            return redirect('/accounting/list/%s/%s/' % (batch.batch_type, batch.id))

    except Exception as e:
        print(EXCEPTION_JOURNAL_DELETE % ('AP Payment'), e)
        logging.error(traceback.format_exc())
        messages.error(request, EXCEPTION_JOURNAL_DELETE % ('AP Payment'))


@login_required
def journal_AP_Payment_batch_delete(request, batch_id):
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    with transactionlib.atomic():
        try:
            # Batch
            batch = Batch.objects.get(pk=batch_id)
            batch.status = STATUS_TYPE_DICT['Deleted']
            batch.update_by = request.user.id
            batch.save()

            # Journal
            related_invoice_list = []
            list_journal = Journal.objects.filter(batch_id=batch_id, company_id=company_id, is_hidden=0)
            for journal in list_journal:
                journal.is_hidden = True
                journal.update_by = request.user.id
                journal.update_date = datetime.datetime.now()
                journal.save()
                # journal transactions
                transactions = Transaction.objects.filter(company_id=company_id, is_hidden=0, journal_id=journal.id)
                if journal.transaction_type == PAYMENT_TRANSACTION_TYPES_DICT['Payment']:
                    for trans in transactions:
                        trans.is_hidden = True
                        trans.update_date = datetime.datetime.now()
                        trans.update_by = request.user.id
                        if trans.is_debit_account == 1:
                            try:
                                if trans.related_invoice_id:
                                    related_invoice = Journal.objects.get(pk=trans.related_invoice_id)
                                    discount_amount = float(
                                    related_invoice.real_discount) - float(trans.discount_amount)
                                    outstanding_amount = float(
                                        related_invoice.real_outstanding) + float(trans.amount)

                                    real_outstanding_amount = float(outstanding_amount) - float(trans.discount_amount)
                                    related_invoice.real_outstanding = real_outstanding_amount
                                    related_invoice.real_discount = discount_amount
                                    related_invoice.is_fully_paid = False
                                    related_invoice.fully_paid_date = None
                                    related_invoice.save()
                                    # related_invoice_list.append(related_invoice.id)
                            except Exception as e:
                                print(e)
                            if trans.exchange_rate:
                                trans.functional_amount = float(round_number(float(trans.amount) * float(trans.exchange_rate)))
                        trans.save()
                else:
                    for trans in transactions:
                        trans.is_hidden = True
                        trans.update_date = datetime.datetime.now()
                        trans.update_by = request.user.id
                        trans.save()

            # fix aging
            if len(related_invoice_list):
                update_aging_thread = threading.Thread(name='fix_payments_outs_amount_ap',
                                                    target=fix_payments_outs_amount,
                                                    args=(request, 'AP', related_invoice_list, ), daemon=False)
                update_aging_thread.start()
        except Exception as e:
            print(EXCEPTION_JOURNAL_DELETE % ('AP Payment Batch'), e)
            # logging.error(traceback.format_exc())
            messages.error(request, EXCEPTION_JOURNAL_DELETE % ('AP Payment Batch'))
            transactionlib.set_rollback(True)

    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))


@login_required
@check_fiscal
def send_AP_Payment_batch(request, batch_id):
    with transactionlib.atomic():
        try:
            related_invoice_list = []
            # Batch
            if 'is_locked' in request.session and request.session['is_locked']:
                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

            company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
            session_date = request.session['session_date']
            company = Company.objects.get(pk=company_id)

            batch = Batch.objects.get(pk=batch_id)
            batch.status = int(STATUS_TYPE_DICT['Posted'])
            batch.update_by = request.user.id
            batch.save()

            # Clone Batch for GL
            GL_batch = deepcopy(batch)
            GL_batch.pk = None
            GL_batch.status = int(STATUS_TYPE_DICT['Open'])
            GL_batch.input_type = int(INPUT_TYPE_DICT['Generated'])
            GL_batch.description = 'Generated from AP Payment ' + str(batch.batch_date.strftime('%d/%m/%Y'))
            GL_batch.batch_type = dict(TRANSACTION_TYPES)['GL']
            GL_batch.batch_no = generate_batch_number(company.id, GL_batch.batch_type)
            GL_batch.batch_amount = 0
            GL_batch.posting_sequence = 0
            GL_batch.related_batch_id = batch.id
            GL_batch.save()

            # Journal
            list_journal = Journal.objects.filter(batch_id=batch_id, company_id=company_id, is_hidden=0)\
                .select_related('batch')
            for AP_Payment_entry in list_journal:
                apply_to_docs = ''
                total_source = total_func = tax_source = tax_func = 0.0
                tax_id = None
                same_curr = True
                AP_Payment_entry.status = int(STATUS_TYPE_DICT['Posted'])
                AP_Payment_entry.update_by = request.user.id
                AP_Payment_entry.update_date = datetime.datetime.now()
                AP_Payment_entry.save()

                # get latest exchange rate
                if AP_Payment_entry.transaction_type == PAYMENT_TRANSACTION_TYPES_DICT['Payment']:  # 1:receipt, 2:misc.receipt
                    from_currency = AP_Payment_entry.supplier.currency_id
                else:
                    from_currency = AP_Payment_entry.bank.currency_id

                to_currency = company.currency_id

                if AP_Payment_entry.currency_id != company.currency_id:
                    foreign_exchange = ExchangeRate.objects.filter(is_hidden=False, company_id=company.id,
                                                                   from_currency_id=from_currency,
                                                                   to_currency_id=to_currency,
                                                                   exchange_date=AP_Payment_entry.posting_date.strftime('%Y-%m-01'),
                                                                   flag='ACCOUNTING').last()

                # clone GL for journal
                GL_AP_Payment_Entry = deepcopy(AP_Payment_entry)
                GL_AP_Payment_Entry.pk = None
                GL_AP_Payment_Entry.journal_type = dict(TRANSACTION_TYPES)['GL']
                GL_AP_Payment_Entry.status = int(STATUS_TYPE_DICT['Open'])
                GL_AP_Payment_Entry.batch_id = GL_batch.id
                GL_AP_Payment_Entry.source_type = 'AP-PY'
                GL_AP_Payment_Entry.exchange_rate = 1
                GL_AP_Payment_Entry.amount = float(round_number(math.fabs(Decimal(AP_Payment_entry.total_amount) * Decimal(AP_Payment_entry.exchange_rate))))
                GL_AP_Payment_Entry.total_amount = float(round_number(math.fabs(Decimal(AP_Payment_entry.total_amount) * Decimal(AP_Payment_entry.exchange_rate))))
                GL_AP_Payment_Entry.save()
                name = generate_description(company_id, AP_Payment_entry, 'G/L Entry Description')
                if name and name != '':
                    GL_AP_Payment_Entry.name = name
                else:
                    GL_AP_Payment_Entry.name = ""
                GL_AP_Payment_Entry.save()

                transactions = Transaction.objects.filter(company_id=company_id, is_hidden=False,
                                                          journal_id=AP_Payment_entry.id)\
                    .select_related('journal')
                # journal transactions
                # if transactions:
                #     lst_transaction = transactions.last()
                #     j_desc = generate_description(company_id, AP_Payment_entry, 'G/L Detail Description', False, lst_transaction)
                #     j_reference = generate_description(company_id, AP_Payment_entry, 'G/L Detail Reference', False, lst_transaction)
                #     j_remark = generate_description(company_id, AP_Payment_entry, 'G/L Detail Comment', False, lst_transaction)
                if AP_Payment_entry.transaction_type == PAYMENT_TRANSACTION_TYPES_DICT['Payment']:
                    account_set = AP_Payment_entry.account_set
                    if AP_Payment_entry.currency != AP_Payment_entry.supplier.currency:
                        same_curr = False
                    for trans in transactions:
                        j_desc = generate_description(company_id, AP_Payment_entry, 'G/L Detail Description', False, trans)
                        j_reference = generate_description(company_id, AP_Payment_entry, 'G/L Detail Reference', False, trans)
                        j_remark = generate_description(company_id, AP_Payment_entry, 'G/L Detail Comment', False, trans)
                        desc = generate_description(company_id, AP_Payment_entry, 'G/L Detail Description', True, trans)
                        reference = generate_description(company_id, AP_Payment_entry, 'G/L Detail Reference', True, trans)
                        remark = generate_description(company_id, AP_Payment_entry, 'G/L Detail Comment', True, trans)
                        related_invoice = Journal.objects.none()

                        if trans.currency_id != company.currency_id:
                            trans_invoice = Journal.objects.get(pk=trans.related_invoice_id)

                            if float(trans.exchange_rate) < float(trans_invoice.exchange_rate):
                                revaluation_account = account_set.revaluation_realized_gain

                                is_gain = True
                            else:
                                revaluation_account = account_set.revaluation_realized_loss

                                is_gain = False
                            
                            if trans_invoice.document_type == DOCUMENT_TYPE_DICT['Credit Note']:
                                is_gain = not is_gain

                            prior_amount = round_number(Decimal(trans.total_amount) * Decimal(trans_invoice.exchange_rate))
                            new_amount = round_number(Decimal(trans.total_amount) * Decimal(trans.exchange_rate))
                            realized_amount = prior_amount - new_amount

                            if realized_amount != 0:
                                revaluation_transaction = deepcopy(trans)
                                revaluation_transaction.pk = None
                                revaluation_transaction.journal_id = GL_AP_Payment_Entry.id
                                revaluation_transaction.source_type = GL_AP_Payment_Entry.source_type
                                if j_desc != '':
                                    revaluation_transaction.description = j_desc
                                elif desc != '':
                                    revaluation_transaction.description = desc
                                else:
                                    revaluation_transaction.description = ''
                                if j_reference != '':
                                    revaluation_transaction.reference = j_reference
                                else:
                                    revaluation_transaction.reference = ''
                                if j_remark != '':
                                    revaluation_transaction.remark = j_remark
                                else:
                                    revaluation_transaction.remark = ''
                                revaluation_transaction.exchange_rate = trans.exchange_rate
                                revaluation_transaction.amount = 0
                                revaluation_transaction.base_tax_amount = 0
                                revaluation_transaction.total_amount = 0
                                if company.currency.is_decimal:
                                    revaluation_transaction.functional_amount = float(round_number(math.fabs(realized_amount)))
                                    # revaluation_transaction.functional_amount = math.fabs(realized_amount)
                                else:
                                    revaluation_transaction.functional_amount = float(round_number(math.fabs(realized_amount), 0))
                                    # revaluation_transaction.functional_amount = math.fabs(round(realized_amount))

                                if (revaluation_transaction.is_debit_account and is_gain) or (not revaluation_transaction.is_debit_account and not is_gain):
                                    revaluation_transaction.functional_balance_type = BALANCE_TYPE_DICT['Debit']
                                    revaluation_transaction.is_credit_account = False
                                    revaluation_transaction.is_debit_account = True
                                elif (revaluation_transaction.is_debit_account and not is_gain) or (not revaluation_transaction.is_debit_account and is_gain):
                                    revaluation_transaction.functional_balance_type = BALANCE_TYPE_DICT['Credit']
                                    revaluation_transaction.is_credit_account = True
                                    revaluation_transaction.is_debit_account = False

                                # if realized_amount < 0:
                                #     if revaluation_transaction.functional_balance_type == BALANCE_TYPE_DICT['Credit']:
                                #         revaluation_transaction.is_credit_account = False
                                #         revaluation_transaction.is_debit_account = True
                                #         revaluation_transaction.functional_balance_type = BALANCE_TYPE_DICT['Debit']
                                #     else:
                                #         revaluation_transaction.is_credit_account = True
                                #         revaluation_transaction.is_debit_account = False
                                #         revaluation_transaction.functional_balance_type = BALANCE_TYPE_DICT['Credit']

                                revaluation_transaction.save()

                                clone_revaluation_account = deepcopy(trans)
                                clone_revaluation_account.pk = None
                                clone_revaluation_account.account = revaluation_account
                                clone_revaluation_account.journal_id = GL_AP_Payment_Entry.id
                                clone_revaluation_account.source_type = GL_AP_Payment_Entry.source_type
                                if j_desc != '':
                                    clone_revaluation_account.description = j_desc
                                elif desc != '':
                                    clone_revaluation_account.description = desc
                                else:
                                    clone_revaluation_account.description = ''
                                if j_reference != '':
                                    clone_revaluation_account.reference = j_reference
                                else:
                                    clone_revaluation_account.reference = ''
                                if j_remark != '':
                                    clone_revaluation_account.remark = j_remark
                                else:
                                    clone_revaluation_account.remark = ''
                                clone_revaluation_account.exchange_rate = trans.exchange_rate
                                clone_revaluation_account.amount = 0
                                clone_revaluation_account.base_tax_amount = 0
                                clone_revaluation_account.total_amount = 0
                                clone_revaluation_account.is_credit_account = (0, 1)[revaluation_transaction.is_debit_account]
                                clone_revaluation_account.is_debit_account = (0, 1)[revaluation_transaction.is_credit_account]
                                if company.currency.is_decimal:
                                    clone_revaluation_account.functional_amount = float(round_number(math.fabs(realized_amount)))
                                    # clone_revaluation_account.functional_amount = math.fabs(realized_amount)
                                else:
                                    clone_revaluation_account.functional_amount = float(round_number(math.fabs(realized_amount), 0))
                                    # clone_revaluation_account.functional_amount = math.fabs(round(realized_amount))
                                clone_revaluation_account.functional_balance_type = (BALANCE_TYPE_DICT['Debit'], BALANCE_TYPE_DICT['Credit'])[
                                    revaluation_transaction.functional_balance_type == BALANCE_TYPE_DICT['Debit']]

                                clone_revaluation_account.save()

                        # Discount entry
                        if float(trans.discount_amount) > 0.000000:
                            discount_trans = deepcopy(trans)

                            discount_trans.pk = None
                            discount_trans.is_credit_account = True
                            discount_trans.is_debit_account = False
                            discount_trans.journal_id = GL_AP_Payment_Entry.id
                            discount_trans.source_type = GL_AP_Payment_Entry.source_type
                            if j_desc != '':
                                discount_trans.description = j_desc
                            elif desc != '':
                                discount_trans.description = desc
                            else:
                                discount_trans.description = ''
                            if j_reference != '':
                                discount_trans.reference = j_reference
                            else:
                                discount_trans.reference = ''
                            if j_remark != '':
                                discount_trans.remark = j_remark
                            else:
                                discount_trans.remark = ''
                            discount_trans.account_id = trans.account_id
                            discount_trans.tax_amount = 0
                            discount_trans.amount = trans.discount_amount
                            discount_trans.base_tax_amount = trans.discount_amount
                            discount_trans.total_amount = trans.discount_amount
                            discount_trans.functional_balance_type = BALANCE_TYPE_DICT['Debit'] if discount_trans.is_debit_account else BALANCE_TYPE_DICT['Credit']
                            if company.currency.is_decimal:
                                discount_trans.functional_amount = float(round_number(Decimal(discount_trans.total_amount) * Decimal(trans.exchange_rate)))
                            else:
                                discount_trans.functional_amount = float(round_number(Decimal(discount_trans.total_amount) * Decimal(trans.exchange_rate), 0))

                            discount_trans.save()

                            discount_trans_pair = deepcopy(trans)

                            discount_trans_pair.pk = None
                            discount_trans_pair.is_credit_account = False
                            discount_trans_pair.is_debit_account = True
                            discount_trans_pair.journal_id = GL_AP_Payment_Entry.id
                            discount_trans_pair.source_type = GL_AP_Payment_Entry.source_type
                            if j_desc != '':
                                discount_trans_pair.description = j_desc
                            elif desc != '':
                                discount_trans_pair.description = desc
                            else:
                                discount_trans_pair.description = ''
                            if j_reference != '':
                                discount_trans_pair.reference = j_reference
                            else:
                                discount_trans_pair.reference = ''
                            if j_remark != '':
                                discount_trans_pair.remark = j_remark
                            else:
                                discount_trans_pair.remark = ''
                            discount_trans_pair.account_id = account_set.discount_account_id
                            discount_trans_pair.tax_amount = 0
                            discount_trans_pair.amount = trans.discount_amount
                            discount_trans_pair.base_tax_amount = trans.discount_amount
                            discount_trans_pair.total_amount = trans.discount_amount
                            discount_trans_pair.functional_balance_type = BALANCE_TYPE_DICT['Debit'] \
                                if discount_trans_pair.is_debit_account else BALANCE_TYPE_DICT['Credit']
                            if company.currency.is_decimal:
                                discount_trans_pair.functional_amount = float(round_number(Decimal(discount_trans_pair.total_amount) * Decimal(trans.exchange_rate)))
                            else:
                                discount_trans_pair.functional_amount = float(round_number(Decimal(discount_trans_pair.total_amount) * Decimal(trans.exchange_rate), 0))

                            discount_trans_pair.save()

                        try:
                            related_invoice = Journal.objects.get(pk=trans.related_invoice_id)
                            related_invoice.payment_number += 1
                            related_invoice.discount_amount = float(related_invoice.discount_amount) + float(trans.discount_amount)
                            related_invoice.paid_amount = float(related_invoice.paid_amount) + float(trans.amount)
                            related_invoice.outstanding_amount = float(related_invoice.outstanding_amount) - float(
                                trans.amount)

                            real_outstanding_amount = float(related_invoice.outstanding_amount) - \
                                float(related_invoice.discount_amount)

                            if float(real_outstanding_amount) <= 0:
                                related_invoice.is_fully_paid = True
                                related_invoice.fully_paid_date = AP_Payment_entry.document_date
                                related_invoice.outstanding_amount = 0
                            else:
                                related_invoice.is_fully_paid = False
                                related_invoice.fully_paid_date = None
                            related_invoice.save()
                            related_invoice_list.append(related_invoice.id)
                            trans.related_journal_outstanding = real_outstanding_amount
                            trans.save()
                        except Exception as e:
                            print(e)

                        # clone GL for transaction
                        gl_clone_transaction = deepcopy(trans)
                        gl_clone_transaction.pk = None

                        if related_invoice:
                            apply_to_docs += related_invoice.document_number + ','
                            if related_invoice.document_type == DOCUMENT_TYPE_DICT['Credit Note']:
                                if trans.amount > 0:
                                    if gl_clone_transaction.is_credit_account:
                                        gl_clone_transaction.is_credit_account = False
                                        gl_clone_transaction.is_debit_account = True
                                        gl_clone_transaction.functional_balance_type = BALANCE_TYPE_DICT['Debit']
                                    else:
                                        gl_clone_transaction.is_credit_account = True
                                        gl_clone_transaction.is_debit_account = False
                                        gl_clone_transaction.functional_balance_type = BALANCE_TYPE_DICT['Credit']
                                    total_source -= float(trans.amount)
                                    # total_func -= float(trans.functional_amount)
                                    total_func -= float(trans.total_amount) * float(trans.exchange_rate)
                                else:
                                    if gl_clone_transaction.is_credit_account:
                                        gl_clone_transaction.is_credit_account = True
                                        gl_clone_transaction.is_debit_account = False
                                        gl_clone_transaction.functional_balance_type = BALANCE_TYPE_DICT['Credit']
                                    else:
                                        gl_clone_transaction.is_credit_account = False
                                        gl_clone_transaction.is_debit_account = True
                                        gl_clone_transaction.functional_balance_type = BALANCE_TYPE_DICT['Debit']
                                    total_source -= float(trans.amount)
                                    # total_func -= float(trans.functional_amount)
                                    total_func -= float(trans.total_amount) * float(trans.exchange_rate)
                            else:
                                if trans.total_amount < 0:
                                    if gl_clone_transaction.is_debit_account:
                                        gl_clone_transaction.is_debit_account = False
                                        gl_clone_transaction.is_credit_account = True
                                        gl_clone_transaction.functional_balance_type = BALANCE_TYPE_DICT['Credit']
                                    else:
                                        gl_clone_transaction.is_debit_account = True
                                        gl_clone_transaction.is_credit_account = False
                                        gl_clone_transaction.functional_balance_type = BALANCE_TYPE_DICT['Debit']
                                total_source += float(trans.amount)
                                # total_func += float(trans.functional_amount)
                                total_func += float(trans.total_amount) * float(trans.exchange_rate)
                        else:
                            if trans.total_amount < 0:
                                if gl_clone_transaction.is_debit_account:
                                    gl_clone_transaction.is_debit_account = False
                                    gl_clone_transaction.is_credit_account = True
                                    gl_clone_transaction.functional_balance_type = BALANCE_TYPE_DICT['Credit']
                                else:
                                    gl_clone_transaction.is_debit_account = True
                                    gl_clone_transaction.is_credit_account = False
                                    gl_clone_transaction.functional_balance_type = BALANCE_TYPE_DICT['Debit']
                            total_source += float(trans.amount)
                            # total_func += float(trans.functional_amount)
                            total_func += float(trans.total_amount) * float(trans.exchange_rate)

                        gl_clone_transaction.amount = math.fabs(float(trans.amount))
                        gl_clone_transaction.base_tax_amount = math.fabs(float(trans.base_tax_amount))
                        gl_clone_transaction.tax_amount = math.fabs(float(trans.tax_amount))
                        gl_clone_transaction.total_amount = math.fabs(float(trans.total_amount))
                        if company.currency.is_decimal:
                            gl_clone_transaction.functional_amount = float(round_number(math.fabs(trans.functional_amount)))
                        else:
                            gl_clone_transaction.functional_amount = float(round_number(math.fabs(trans.functional_amount), 0))
                        gl_clone_transaction.journal_id = GL_AP_Payment_Entry.id
                        gl_clone_transaction.source_type = GL_AP_Payment_Entry.source_type
                        if desc != '':
                            gl_clone_transaction.description = desc
                        else:
                            gl_clone_transaction.description = ''
                        if reference != '':
                            gl_clone_transaction.reference = reference
                        else:
                            gl_clone_transaction.reference = ''
                        if remark != '':
                            gl_clone_transaction.remark = remark
                        else:
                            gl_clone_transaction.remark = ''
                        gl_clone_transaction.save()

                    # # fix aging
                    # if len(related_invoice_list):
                    #     update_aging_thread = threading.Thread(name='fix_payments_outs_amount_ar',
                    #                                         target=fix_payments_outs_amount,
                    #                                         args=(request, 'AP', related_invoice_list, ), daemon=False)
                    #     update_aging_thread.start()

                    gl_functional_transaction = Transaction.objects.filter(company_id=company_id, is_hidden=False,
                                                                           is_debit_account=True, journal_id=GL_AP_Payment_Entry.id). \
                        aggregate(functional_amount=Sum('functional_amount'))

                else:
                    for trans in transactions:
                        j_desc = generate_description(company_id, AP_Payment_entry, 'G/L Detail Description', False, trans)
                        j_reference = generate_description(company_id, AP_Payment_entry, 'G/L Detail Reference', False, trans)
                        j_remark = generate_description(company_id, AP_Payment_entry, 'G/L Detail Comment', False, trans)
                        desc = generate_description(company_id, AP_Payment_entry, 'G/L Detail Description', True, trans)
                        reference = generate_description(company_id, AP_Payment_entry, 'G/L Detail Reference', True, trans)
                        remark = generate_description(company_id, AP_Payment_entry, 'G/L Detail Comment', True, trans)
                        if trans.is_tax_transaction:
                            # gl_trans_tax = deepcopy(trans)
                            # gl_trans_tax.pk = None
                            # if desc != '':
                            #     gl_trans_tax.description = desc
                            # else:
                            #     gl_trans_tax.description = to_string(GL_AP_Payment_Entry.name) + ' - ' + to_string(
                            #         GL_AP_Payment_Entry.reference) + ' - ' + to_string(trans.remark)
                            # if reference != '':
                            #     gl_trans_tax.reference = reference
                            # if remark != '':
                            #     gl_trans_tax.remark = remark
                            # gl_trans_tax.amount = math.fabs(trans.tax_amount)
                            # gl_trans_tax.base_tax_amount = math.fabs(trans.tax_amount)
                            # gl_trans_tax.tax_amount = 0
                            # gl_trans_tax.total_amount = math.fabs(trans.tax_amount)
                            # gl_trans_tax.journal_id = GL_AP_Payment_Entry.id
                            # gl_trans_tax.source_type = GL_AP_Payment_Entry.source_type
                            # if company.currency.is_decimal:
                            #     gl_trans_tax.functional_amount = math.fabs(float(gl_trans_tax.total_amount) * float(
                            #         trans.exchange_rate))
                            # else:
                            #     gl_trans_tax.functional_amount = math.fabs(round(float(gl_trans_tax.total_amount) * float(
                            #         trans.exchange_rate)))
                            # if trans.total_amount < 0:
                            #     if trans.is_debit_account:
                            #         gl_trans_tax.is_debit_account = False
                            #         gl_trans_tax.is_credit_account = True
                            #         gl_trans_tax.functional_balance_type = BALANCE_TYPE_DICT['Credit']
                            #     else:
                            #         gl_trans_tax.is_debit_account = True
                            #         gl_trans_tax.is_credit_account = False
                            #         gl_trans_tax.functional_balance_type = BALANCE_TYPE_DICT['Debit']
                            #     total_source -= float(gl_trans_tax.amount)
                            #     total_func -= math.fabs(float(gl_trans_tax.total_amount) * float(
                            #         trans.exchange_rate))
                            # else:
                            #     if trans.is_debit_account:
                            #         gl_trans_tax.is_debit_account = True
                            #         gl_trans_tax.is_credit_account = False
                            #         gl_trans_tax.functional_balance_type = BALANCE_TYPE_DICT['Debit']
                            #     else:
                            #         gl_trans_tax.is_debit_account = False
                            #         gl_trans_tax.is_credit_account = True
                            #         gl_trans_tax.functional_balance_type = BALANCE_TYPE_DICT['Credit']
                            #     total_source += float(gl_trans_tax.amount)
                            #     total_func += math.fabs(float(gl_trans_tax.total_amount) * float(
                            #         trans.exchange_rate))
                            # gl_trans_tax.save()
                            if trans.tax and trans.tax.tax_account_code_id:
                                tax_id = trans.tax.tax_account_code_id
                            tax_source += float(trans.tax_amount)
                            tax_func += float(trans.tax_amount) * float(trans.exchange_rate)
                            total_func += float(trans.tax_amount) * \
                                float(trans.exchange_rate)

                        elif float(trans.amount) == 0.000000 and float(trans.tax_amount) != 0.000000:
                            gl_trans_tax = deepcopy(trans)
                            gl_trans_tax.pk = None
                            if desc != '':
                                gl_trans_tax.description = desc
                            else:
                                gl_trans_tax.description = ''
                            if reference != '':
                                gl_trans_tax.reference = reference
                            else:
                                gl_trans_tax.reference = ''
                            if remark != '':
                                gl_trans_tax.remark = remark
                            else:
                                gl_trans_tax.remark = ''
                            gl_trans_tax.amount = math.fabs(trans.tax_amount)
                            gl_trans_tax.base_tax_amount = math.fabs(trans.tax_amount)
                            gl_trans_tax.tax_amount = 0
                            gl_trans_tax.total_amount = math.fabs(trans.tax_amount)
                            gl_trans_tax.journal_id = GL_AP_Payment_Entry.id
                            gl_trans_tax.source_type = GL_AP_Payment_Entry.source_type
                            if company.currency.is_decimal:
                                gl_trans_tax.functional_amount = float(round_number(math.fabs(Decimal(gl_trans_tax.total_amount) * Decimal(
                                    trans.exchange_rate))))
                            else:
                                gl_trans_tax.functional_amount = float(round_number(math.fabs(Decimal(gl_trans_tax.total_amount) * Decimal(
                                    trans.exchange_rate)), 0))
                            if trans.total_amount < 0:
                                if trans.is_debit_account:
                                    gl_trans_tax.is_debit_account = False
                                    gl_trans_tax.is_credit_account = True
                                    gl_trans_tax.functional_balance_type = BALANCE_TYPE_DICT['Credit']
                                else:
                                    gl_trans_tax.is_debit_account = True
                                    gl_trans_tax.is_credit_account = False
                                    gl_trans_tax.functional_balance_type = BALANCE_TYPE_DICT['Debit']
                                total_source -= float(gl_trans_tax.amount)
                                total_func -= math.fabs(float(gl_trans_tax.total_amount) * float(
                                    trans.exchange_rate))
                            else:
                                if trans.is_debit_account:
                                    gl_trans_tax.is_debit_account = True
                                    gl_trans_tax.is_credit_account = False
                                    gl_trans_tax.functional_balance_type = BALANCE_TYPE_DICT['Debit']
                                else:
                                    gl_trans_tax.is_debit_account = False
                                    gl_trans_tax.is_credit_account = True
                                    gl_trans_tax.functional_balance_type = BALANCE_TYPE_DICT['Credit']
                                total_source += float(gl_trans_tax.amount)
                                total_func += math.fabs(float(gl_trans_tax.total_amount) * float(
                                    trans.exchange_rate))
                            gl_trans_tax.save()
                            # if trans.tax and trans.tax.tax_account_code_id:
                            #     tax_id = trans.tax.tax_account_code_id
                            # tax_source += float(trans.tax_amount)
                            # tax_func += float(trans.tax_amount) * float(trans.exchange_rate)

                        else:
                            gl_trans = deepcopy(trans)
                            gl_trans.pk = None
                            if desc != '':
                                gl_trans.description = desc
                            else:
                                gl_trans.description = ''
                            if reference != '':
                                gl_trans.reference = reference
                            else:
                                gl_trans.reference = ''
                            if remark != '':
                                gl_trans.remark = remark
                            else:
                                gl_trans.remark = ''
                            gl_trans.journal_id = GL_AP_Payment_Entry.id
                            gl_trans.source_type = GL_AP_Payment_Entry.source_type
                            gl_trans.base_tax_amount = math.fabs(trans.base_tax_amount)
                            gl_trans.amount = math.fabs(trans.amount)
                            gl_trans.total_amount = math.fabs(trans.total_amount)
                            if company.currency.is_decimal:
                                gl_trans.functional_amount = float(round_number(math.fabs(Decimal(gl_trans.total_amount) * Decimal(trans.exchange_rate))))
                            else:
                                gl_trans.functional_amount = float(round_number(math.fabs(Decimal(gl_trans.total_amount) * Decimal(trans.exchange_rate)), 0))
                            if trans.total_amount < 0:
                                if trans.is_debit_account:
                                    gl_trans.is_debit_account = False
                                    gl_trans.is_credit_account = True
                                    gl_trans.functional_balance_type = BALANCE_TYPE_DICT['Credit']
                                else:
                                    gl_trans.is_debit_account = True
                                    gl_trans.is_credit_account = False
                                    gl_trans.functional_balance_type = BALANCE_TYPE_DICT['Debit']
                                total_source -= float(gl_trans.amount)
                                total_func -= math.fabs(float(gl_trans.total_amount) * float(trans.exchange_rate))
                            else:
                                if trans.is_debit_account:
                                    gl_trans.is_debit_account = True
                                    gl_trans.is_credit_account = False
                                    gl_trans.functional_balance_type = BALANCE_TYPE_DICT['Debit']
                                else:
                                    gl_trans.is_debit_account = False
                                    gl_trans.is_credit_account = True
                                    gl_trans.functional_balance_type = BALANCE_TYPE_DICT['Credit']
                                total_source += float(gl_trans.amount)
                                total_func += math.fabs(float(gl_trans.total_amount) * float(trans.exchange_rate))
                            gl_trans.save()
                            if float(gl_trans.tax_amount) != 0.000000:
                                gl_trans.tax_amount = 0
                                gl_trans.base_tax_amount = math.fabs(trans.base_tax_amount)
                                gl_trans.amount = math.fabs(trans.amount)
                                gl_trans.total_amount = math.fabs(trans.amount)
                                if company.currency.is_decimal:
                                    gl_trans.functional_amount = float(round_number(math.fabs(Decimal(gl_trans.total_amount) * Decimal(trans.exchange_rate))))
                                else:
                                    gl_trans.functional_amount = float(round_number(math.fabs(Decimal(gl_trans.total_amount) * Decimal(trans.exchange_rate)), 0))
                                gl_trans.save()
                                if trans.tax and trans.tax.tax_account_code_id:
                                    tax_id = trans.tax.tax_account_code_id
                                tax_source += float(trans.tax_amount)
                                tax_func += float(trans.tax_amount) * float(trans.exchange_rate)

                    total_source += tax_source
                    # total_func += tax_func

                if total_func == 0 and tax_func > 0:
                    total_func = tax_func
                last_transaction = transactions.last()
                if last_transaction and total_func != 0:
                    if tax_id:
                        gl_trans_tax = deepcopy(last_transaction)
                        gl_trans_tax.pk = None
                        if j_desc != '':
                            gl_trans_tax.description = j_desc
                        else:
                            gl_trans_tax.description = ''
                        if j_reference != '':
                            gl_trans_tax.reference = j_reference
                        else:
                            gl_trans_tax.reference = ''
                        if j_remark != '':
                            gl_trans_tax.remark = j_remark
                        else:
                            gl_trans_tax.remark = ''
                        gl_trans_tax.amount = math.fabs(tax_source)
                        gl_trans_tax.base_tax_amount = math.fabs(tax_source)
                        gl_trans_tax.tax_amount = 0
                        gl_trans_tax.total_amount = math.fabs(tax_source)
                        if company.currency.is_decimal:
                            gl_trans_tax.functional_amount = float(round_number(math.fabs(tax_func)))
                        else:
                            gl_trans_tax.functional_amount = float(round_number(math.fabs(tax_func), 0))
                        gl_trans_tax.journal_id = GL_AP_Payment_Entry.id
                        gl_trans_tax.source_type = GL_AP_Payment_Entry.source_type
                        gl_trans_tax.account_id = tax_id
                        if tax_func < 0:
                            if last_transaction.is_debit_account:
                                gl_trans_tax.is_debit_account = False
                                gl_trans_tax.is_credit_account = True
                                gl_trans_tax.functional_balance_type = BALANCE_TYPE_DICT['Credit']
                            else:
                                gl_trans_tax.is_debit_account = True
                                gl_trans_tax.is_credit_account = False
                                gl_trans_tax.functional_balance_type = BALANCE_TYPE_DICT['Debit']
                        else:
                            if last_transaction.is_debit_account:
                                gl_trans_tax.is_debit_account = True
                                gl_trans_tax.is_credit_account = False
                                gl_trans_tax.functional_balance_type = BALANCE_TYPE_DICT['Debit']
                            else:
                                gl_trans_tax.is_debit_account = False
                                gl_trans_tax.is_credit_account = True
                                gl_trans_tax.functional_balance_type = BALANCE_TYPE_DICT['Credit']
                        gl_trans_tax.save()

                        if gl_trans_tax.functional_amount != 0 and total_func == 0:
                            total_func = tax_func

                    if (AP_Payment_entry.transaction_type == PAYMENT_TRANSACTION_TYPES_DICT['Payment'] and AP_Payment_entry.total_amount != 0) or \
                            AP_Payment_entry.transaction_type != PAYMENT_TRANSACTION_TYPES_DICT['Payment']:
                        j_desc = generate_description(company_id, AP_Payment_entry, 'G/L Detail Description', False, last_transaction, apply_to_docs)
                        j_reference = generate_description(company_id, AP_Payment_entry, 'G/L Detail Reference', False, last_transaction, apply_to_docs)
                        j_remark = generate_description(company_id, AP_Payment_entry, 'G/L Detail Comment', False, last_transaction, apply_to_docs)
                        gl_trans_bank = deepcopy(last_transaction)
                        gl_trans_bank.pk = None
                        if total_func < 0:
                            if last_transaction.is_debit_account:
                                gl_trans_bank.is_debit_account = True
                                gl_trans_bank.is_credit_account = False
                                gl_trans_bank.functional_balance_type = BALANCE_TYPE_DICT['Debit']
                            else:
                                gl_trans_bank.is_debit_account = False
                                gl_trans_bank.is_credit_account = True
                                gl_trans_bank.functional_balance_type = BALANCE_TYPE_DICT['Credit']
                        else:
                            if last_transaction.is_debit_account:
                                gl_trans_bank.is_debit_account = False
                                gl_trans_bank.is_credit_account = True
                                gl_trans_bank.functional_balance_type = BALANCE_TYPE_DICT['Credit']
                            else:
                                gl_trans_bank.is_debit_account = True
                                gl_trans_bank.is_credit_account = False
                                gl_trans_bank.functional_balance_type = BALANCE_TYPE_DICT['Debit']
                        if j_desc != '':
                            gl_trans_bank.description = j_desc
                        else:
                            gl_trans_bank.description = ''
                        if j_reference != '':
                            gl_trans_bank.reference = j_reference
                        else:
                            gl_trans_bank.reference = ''
                        if j_remark != '':
                            gl_trans_bank.remark = j_remark
                        else:
                            gl_trans_bank.remark = ''
                        if not same_curr:
                            total_source = math.fabs(float(total_func) / float(AP_Payment_entry.exchange_rate))
                            gl_trans_bank.currency = AP_Payment_entry.currency
                            gl_trans_bank.exchange_rate = AP_Payment_entry.exchange_rate
                            gl_trans_bank.rate_date = AP_Payment_entry.document_date
                        gl_trans_bank.amount = float(round_number(math.fabs(total_source)))
                        gl_trans_bank.base_tax_amount = float(round_number(math.fabs(total_source)))
                        gl_trans_bank.tax_amount = 0
                        gl_trans_bank.total_amount = float(round_number(math.fabs(total_source)))
                        if company.currency.is_decimal:
                            gl_trans_bank.functional_amount = float(round_number(math.fabs(total_func)))
                        else:
                            gl_trans_bank.functional_amount = float(round_number(math.fabs(total_func), 0))
                        gl_trans_bank.tax_id = None
                        gl_trans_bank.account_id = GL_AP_Payment_Entry.bank.account_id
                        gl_trans_bank.journal_id = GL_AP_Payment_Entry.id
                        gl_trans_bank.source_type = GL_AP_Payment_Entry.source_type
                        gl_trans_bank.save()

                # create '5041 rounding', if total_debit <> todal_credit
                total_func_debit = total_func_credit = 0
                transaction_list = Transaction.objects.filter(company_id=company_id, is_hidden=0,
                                                            journal_id=GL_AP_Payment_Entry.id)
                trx_debits = transaction_list.filter(is_debit_account=1)
                for trx_debit in trx_debits:
                    total_func_debit += round_number(trx_debit.functional_amount)
                trx_credits = transaction_list.filter(is_credit_account=1)
                for trx_credit in trx_credits:
                    total_func_credit += round_number(trx_credit.functional_amount)

                if round_number(total_func_debit) != round_number(total_func_credit):
                    foreign_exchange_amount = round_number(Decimal(total_func_debit) - Decimal(total_func_credit))
                    try:
                        if AP_Payment_entry.account_set and AP_Payment_entry.account_set.revaluation_rounding_id:
                            foreign_exchange_account = AP_Payment_entry.account_set.revaluation_rounding_id
                        else:
                            foreign_exchange_account = GL_AP_Payment_Entry.bank.round_account_id

                        gl_exchange = Transaction()
                        if j_desc != '':
                            gl_exchange.description = j_desc
                        else:
                            gl_exchange.description = ''
                        if j_reference != '':
                            gl_exchange.reference = j_reference
                        else:
                            gl_exchange.reference = ''
                        if j_remark != '':
                            gl_exchange.remark = j_remark
                        else:
                            gl_exchange.remark = ''
                        gl_exchange.journal_id = GL_AP_Payment_Entry.id
                        gl_exchange.account_id = foreign_exchange_account if foreign_exchange_account else None
                        gl_exchange.company_id = company_id
                        gl_exchange.currency_id = last_transaction.currency_id
                        gl_exchange.update_by = last_transaction.update_by
                        gl_exchange.order_id = GL_AP_Payment_Entry.order_id
                        gl_exchange.source_type = 'AP-RD'
                        gl_exchange.exchange_rate = last_transaction.exchange_rate
                        gl_exchange.rate_date = last_transaction.rate_date if last_transaction.rate_date else None
                        gl_exchange.functional_currency_id = company.currency_id
                        gl_exchange.is_debit_account = (True, False)[foreign_exchange_amount > 0]
                        gl_exchange.is_credit_account = (False, True)[foreign_exchange_amount > 0]
                        if company.currency.is_decimal:
                            gl_exchange.functional_amount = float(round_number(math.fabs(foreign_exchange_amount)))
                        else:
                            gl_exchange.functional_amount = float(round_number(math.fabs(foreign_exchange_amount), 0))
                        gl_exchange.functional_balance_type = (BALANCE_TYPE_DICT['Debit'],
                                                            BALANCE_TYPE_DICT['Credit'])[foreign_exchange_amount > 0]
                        gl_exchange.transaction_date = getTransactionDate(request, GL_AP_Payment_Entry.document_date)
                        gl_exchange.save()

                    except Exception as e:
                        print('Journal-ID ' + str(AP_Payment_entry.id))
                        print("Revaluation account couldn't be retrieved!! ", e)
                        # logging.error(traceback.format_exc())
                        transactionlib.set_rollback(True)
                        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

                gl_functional_transaction = Transaction.objects.filter(company_id=company_id, is_hidden=False,
                                                                            is_debit_account=True, journal_id=GL_AP_Payment_Entry.id). \
                            aggregate(functional_amount=Sum('functional_amount'))
                GL_AP_Payment_Entry.amount = math.fabs(gl_functional_transaction['functional_amount'])
                GL_AP_Payment_Entry.total_amount = math.fabs(gl_functional_transaction['functional_amount'])

                GL_AP_Payment_Entry.save()

                GL_batch.batch_amount = float(GL_batch.batch_amount) + float(GL_AP_Payment_Entry.total_amount)
                GL_batch.save()

            # fix aging
            if len(related_invoice_list):
                update_aging_thread = threading.Thread(name='fix_payments_outs_amount_ap',
                                                    target=fix_payments_outs_amount,
                                                    args=(request, 'AP', related_invoice_list, ), daemon=False)
                update_aging_thread.start()
        except Exception as e:
            print(EXCEPTION_JOURNAL_POST % ('AP Payment'), e)
            messages.error(request, EXCEPTION_JOURNAL_POST % ('AP Payment'))
            transactionlib.set_rollback(True)

    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))


@csrf_exempt
@login_required
def load_customer(request):
    if request.method == 'POST':
        try:
            if 'customer_id' in request.POST and request.POST['customer_id']:
                session_date = request.session['session_date']
                company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
                company = Company.objects.get(pk=company_id)
                customer_id = request.POST['customer_id']
                customer = Customer.objects.get(pk=customer_id)
                context = {}
                context['account_set_id'] = customer.account_set_id if customer.account_set else False
                context['account_receivable_id'] = customer.account_receivable_id if customer.account_receivable_id else False
                try:
                    context['tax_id'] = customer.tax_id if customer.tax else None
                except:
                    context['tax_id'] = None
                if customer.name:
                    context['customer_name'] = customer.name
                else:
                    context['customer_name'] = None
                if customer.name:
                    context['customer_name'] = customer.name
                else:
                    context['customer_name'] = None
                if customer.payment_term:
                    context['payment_term'] = customer.payment_term
                else:
                    context['payment_term'] = 0
                if customer.currency:
                    context['currency_id'] = customer.currency_id
                    context['customer_currency'] = customer.currency.code
                    context['customer_currency_id'] = customer.currency_id
                    context['is_decimal'] = customer.currency.is_decimal
                    if customer.currency_id != company.currency_id:
                        exchange_rate = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                                    from_currency_id=customer.currency_id,
                                                                    to_currency_id=company.currency_id,
                                                                    exchange_date__month = session_date.month,
                                                                    exchange_date__year = session_date.year,
                                                                    flag='ACCOUNTING').order_by('exchange_date').last()
                        if exchange_rate:
                            context['exchange_id'] = exchange_rate.id
                            context['exchange_rate'] = str(exchange_rate.rate)
                        else:
                            context['exchange_id'] = None
                            context['exchange_rate'] = 1
                    else:
                        context['exchange_id'] = None
                        context['exchange_rate'] = 1
                else:
                    context['currency_id'] = None
                    context['customer_currency'] = None
                    context['customer_currency_id'] = None
                    context['is_decimal'] = True
                if customer.payment_code_id:
                    context['payment_code_id'] = customer.payment_code_id
                else:
                    context['payment_code_id'] = None
                return HttpResponse(json.dumps(context), content_type="application/json")
        except Exception as e:
            print(e)
            logger.error(traceback.format_exc())
            return HttpResponseNotFound
    else:
        return HttpResponseNotFound


@csrf_exempt
@login_required
def load_bank_list(request):
    draw = request.GET['draw']
    start = request.GET['start']
    length = request.GET['length']
    search = request.GET['search[value]']
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    list_filter = Bank.objects.filter(is_hidden=0, company_id=company_id, is_active=True)

    records_total = list_filter.count()

    if search:  # Filter data base on search
        list_filter = list_filter.filter(
            Q(code__icontains=search) | Q(name__icontains=search) | Q(currency__code__icontains=search) | Q(
                account__code__contains=search))

    # All data
    records_filtered = list_filter.count()

    # Order by list_limit base on order_dir and order_column
    order_column = request.GET['order[0][column]']
    column_name = ""
    if order_column == "0":
        column_name = "code"
    elif order_column == "1":
        column_name = "name"
    elif order_column == "2":
        column_name = "currency_id"
    elif order_column == "3":
        column_name = "currency"
    elif order_column == "4":
        column_name = "account"
    elif order_column == "5":
        column_name = "account_number"
    order_dir = request.GET['order[0][dir]']

    list = []
    if order_dir == "asc":
        list = list_filter.order_by(column_name)[int(start):(int(start) + int(length))]
    elif order_dir == "desc":
        list = list_filter.order_by('-' + column_name)[int(start):(int(start) + int(length))]

    # Create data list
    array = []
    for field in list:
        data = {}
        data["id"] = field.id
        data["code"] = field.code
        data["name"] = field.name
        if field.currency:
            data["currency_id"] = field.currency_id
            data["currency"] = field.currency.code
        else:
            data["currency_id"] = None
            data["currency"] = None
        if field.account:
            data["account"] = field.account.code
        else:
            data["account"] = None
        if field.account_number:
            data["account_number"] = field.account_number
        else:
            data["account_number"] = None
        array.append(data)

    content = {"draw": draw, "data": array, "recordsTotal": records_total, "recordsFiltered": records_filtered}
    json_content = json.dumps(content, ensure_ascii=False)
    return HttpResponse(json_content, content_type='application/json')


@csrf_exempt
@login_required
def load_customer_list(request):
    draw = request.GET['draw']
    start = request.GET['start']
    length = request.GET['length']
    search = request.GET['search[value]']
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    list_filter = Customer.objects.filter(is_hidden=0, company_id=company_id, is_active=1)

    records_total = list_filter.count()

    if search:  # Filter data base on search
        list_filter = list_filter.filter(
            Q(code__icontains=search) | Q(name__icontains=search) | Q(address__icontains=search) | Q(
                tax__code__contains=search) | Q(currency__code__icontains=search) | Q(
                payment_term__contains=search) | Q(
                payment_mode__code__icontains=search) | Q(account_set__code__icontains=search))

    # All data
    records_filtered = list_filter.count()

    # Order by list_limit base on order_dir and order_column
    order_column = request.GET['order[0][column]']
    column_name = ""
    if order_column == "0":
        column_name = "code"
    elif order_column == "1":
        column_name = "name"
    elif order_column == "2":
        column_name = "tax"
    elif order_column == "3":
        column_name = "currency"
    elif order_column == "4":
        column_name = "payment_term"
    elif order_column == "5":
        column_name = "payment_mode"
    elif order_column == "6":
        column_name = "account_set"
    elif order_column == "7":
        column_name = "account_set_id"
    elif order_column == "8":
        column_name = "payment_code_id"
    order_dir = request.GET['order[0][dir]']

    list = []
    if order_dir == "asc":
        list = list_filter.order_by(column_name)[int(start):(int(start) + int(length))]
    elif order_dir == "desc":
        list = list_filter.order_by('-' + column_name)[int(start):(int(start) + int(length))]

    # Create data list
    array = []
    for field in list:
        data = {}
        data["id"] = field.id
        data["code"] = field.code
        data["name"] = field.name
        try:
            if field.tax_id:
                data["tax"] = field.tax.code
            else:
                data["tax"] = None
        except:
            data["tax"] = None
        if field.currency_id:
            data["currency"] = field.currency.code
        else:
            data["currency"] = None
        data["payment_term"] = field.payment_term
        if field.payment_mode_id:
            data["payment_mode"] = field.payment_mode.code
        else:
            data["payment_mode"] = None
        if field.account_set_id:
            data["account_set"] = field.account_set.code
            data["account_set_id"] = field.account_set_id
        else:
            data["account_set"] = None
            data["account_set_id"] = None
        if field.payment_code_id:
            data["payment_code_id"] = field.payment_code_id
        else:
            data["payment_code_id"] = None
        array.append(data)

    content = {"draw": draw, "data": array, "recordsTotal": records_total, "recordsFiltered": records_filtered}
    json_content = json.dumps(content, ensure_ascii=False)
    return HttpResponse(json_content, content_type='application/json')


@login_required
def ReceiptDocumentsList_as_json(request):
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    if request.is_ajax():
        try:
            draw = request.GET['draw']
            start = request.GET['start']
            length = request.GET['length']
            search = request.GET['search[value]']
            customer_id = request.GET['customer_id']
            if math.isnan(float(customer_id)) == False:
                invoice_list = Journal.objects.filter(is_hidden=False, customer_id=customer_id,
                                                      journal_type=dict(TRANSACTION_TYPES)['AR Invoice'],
                                                      company_id=company_id,
                                                      status=int(STATUS_TYPE_DICT['Posted']),
                                                      is_fully_paid=False)

                if invoice_list:
                    records_total = invoice_list.count()

                    # Order by list_limit base on order_dir and order_column
                    order_column = request.GET['order[0][column]']

                    if search:
                        invoice_list = invoice_list.filter(Q(document_number__icontains=search))

                    records_filtered = invoice_list.count()
                    column_name = ""
                    if order_column == "0":
                        column_name = "document_number"
                    elif order_column == "1":
                        column_name = "document_type"
                    elif order_column == "2":
                        column_name = "document_date"
                    elif order_column == "3":
                        column_name = "document_amount"
                    elif order_column == "4":
                        column_name = "payment_number"
                    elif order_column == "5":
                        column_name = "paid_amount"

                    order_dir = request.GET['order[0][dir]']
                    list = []
                    if order_dir == "asc":
                        list = invoice_list.order_by(column_name)[int(start):(int(start) + int(length))]
                    elif order_dir == "desc":
                        list = invoice_list.order_by('-' + column_name)[int(start):(int(start) + int(length))]

                    document_types_dict = dict(DOCUMENT_TYPES)

                    array = []

                    for field in list:
                        out_amount = (field.outstanding_amount + field.adjustment_amount - field.discount_amount)

                        data = {"document_number": field.document_number if field.document_number else '',
                                "document_type": document_types_dict.get(
                                    field.document_type) if field.document_type else '',
                                "document_date": str(field.document_date) if field.document_date else '',
                                "document_amount": str(round_number(field.document_amount, 2)) if field.document_amount else '0.00',
                                "payment_number": str(field.payment_number) if field.payment_number else '0',
                                "paid_amount": str(round_number(field.paid_amount, 2)) if field.paid_amount else '0.00',
                                'out_amount': str(round_number(out_amount, 2)) if field.outstanding_amount else '0.00',
                                'due_date': str(field.due_date) if field.due_date else ''}
                        array.append(data)

                    content = {"draw": draw, "data": array, "recordsTotal": records_total,
                               "recordsFiltered": records_filtered}
                    json_content = json.dumps(content, ensure_ascii=False)
                    return HttpResponse(json_content, content_type='application/json')
                else:
                    content = {"draw": 1, "data": [], "recordsTotal": 0, "recordsFiltered": 0}
                    json_content = json.dumps(content, ensure_ascii=False)
                    return HttpResponse(json_content, content_type='application/json')
            else:
                content = {"draw": 1, "data": [], "recordsTotal": 0, "recordsFiltered": 0}
                json_content = json.dumps(content, ensure_ascii=False)
                return HttpResponse(json_content, content_type='application/json')
        except Exception as e:
            print(e)
            logger.error(traceback.format_exc())
    return HttpResponseNotFound


@csrf_exempt
@login_required
def load_account_list(request):
    draw = request.GET['draw']
    start = request.GET['start']
    length = request.GET['length']
    search = request.GET['search[value]']
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    list_filter = Account.objects.filter(is_hidden=0, company_id=company_id, is_active=True).order_by('account_segment', 'code')

    records_total = list_filter.count()

    if search:  # Filter data base on search
        list_filter = list_filter.filter(
            Q(code__contains=search) | Q(name__contains=search) | Q(account_group__code__contains=search))

    # All data
    records_filtered = list_filter.count()

    # Order by list_limit base on order_dir and order_column
    order_column = request.GET['order[0][column]']
    column_name = ""
    if order_column == "0":
        column_name = "code"
    elif order_column == "1":
        column_name = "name"
    elif order_column == "2":
        column_name = "account_type"
    elif order_column == "3":
        column_name = "balance_type"
    elif order_column == "4":
        column_name = "account_group"
    order_dir = request.GET['order[0][dir]']

    list = []
    if order_dir == "asc":
        list = list_filter.order_by(column_name)[int(start):(int(start) + int(length))]
    elif order_dir == "desc":
        list = list_filter.order_by('-' + column_name)[int(start):(int(start) + int(length))]

    # Create data list
    array = []
    account_type_dict = dict(ACCOUNT_TYPE)
    balance_type_dict = dict(BALANCE_TYPE)
    for field in list:
        data = {"id": field.id,
                "code": field.code,
                "name": field.name,
                "account_type": account_type_dict.get(field.account_type),
                "balance_type": balance_type_dict.get(field.balance_type)}
        if field.account_group_id:
            data["account_group"] = field.account_group.code
        else:
            data["account_group"] = None
        array.append(data)

    content = {"draw": draw, "data": array, "recordsTotal": records_total, "recordsFiltered": records_filtered}
    json_content = json.dumps(content, ensure_ascii=False)
    return HttpResponse(json_content, content_type='application/json')


@csrf_exempt
@login_required
def load_payment_list(request, source_type):
    draw = request.GET['draw']
    start = request.GET['start']
    length = request.GET['length']
    search = request.GET['search[value]']
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    list_filter = PaymentCode.objects.filter(is_hidden=False, is_active=True,
                                             company_id=company_id, source_type=source_type).order_by('code')

    records_total = list_filter.count()

    if search:  # Filter data base on search
        list_filter = list_filter.filter(Q(code__icontains=search) | Q(name__icontains=search))

    # All data
    records_filtered = list_filter.count()

    # Order by list_limit base on order_dir and order_column
    order_column = request.GET['order[0][column]']
    column_name = ""
    if order_column == "0":
        column_name = "code"
    elif order_column == "1":
        column_name = "status"
    elif order_column == "2":
        column_name = "name"
    elif order_column == "3":
        column_name = "payment_type"
    order_dir = request.GET['order[0][dir]']

    list = []
    if order_dir == "asc":
        list = list_filter.order_by(column_name)[int(start):(int(start) + int(length))]
    elif order_dir == "desc":
        list = list_filter.order_by('-' + column_name)[int(start):(int(start) + int(length))]

    # Create data list
    array = []
    payment_type_dict = dict(PAYMENT_TYPE)
    for field in list:
        data = {"id": field.id,
                "code": field.code,
                "status": str(field.is_active),
                "name": field.name,
                "payment_type": payment_type_dict.get(field.payment_type)}
        array.append(data)

    content = {"draw": draw, "data": array, "recordsTotal": records_total, "recordsFiltered": records_filtered}
    json_content = json.dumps(content, ensure_ascii=False)
    return HttpResponse(json_content, content_type='application/json')


def receipt_documents_list_as_json_error():
    content = {"draw": 1, "data": [], "recordsTotal": 0, "recordsFiltered": 0}
    json_content = json.dumps(content, ensure_ascii=False)
    return HttpResponse(json_content, content_type='application/json')


@login_required
def receipt_documents_list_as_json(request):
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0

    if not request.is_ajax():
        return HttpResponseNotFound

    try:
        draw = request.GET['draw']
        start = request.GET['start']
        length = request.GET['length']
        search = request.GET['search[value]']
        customer_id = request.GET['customer_id']
        customer = Customer.objects.get(pk=customer_id)

        if math.isnan(float(customer_id)) == True:
            return receipt_documents_list_as_json_error()

        invoice_list = Journal.objects.select_related('customer').filter(Q(is_hidden=False, customer_id=customer_id,
                                                                           journal_type=dict(TRANSACTION_TYPES)['AR Invoice'],
                                                                           company_id=company_id,
                                                                           status=int(STATUS_TYPE_DICT['Posted']),
                                                                           )
                                                                         |
                                                                         Q(is_hidden=False, customer_id=customer_id,
                                                                           journal_type=dict(TRANSACTION_TYPES)['AR Receipt'],
                                                                           document_type=DOCUMENT_TYPE_DICT['Unapplied Cash'],
                                                                           company_id=company_id,
                                                                           status=int(STATUS_TYPE_DICT['Posted']),
                                                                           )
                                                                         |
                                                                         Q(is_hidden=False, customer_id=customer_id,
                                                                           journal_type=dict(TRANSACTION_TYPES)['AR Receipt'],
                                                                           document_type=DOCUMENT_TYPE_DICT['Receipt'],
                                                                           receipt_unapplied__gt=0,
                                                                           company_id=company_id,
                                                                           status=int(STATUS_TYPE_DICT['Posted']),
                                                                           )
                                                                         |
                                                                         Q(is_hidden=False, customer_id=customer_id,
                                                                           journal_type=dict(TRANSACTION_TYPES)['AR Receipt'],
                                                                           document_type=DOCUMENT_TYPE_DICT['Receipt'],
                                                                           receipt_unapplied__lt=0,
                                                                           company_id=company_id,
                                                                           status=int(STATUS_TYPE_DICT['Posted']),
                                                                           )).order_by('document_date')\
                                                                               .exclude(reverse_reconciliation=True)\
                                                                               .exclude(fully_paid_date__isnull=False)\
                                                                               .exclude(document_date__gt=request.session['session_date'])
        if 'exclude_transaction_list' in request.GET:
            exclude_transaction_list = request.GET['exclude_transaction_list']
            exclude_transaction_list = json.loads(exclude_transaction_list)
            invoice_list = invoice_list.exclude(id__in=exclude_transaction_list)

        if not invoice_list:
            return receipt_documents_list_as_json_error()

        # invoice_list exists
        # apply_dict = {}
        # for journal in invoice_list:
        #     if journal.journal_type == dict(TRANSACTION_TYPES)['AR Invoice']:
        #         related_trx = Transaction.objects.filter(is_hidden=0, company_id=company_id,
        #                                                  journal__is_hidden=0, related_invoice=journal,
        #                                                  journal__journal_type=journal.journal_type,
        #                                                  journal__status=int(STATUS_TYPE_DICT['Posted']))\
        #             .select_related('journal')
        #         last_id = 0
        #         skip_list = []
        #         for trx in related_trx:
        #             if trx.journal_id != last_id:
        #                 last_id = trx.journal_id
        #                 skip_list.append(trx.journal_id)
        #                 if trx.journal.document_type == DOCUMENT_TYPE_DICT['Debit Note']:
        #                     if str(journal.id) in apply_dict:
        #                         temp = apply_dict[str(journal.id)] + trx.journal.document_amount
        #                         apply_dict.update({str(journal.id): temp})
        #                     else:
        #                         apply_dict.update({str(journal.id): trx.journal.document_amount})
        #                 elif trx.journal.document_type == DOCUMENT_TYPE_DICT['Credit Note']:
        #                     if str(journal.id) in apply_dict:
        #                         temp = apply_dict[str(journal.id)] - trx.journal.document_amount
        #                         apply_dict.update({str(journal.id): temp})
        #                     else:
        #                         apply_dict.update({str(journal.id): (-1) * trx.journal.document_amount})
        #             else:
        #                 continue
        #         if len(skip_list):
        #             invoice_list = invoice_list.exclude(id__in=skip_list)
        records_total = invoice_list.count()

        # Order by list_limit base on order_dir and order_column
        order_column = request.GET['order[0][column]']

        if search:
            invoice_list = invoice_list.filter(Q(document_number__icontains=search))

        records_filtered = invoice_list.count()
        column_name = ""
        if order_column == "0":
            column_name = "document_number"
        elif order_column == "1":
            column_name = "document_type"
        elif order_column == "2":
            column_name = "document_date"
        elif order_column == "3":
            column_name = "document_amount"
        elif order_column == "4":
            column_name = "payment_number"
        elif order_column == "5":
            column_name = "paid_amount"
        elif order_column == "6":
            column_name = "outstanding_amount"
        elif order_column == "7":
            column_name = "due_date"
        elif order_column == "8":
            column_name = "invoice_id"

        order_dir = request.GET['order[0][dir]']

        list = []
        if order_dir == "asc":
            # list = invoice_list.order_by(column_name)[int(start):(int(start) + int(length))]
            list = invoice_list.order_by(column_name)
        elif order_dir == "desc":
            list = invoice_list.order_by('-' + column_name)

        document_types_dict = dict(DOCUMENT_TYPES)

        array = []
        totalU = 0
        for field in list:
            # if str(field.id) in apply_dict:
            #     if field.document_type == DOCUMENT_TYPE_DICT['Credit Note']:
            #         field.document_amount += (-1) * apply_dict[str(field.id)]
            #     else:
            #         field.document_amount += apply_dict[str(field.id)]
            # outstanding_amount = 0
            # paid_amount = 0
            # if field.journal_type == dict(TRANSACTION_TYPES)['AR Invoice']:
            #     received_trx = Transaction.objects.filter(related_invoice_id=field.id, journal__is_hidden=0, is_hidden=0,
            #                                               journal__journal_type=dict(TRANSACTION_TYPES)['AR Receipt']) \
            #         .exclude(journal_id__isnull=True)\
            #         .select_related('journal')
            #     for trx in received_trx:
            #         paid_amount += trx.total_amount
            #     # outstanding_amount = field.document_amount - paid_amount + field.adjustment_amount - field.discount_amount
            #     field.real_outstanding = field.document_amount - paid_amount + \
            #                 field.adjustment_amount - field.discount_amount
            #     # field.save()
            # else:
            #     paid_amount = field.paid_amount
                # outstanding_amount = field.customer_unapplied - field.paid_amount
                # if outstanding_amount < 0:
                #     outstanding_amount = 0
            # if field.real_outstanding != 0:
            #     if field.real_outstanding < 0:
            #         if int(field.document_type) == int(DOCUMENT_TYPE_DICT['Credit Note']):
            #             outstanding_amount = math.fabs(field.real_outstanding)
            #         elif field.journal_type == dict(TRANSACTION_TYPES)['AR Receipt']:
            #             outstanding_amount = math.fabs(field.real_outstanding)
            #         else:
            #             outstanding_amount = 0
            #     else:
            #         outstanding_amount = field.real_outstanding
            # elif field.journal_type == dict(TRANSACTION_TYPES)['AR Invoice'] and field.real_outstanding == 0 and paid_amount == field.document_amount:
            #     outstanding_amount = 0
            # else:
            #     cut_date = request.session['session_date'].strftime(("%Y-%m-%d"))
            #     outstanding_amount = field.has_outstanding(cut_date)[1]
            # if field.document_date.year <= 2019:
            #     cut_date = request.session['session_date'].strftime(("%Y-%m-%d"))
            #     last_payment = Transaction.objects.filter(related_invoice_id=field.id,
            #             journal__document_date__lte=cut_date, journal__status=int(STATUS_TYPE_DICT['Posted'])
            #         ).exclude(journal_id__isnull=True).exclude(journal__reverse_reconciliation=True
            #         ).exclude(journal__journal_type=dict(TRANSACTION_TYPES)['GL']
            #         ).exclude(journal__journal_type=dict(TRANSACTION_TYPES)['AD']
            #         ).exclude(is_hidden=True
            #         ).exclude(related_journal_outstanding__gt=0
            #         ).exclude(related_journal_outstanding__lt=0
            #         ).order_by('-transaction_date', '-id')
            #     if last_payment.exists():
            #         last = last_payment.first()
            #         outstanding_amount = last.related_journal_outstanding
            #     else:
            #         outstanding_amount = field.has_outstanding(cut_date)[1]

            paid_amount = field.paid_amount
            outstanding_amount = field.real_outstanding
            if field.document_type == DOCUMENT_TYPE_DICT['Credit Note']:
                outstanding_amount = math.fabs(outstanding_amount)
                totalU = float(totalU) - float(outstanding_amount)
            else:
                if field.journal_type != dict(TRANSACTION_TYPES)['AR Invoice']:
                    totalU = float(totalU) - float(outstanding_amount)
                else:
                    totalU = float(totalU) + float(outstanding_amount)

            # if field.journal_type != dict(TRANSACTION_TYPES)['AR Invoice']:
            #     if field.customer_unapplied < 0:
            #         outstanding_amount = (-1 * outstanding_amount)
            #     else:
            #         outstanding_amount = math.fabs(outstanding_amount)
            
            if outstanding_amount != 0:
                data = {"document_number": field.document_number if field.document_number else '',
                        "document_type": document_types_dict.get(field.document_type) if field.document_type else '',
                        "document_date": field.document_date.strftime("%d-%m-%Y") if field.document_date else '',
                        "payment_number": str(field.payment_number) if field.payment_number else '0',
                        "document_amount": str(round_number(field.document_amount, 2))
                            if field.journal_type == dict(TRANSACTION_TYPES)['AR Invoice'] else str(round_number(field.customer_unapplied, 2)),
                        "paid_amount": str(round_number(paid_amount, 2)) if paid_amount else '0.00',
                        'outstanding_amount': str(round_number(outstanding_amount, 2)) if outstanding_amount else '0.00',
                        'due_date': str(field.due_date) if field.due_date else '',
                        'invoice_id': field.id
                        }
                if customer and customer.currency and not customer.currency.is_decimal:
                    data["document_amount"] = str(round_number(field.document_amount, 0)) if field.journal_type == dict(TRANSACTION_TYPES)['AR Invoice']\
                         else str(round_number(field.total_amount, 0)),
                    data["paid_amount"] = str(round_number(paid_amount, 0)) if paid_amount else '0',
                    data['outstanding_amount'] = str(round_number(outstanding_amount, 0)) if outstanding_amount else '0',

                array.append(data)
            else:
                records_total -= 1
                records_filtered -= 1
        print('totalU', totalU)
        content = {"draw": draw, "data": array, "recordsTotal": records_total,
                   "recordsFiltered": records_filtered}
        json_content = json.dumps(content, ensure_ascii=False)
        return HttpResponse(json_content, content_type='application/json')

    except Exception as e:
        print(e)
        logger.error(traceback.format_exc())

    return receipt_documents_list_as_json_error()


def generate_entry_number(company_id, batch_id):
    jour = Journal.objects.filter(company_id=company_id, batch_id=batch_id, is_hidden=False)
    cnt = 0
    jour_last = 0
    if jour:
        cnt = jour.count()
        if jour.last().code:
            jour_last = int(jour.last().code)
    jour_number = cnt + 1 if cnt > jour_last else jour_last + 1
    return jour_number


def generate_adj_doc_number(company_id):
    doc_number = 1
    try:
        jour = Journal.objects.filter(company_id=company_id, batch__batch_type=dict(TRANSACTION_TYPES)['AR Receipt'], is_hidden=False, journal_type=dict(TRANSACTION_TYPES)['AD']) \
            .annotate(doc_number=RawSQL('CAST(document_number AS UNSIGNED)', params=[])) \
            .order_by('doc_number') \
            .last()
        if jour:
            doc_number = int(jour.doc_number) + 1
    except Exception as e:
        print(e)
        pass

    return doc_number


@login_required
def fix_ar_adjustments(request):
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    try:
        transactions = Transaction.objects.filter(company_id=company_id, is_hidden=0, journal__is_hidden=0,
                                                  journal__batch__batch_type=dict(TRANSACTION_TYPES)['AR Receipt']) \
            .exclude(related_invoice_id__isnull=True) \
            .exclude(journal_id__isnull=True) \
            .order_by('related_invoice_id')

        related_invoice_ids = list(transactions.values_list('related_invoice_id', flat=True).distinct())
        adj_transactions = transactions.filter(journal__journal_type=dict(TRANSACTION_TYPES)['AD'])

        for rel_id in related_invoice_ids:
            rel_adj_trxs = adj_transactions.filter(related_invoice_id=rel_id)
            rel_recv_trx = transactions.filter(related_invoice_id=rel_id, journal__journal_type=dict(TRANSACTION_TYPES)['AR Receipt']).first()
            for rel_adj_trx in rel_adj_trxs:
                adj_journal = Journal.objects.get(id=rel_adj_trx.journal_id)
                if adj_journal and rel_recv_trx:
                    adj_journal.transaction = rel_recv_trx
                    adj_journal.save()
    except Exception as e:
        print(e)
        messages.error(request, 'ERROR Happend.')
        return render_to_response('page_acc.html', RequestContext(request, {}))

    messages.success(request, 'AD fixing is successfull.')
    return render_to_response('page_acc.html', RequestContext(request, {}))


def get_batch_amount(batch_id, company_id):
    batch = Batch.objects.get(pk=batch_id)
    source_amount = 0
    order_list = Journal.objects.filter(batch__id=batch_id, is_hidden=0) \
        .exclude(journal_type=dict(TRANSACTION_TYPES)['AD']) \
        .exclude(is_auto_reversed_entry=True)\
        .exclude(status=int(STATUS_TYPE_DICT['Auto Reverse Entry']))\
        .exclude(reference='REVERSING ENTRY')\
        .select_related('batch')

    for field in order_list:
        source_amt, functional_amt = get_func_source_amt(field, company_id)
        source_amount += source_amt

    if int(batch.batch_type) == dict(TRANSACTION_TYPES)['AR Invoice']:
        source_amount = round_number(source_amount)
    else:
        if batch.currency.is_decimal:
            source_amount = round_number(source_amount)
        else:
            source_amount = round_number(source_amount, 0)
    return source_amount


@login_required
@permission_required('accounting.add_journal', login_url='/alert/')
@check_fiscal
def ar_receipt_add(request, batch_id):
    try:
        with transactionlib.atomic():
            company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
            company = Company.objects.get(pk=company_id)
            entry_no = 1
            prev_batch = 0
            next_batch = 0
            prev_journal = 0
            next_journal = 0
            first_journal = 0
            last_journal = 0
            batch = Batch.objects.none()
            source_amount = 0
            if int(batch_id) != 0:
                batch = Batch.objects.get(pk=batch_id)
                source_amount = get_batch_amount(batch.id, company_id)
            form = ARReceiptInfoForm(company_id=company_id, journal_id=0, session_date=request.session['session_date'])
            batch_form = BatchInfoForm(session_date=request.session['session_date'])
            bank_id = None
            distribution_code_list = DistributionCode.objects.filter(is_hidden=False, is_active=True,
                                                                     company_id=company_id,
                                                                     type=DIS_CODE_TYPE_DICT['AR Distribution Code'])
            account_list = Account.objects.filter(is_hidden=False, is_active=True, company_id=company_id).order_by('account_segment', 'code')

            tax_list = Tax.objects.filter(is_hidden=False,
                                          company_id=company_id,
                                          tax_group__company_id=company_id,
                                          tax_group__transaction_type=int(TAX_TRX_TYPES_DICT['Sales']))

            distribution_code_list_ar = []
            for dist_code_list in distribution_code_list:
                distribution_code_list_obj = {'id': dist_code_list.id,
                                              'code': dist_code_list.code,
                                              'name': dist_code_list.name,
                                              'gl_account_id': dist_code_list.gl_account_id, 'tax_id': None}
                for tax_code in tax_list:
                    if tax_code.distribution_code_id:
                        if tax_code.distribution_code_id == dist_code_list.id:
                            distribution_code_list_obj['tax_id'] = tax_code.id
                            break
                distribution_code_list_ar.append(distribution_code_list_obj)
            if request.method == 'GET':
                if int(batch_id) != 0:
                    batch_form = BatchInfoForm(instance=batch)
                    batch_form.initial = {'batch_amount': source_amount}
                    journal_list = Journal.objects.filter(batch_id=batch_id, company_id=company_id, is_hidden=False) \
                        .exclude(journal_type=dict(TRANSACTION_TYPES)['AD']) \
                        .order_by('id')
                    if journal_list:
                        journal_list = sorted(journal_list, key=lambda Journal: int(Journal.code))
                        no_entries = len(journal_list)
                        batch_form.initial = {'no_entries': no_entries}
                        batch_form.initial = {'batch_amount': source_amount}
                        last_entry = journal_list[-1]
                        entry_no = int(last_entry.code) + 1
                        if last_entry:
                            bank_id = last_entry.bank_id
                            form.initial = {'bank': bank_id, 'currency': last_entry.bank.currency_id,
                                            'code': entry_no}
                    else:
                        form.initial = {'code': 1}
                        batch_form.initial = {'no_entries': 0}
                    pay_type = PaymentCode.objects.filter(is_hidden=False).values()

                    prev_journal, next_journal, first_journal, last_journal = get_batch_journals(batch.id, None, False)
                    prev_batch, next_batch = get_nearest_batches(company_id, dict(TRANSACTION_TYPES)['AR Receipt'], batch.batch_no)
                else:
                    batch_form.initial = {'no_entries': 0}
                    form.initial = {'code': 1}
                    prev_batch, next_batch = get_nearest_batches(company_id, dict(TRANSACTION_TYPES)['AR Receipt'], None)

                form.fields['payment_code'].widget.attrs['data-dis-code'] = []
                doc_number = AR_AP_generate_document_number(
                    company.id,
                    dict(TRANSACTION_TYPES)['AR Receipt'])
                form.initial = {'document_number': doc_number}

                for i, optionSelect in enumerate(form.fields['payment_code'].widget.choices.queryset):
                    if optionSelect.id:
                        form.fields['payment_code'].widget.attrs['data-dis-code'].append(
                            {'id': optionSelect.id, 'payment_type': optionSelect.payment_type,
                             'code': optionSelect.code})
                form.fields['payment_code'].widget.attrs['data-dis-code'] = json.dumps(
                    form.fields['payment_code'].widget.attrs['data-dis-code'])
                if 'is_locked' in request.session and request.session['is_locked']:
                    is_locked = 1
                else:
                    is_locked = 0
                return render(request, 'AR_receipt_form.html',
                              {'form': form, 'batch_form': batch_form, 'is_locked': is_locked,
                               'distribution_code_list': distribution_code_list_ar,
                               'account_list': account_list, 'tax_list': tax_list, 'batch_type': 3,
                               'batch_id': int(batch_id), 'journal_type': dict(TRANSACTION_TYPES)['AR Receipt'],
                               'journal_id': 0, 'bank_id': bank_id, 'next_journal': next_journal,
                               'prev_journal': prev_journal, 'first_journal': first_journal, 'last_journal': last_journal,
                               'next_batch': next_batch, 'prev_batch': prev_batch, 'entry_no': entry_no})
            elif request.method == 'POST':
                new_post = []
                if request.POST['transaction_type'] == '1' and request.POST['listTrans']:
                    for old_trx in ast.literal_eval(request.POST['listTrans']):
                        list_2 = {'document_number': old_trx['document_number'],
                                  'document_type': old_trx['document_type'],
                                  'payment_number': int(old_trx['payment_number']),
                                  'pending_balance': old_trx['pending_balance'].replace(",", ""),
                                  'applied_amount': old_trx['applied_amount'].replace(",", ""),
                                  'discount_amount': old_trx['discount_amount'].replace(",", ""),
                                  'adjustment_amount': old_trx['adjustment_amount'],
                                  'net_balance': old_trx['net_balance'],
                                  'original_amount': old_trx['original_amount'].replace(",", ""),
                                  'document_date': old_trx['document_date'],
                                  'due_date': old_trx['due_date'],
                                  'invoice_id': int(old_trx['invoice_id']),
                                  'is_delete': old_trx['is_delete'],
                                  'adjustments': old_trx['adjustments'] if 'adjustments' in old_trx else []}
                        new_post.append(list_2)
                    tot_amu = request.POST.get('total_amount', '')
                    tot_amu_1 = tot_amu.replace(",", "")
                    amu = request.POST.get('appliedAmount', '')
                    amu_1 = amu.replace(",", "")
                    batch_amu = request.POST.get('batch_amount', '')
                    batch_amu_1 = batch_amu.replace(",", "")
                    doc_amount = request.POST.get('document_amount', '')
                    doc_amount_1 = doc_amount.replace(",", "")
                    post = request.POST.copy()  # to make it mutable
                    post.update({
                        'total_amount': tot_amu_1,
                        'amount': amu_1,
                        'batch_amount': batch_amu_1,
                        'document_amount': doc_amount_1
                    })
                    request.POST = post
                elif request.POST['transaction_type'] == '2' and request.POST['listTrans']:
                    tran_type = 0
                    for old_trx in ast.literal_eval(request.POST['listTrans']):
                        list_1 = {}
                        list_1['amount'] = old_trx['amount'].replace(",", "")
                        list_1['base_tax_amount'] = old_trx['base_tax_amount'].replace(",", "")
                        if old_trx['trans_id']:
                            list_1['trans_id'] = old_trx['trans_id']
                        else:
                            list_1['id'] = None
                        list_1['distribution_id'] = old_trx['distribution_id']
                        list_1['distribution_code'] = old_trx['distribution_code']
                        list_1['account_id'] = old_trx['account_id']
                        list_1['account_code'] = old_trx['account_code']
                        list_1['account_name'] = old_trx['account_name']
                        list_1['description'] = old_trx['description']
                        list_1['tax_amount'] = old_trx['tax_amount'].replace(",", "")
                        list_1['total_amount'] = old_trx['total_amount'].replace(",", "")
                        list_1['is_delete'] = old_trx['is_delete']
                        list_1['is_tax_included'] = int(old_trx['is_tax_included'])
                        list_1['is_tax_transaction'] = int(old_trx['is_tax_transaction'])
                        list_1['is_manual_tax_input'] = int(old_trx['is_manual_tax_input'])
                        list_1['tax_id'] = old_trx['tax_id']
                        new_post.append(list_1)
                        tot_amu = request.POST.get('total_amount', '')
                        tot_amu_1 = tot_amu.replace(",", "")
                        amu = request.POST.get('amount', '')
                        amu_1 = amu.replace(",", "")
                        batch_amu = request.POST.get('batch_amount', '')
                        batch_amu_1 = batch_amu.replace(",", "")
                        doc_amount = request.POST.get('document_amount', '')
                        doc_amount_1 = doc_amount.replace(",", "")
                        post = request.POST.copy()  # to make it mutable
                        post.update({
                            'total_amount': tot_amu_1,
                            'amount': amu_1,
                            'batch_amount': batch_amu_1,
                            'document_amount': doc_amount_1
                        })
                        request.POST = post

                request.POST['listTrans'] = new_post

                if int(batch_id) == 0:
                    batch_form = BatchInfoForm(request.POST)
                else:
                    batch_form = BatchInfoForm(request.POST, instance=batch)
                    batch_form.initial = {'batch_amount': source_amount}
                form = ARReceiptInfoForm(request.POST, company_id=company_id)

                if 'is_locked' in request.session and request.session['is_locked']:
                    return render(request, 'AR_receipt_form.html', {'form': form, 'batch_form': batch_form,
                                                                    'distribution_code_list': distribution_code_list_ar,
                                                                    'account_list': account_list, 'tax_list': tax_list,
                                                                    'batch_type': 3, 'batch_id': int(batch_id),
                                                                    'journal_type': dict(TRANSACTION_TYPES)['AR Receipt'],
                                                                    'next_journal': next_journal, 'prev_journal': prev_journal,
                                                                    'first_journal': first_journal, 'last_journal': last_journal,
                                                                    'next_batch': next_batch, 'prev_batch': prev_batch,
                                                                    'entry_no': entry_no, 'is_locked': 1})
                if not batch_form.is_valid():
                    return HttpResponsePermanentRedirect(
                        reverse('journal_list', kwargs={'journal_type': dict(TRANSACTION_TYPES)['AR Receipt'],
                                                        'batch_id': batch_id}))

                batch_entry = batch_form.save(commit=False)
                batch_entry.company_id = company_id
                batch_entry.status = int(STATUS_TYPE_DICT['Open'])
                batch_entry.input_type = int(INPUT_TYPE_DICT['Manual Entry'])
                batch_entry.batch_type = dict(TRANSACTION_TYPES)['AR Receipt']
                batch_entry.currency_id = request.POST['currency']
                batch_entry.source_ledger = SOURCE_LEDGER_DICT['Account Receivable']
                if int(batch_id) == 0:
                    batch_entry.batch_no = generate_batch_number(company_id, dict(TRANSACTION_TYPES)['AR Receipt'])
                    # batch_entry.batch_date = datetime.datetime.today()
                    batch_entry.create_date = datetime.datetime.now()
                batch_entry.update_date = datetime.datetime.now()
                batch_entry.update_by = request.user.id
                batch_entry.save()

                # if form.is_valid():
                ar_receipt_entry = form.save(commit=False)
                ar_receipt_entry.status = int(STATUS_TYPE_DICT['Open'])
                ar_receipt_entry.journal_type = dict(TRANSACTION_TYPES)['AR Receipt']
                if 'is_manual_doc' in request.POST and request.POST['is_manual_doc']:
                    ar_receipt_entry.document_number = request.POST['document_number']
                else:
                    ar_receipt_entry.document_number = AR_AP_generate_document_number(
                        company.id,
                        dict(TRANSACTION_TYPES)['AR Receipt'])
                ar_receipt_entry.update_by = request.user.id
                ar_receipt_entry.update_date = datetime.datetime.now()
                ar_receipt_entry.company_id = company_id
                ar_receipt_entry.is_hidden = False
                if request.POST.get('payment_check_number'):
                    ar_receipt_entry.payment_check_number = request.POST.get('payment_check_number')
                ar_receipt_entry.batch_id = batch_entry.id
                ar_receipt_entry.save()

                # Update batch total amount
                if int(batch_id) != 0:
                    batch_entry.batch_amount += ar_receipt_entry.total_amount
                batch_entry.no_entries += 1
                batch_entry.save()

                # get latest exchange rate
                if 'exchange_rate' in request.POST and request.POST['exchange_rate']:
                    ar_receipt_entry.exchange_rate = request.POST['exchange_rate']
                if 'exchange_rate_fk' in request.POST and request.POST['exchange_rate_fk']:
                    exchange_rate = ExchangeRate.objects.get(pk=request.POST['exchange_rate_fk'])
                if not ar_receipt_entry.exchange_rate:
                    from_currency = ar_receipt_entry.bank.currency_id
                    to_currency = company.currency_id
                    exchange_rate = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                                from_currency_id=from_currency,
                                                                to_currency_id=to_currency,
                                                                flag='ACCOUNTING', exchange_date=str(ar_receipt_entry.document_date.year) + '-' + str(ar_receipt_entry.document_date.month) + '-01').first()
                    if not exchange_rate:
                        exchange_rate = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                                    from_currency_id=from_currency,
                                                                    to_currency_id=to_currency,
                                                                    exchange_date__lte=ar_receipt_entry.document_date,
                                                                    flag='ACCOUNTING').order_by('exchange_date').last()
                    if not exchange_rate:
                        if from_currency == to_currency:
                            # exchange_rate = ExchangeRate()
                            # exchange_rate.from_currency_id = from_currency
                            # exchange_rate.to_currency_id = to_currency
                            # exchange_rate.company_id = company.id
                            # exchange_rate.rate = 1
                            # exchange_rate.is_hidden = 0
                            # exchange_rate.flag = 'ACCOUNTING'
                            # exchange_rate.save()
                            ar_receipt_entry.exchange_rate = 1
                            ar_receipt_entry.exchange_rate_fk_id = None
                            exchange_rate = None
                        else:
                            try:
                                transactionlib.rollback()
                            except:
                                pass
                            messages.error(request, NO_EXCHANGE_RATE)
                            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
                    else:
                        ar_receipt_entry.exchange_rate = exchange_rate.rate
                        ar_receipt_entry.exchange_rate_fk_id = exchange_rate.id
                else:
                    exchange_rate = None
                if 'orig_rate' in request.POST:
                    ar_receipt_entry.orig_exch_rate = request.POST['orig_rate'] if request.POST['orig_rate'] != '' else exchange_rate.rate
                else:
                    ar_receipt_entry.orig_exch_rate = ar_receipt_entry.exchange_rate

                perd_month, perd_year = get_fiscal_year_period(company_id, ar_receipt_entry.document_date)
                if perd_month and perd_year:
                    ar_receipt_entry.perd_month = perd_month
                    ar_receipt_entry.perd_year = perd_year
                else:
                    ar_receipt_entry.perd_month = int(request.POST.get('perd_month'))
                    ar_receipt_entry.perd_year = int(request.POST.get('perd_year'))
                ar_receipt_entry.save()

                if ar_receipt_entry.account_set_id and ar_receipt_entry.customer.account_set_id == None:
                    ar_receipt_entry.customer.account_set_id = ar_receipt_entry.account_set_id
                    ar_receipt_entry.customer.save()

                if ar_receipt_entry.transaction_type == RECEIPT_TRANSACTION_TYPES_DICT['Receipt']:
                    ar_receipt_entry.document_type = DOCUMENT_TYPE_DICT['Receipt']
                    ar_receipt_entry.amount = request.POST['payment_amount'].replace(",", "")
                    ar_receipt_entry.total_amount = request.POST['payment_amount'].replace(",", "")
                    # ar_receipt_entry.payment_amount = 0
                    ar_receipt_entry.original_amount = request.POST['original_amount'].replace(",", "")
                    ar_receipt_entry.outstanding_amount = request.POST['customer_unapplied'].replace(",", "")
                    ar_receipt_entry.receipt_unapplied = request.POST['receipt_unapplied'].replace(",", "")
                    ar_receipt_entry.customer_unapplied = request.POST['customer_unapplied'].replace(",", "")
                    ar_receipt_entry.real_outstanding = request.POST['customer_unapplied'].replace(",", "")
                    ar_receipt_entry.original_currency_id = ar_receipt_entry.customer.currency.id
                    ar_receipt_entry.payment_currency_id = ar_receipt_entry.bank.currency.id
                    ar_receipt_entry.orig_exch_rate = request.POST['orig_exch_rate'] if request.POST['orig_exch_rate'] else ar_receipt_entry.exchange_rate
                    if float(ar_receipt_entry.orig_exch_rate) == 0.0:
                        ar_receipt_entry.orig_exch_rate = ar_receipt_entry.exchange_rate
                    ar_receipt_entry.save()
                    account_set_item = AccountSet.objects.get(pk=request.POST['account_set'])
                    transaction_list = request.POST['listTrans']
                    related_invoice_list = []
                    if len(transaction_list) == 0:
                        trans = Transaction()
                        trans.is_credit_account = True
                        trans.is_debit_account = False
                        trans.update_by = request.user.id
                        trans.update_date = datetime.datetime.now()
                        trans.company_id = company_id
                        if ar_receipt_entry.original_currency_id:
                            trans.currency_id = ar_receipt_entry.original_currency_id
                        else:
                            trans.currency_id = ar_receipt_entry.currency_id
                        if trans.currency_id == ar_receipt_entry.currency_id:
                            trans.exchange_rate = ar_receipt_entry.exchange_rate
                        elif trans.currency_id == company.currency_id:
                            trans.exchange_rate = 1.0
                        elif trans.currency_id != company.currency_id and\
                            'orig_exch_rate' in request.POST and request.POST['orig_exch_rate'] and\
                                request.POST['orig_exch_rate'] != 1.0 and request.POST['orig_exch_rate'] != 0.0:
                            trans.exchange_rate = request.POST['orig_exch_rate']
                        if not trans.exchange_rate:
                            if trans.currency_id != ar_receipt_entry.currency_id:
                                from_currency = trans.currency_id
                                to_currency = company.currency_id

                                exchange_rate = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                                            from_currency_id=from_currency,
                                                                            to_currency_id=to_currency,
                                                                            flag='ACCOUNTING', exchange_date=str(ar_receipt_entry.document_date.year) + '-' + str(ar_receipt_entry.document_date.month) + '-01').first()
                                if not exchange_rate:
                                    exchange_rate = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                                                from_currency_id=from_currency,
                                                                                to_currency_id=to_currency,
                                                                                exchange_date__lte=ar_receipt_entry.document_date,
                                                                                flag='ACCOUNTING').order_by('exchange_date').last()
                                if exchange_rate:
                                    trans.exchange_rate = exchange_rate.rate
                                else:
                                    trans.exchange_rate = 1.0
                            else:
                                trans.exchange_rate = ar_receipt_entry.exchange_rate
                        trans.amount = ar_receipt_entry.total_amount
                        trans.base_tax_amount = ar_receipt_entry.total_amount
                        trans.tax_amount = 0
                        trans.total_amount = ar_receipt_entry.total_amount
                        trans.journal_id = ar_receipt_entry.id
                        trans.account_id = account_set_item.control_account_id if account_set_item.control_account else ar_receipt_entry.account_set.control_account_id
                        trans.remark = ''
                        trans.is_tax_include = False
                        trans.is_tax_transaction = False
                        trans.is_manual_tax_input = False
                        trans.functional_currency_id = company.currency_id
                        trans.functional_amount = float(round_number(float(trans.total_amount) * float(trans.exchange_rate)))
                        trans.functional_balance_type = BALANCE_TYPE_DICT['Credit'] if trans.is_credit_account else BALANCE_TYPE_DICT['Debit']
                        if exchange_rate:
                            trans.rate_date = exchange_rate.exchange_date
                        else:
                            try:
                                split_date = str(ar_receipt_entry.document_date).split('-')
                                trans.rate_date = split_date[0] + '-' + split_date[1] + '-01'
                            except:
                                trans.rate_date = ar_receipt_entry.document_date
                        trans.save()
                    else:
                        for transaction in transaction_list:
                            trans = Transaction()
                            trans.is_credit_account = True
                            trans.is_debit_account = False
                            trans.amount = transaction['applied_amount'].replace(",", "")
                            trans.base_tax_amount = transaction['applied_amount'].replace(",", "")
                            trans.discount_amount = transaction['discount_amount'].replace(",", "")
                            trans.adjustment_amount = transaction['adjustment_amount'].replace(",", "") if 'adjustment_amount' in transaction else 0
                            trans.amount = transaction['applied_amount'].replace(",", "")
                            trans.update_by = request.user.id
                            trans.update_date = datetime.datetime.now()
                            trans.company_id = company_id
                            if ar_receipt_entry.original_currency_id:
                                trans.currency_id = ar_receipt_entry.original_currency_id
                            else:
                                trans.currency_id = ar_receipt_entry.currency_id
                            if trans.currency_id == ar_receipt_entry.currency_id:
                                trans.exchange_rate = ar_receipt_entry.exchange_rate
                            elif trans.currency_id == company.currency_id:
                                trans.exchange_rate = 1.0
                            elif trans.currency_id != company.currency_id and\
                                'orig_exch_rate' in request.POST and request.POST['orig_exch_rate'] and\
                                    request.POST['orig_exch_rate'] != 1.0 and request.POST['orig_exch_rate'] != 0.0:
                                trans.exchange_rate = request.POST['orig_exch_rate']
                            if not trans.exchange_rate:
                                if trans.currency_id != ar_receipt_entry.currency_id:
                                    from_currency = trans.currency_id
                                    to_currency = company.currency_id

                                    exchange_rate = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                                                from_currency_id=from_currency,
                                                                                to_currency_id=to_currency,
                                                                                flag='ACCOUNTING', exchange_date=str(ar_receipt_entry.document_date.year) + '-' + str(ar_receipt_entry.document_date.month) + '-01').first()
                                    if not exchange_rate:
                                        exchange_rate = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                                                    from_currency_id=from_currency,
                                                                                    to_currency_id=to_currency,
                                                                                    exchange_date__lte=ar_receipt_entry.document_date,
                                                                                    flag='ACCOUNTING').order_by('exchange_date').last()
                                    if exchange_rate:
                                        trans.exchange_rate = exchange_rate.rate
                                    else:
                                        trans.exchange_rate = 1.0
                                else:
                                    trans.exchange_rate = ar_receipt_entry.exchange_rate
                            trans.total_amount = transaction['applied_amount'].replace(",", "")
                            trans.journal_id = ar_receipt_entry.id
                            trans.account_id = account_set_item.control_account_id if account_set_item.control_account else ar_receipt_entry.account_set.control_account_id
                            trans.related_invoice_id = transaction['invoice_id']
                            trans.reference = ar_receipt_entry.reference
                            related_invoice = Journal.objects.get(pk=transaction['invoice_id'])
                            if related_invoice.journal_type == dict(TRANSACTION_TYPES)['AR Invoice']:
                                # related_invoice.paid_amount = float(related_invoice.paid_amount) + float(trans.amount)
                                # related_invoice.discount_amount = float(related_invoice.discount_amount) + float(trans.discount_amount)
                                # related_invoice.adjustment_amount = float(related_invoice.adjustment_amount) + float(trans.adjustment_amount)
                                # related_invoice.outstanding_amount = float(related_invoice.outstanding_amount) - float(
                                #     trans.amount)
                                discount_amount = float(related_invoice.real_discount) + float(trans.discount_amount)
                                adjustment_amount = float(related_invoice.real_adjustment) + float(trans.adjustment_amount)
                                outstanding_amount = float(related_invoice.real_outstanding) - float(trans.amount)

                                real_outstanding_amount = float(outstanding_amount) + float(adjustment_amount) - \
                                    float(discount_amount)

                                related_invoice.real_outstanding = real_outstanding_amount
                                related_invoice.real_adjustment = adjustment_amount
                                related_invoice.real_discount = discount_amount

                                # if float(real_outstanding_amount) <= 0:
                                #     related_invoice.outstanding_amount = 0  # force outstanding amount to 0
                                #     related_invoice.is_fully_paid = True
                                #     related_invoice.fully_paid_date = ar_receipt_entry.document_date
                                # else:
                                #     related_invoice.is_fully_paid = False
                                #     related_invoice.fully_paid_date = None
                                # trans.related_journal_outstanding = real_outstanding_amount
                            else:
                                # related_invoice.paid_amount = float(related_invoice.paid_amount) + float(trans.total_amount)
                                # related_invoice.discount_amount = float(related_invoice.discount_amount) + float(trans.discount_amount)
                                # related_invoice.adjustment_amount = float(related_invoice.adjustment_amount) + float(trans.adjustment_amount)
                                discount_amount = float(related_invoice.real_discount) + float(trans.discount_amount)
                                adjustment_amount = float(related_invoice.real_adjustment) + float(trans.adjustment_amount)
                                outstanding_amount = float(related_invoice.real_outstanding) - float(trans.amount)

                                real_document_amount = float(outstanding_amount) + float(adjustment_amount) - \
                                        float(discount_amount)

                                related_invoice.real_outstanding = real_document_amount
                                related_invoice.real_adjustment = adjustment_amount
                                related_invoice.real_discount = discount_amount

                                # if float(real_document_amount) - float(related_invoice.paid_amount) <= 0:
                                #     related_invoice.is_fully_paid = True
                                #     related_invoice.outstanding_amount = 0
                                #     related_invoice.fully_paid_date = ar_receipt_entry.document_date
                                # else:
                                #     related_invoice.is_fully_paid = False
                                #     related_invoice.fully_paid_date = None
                                #     related_invoice.outstanding_amount = float(real_document_amount) - float(related_invoice.paid_amount)
                                # trans.related_journal_outstanding = related_invoice.outstanding_amount

                            related_invoice.save()
                            # related_invoice_list.append(related_invoice.id)
                            trans.functional_currency_id = company.currency_id
                            trans.functional_amount = float(round_number(float(trans.total_amount) * float(trans.exchange_rate)))
                            if exchange_rate:
                                trans.rate_date = exchange_rate.exchange_date
                            else:
                                try:
                                    split_date = str(ar_receipt_entry.document_date).split('-')
                                    trans.rate_date = split_date[0] + '-' + split_date[1] + '-01'
                                except:
                                    trans.rate_date = ar_receipt_entry.document_date

                            trans.functional_balance_type = BALANCE_TYPE_DICT['Credit'] if trans.is_credit_account else BALANCE_TYPE_DICT['Debit']
                            trans.transaction_date = getTransactionDate(request, ar_receipt_entry.document_date)
                            trans.save()

                            if len(transaction['adjustments']) > 0:
                                adjustment = Journal()
                                adjustment.code = (Journal.objects.filter(company_id=company.id, journal_type=dict(TRANSACTION_TYPES)['AD']).count() + 1)
                                adjustment.status = int(STATUS_TYPE_DICT['Open'])
                                adjustment.journal_type = dict(TRANSACTION_TYPES)['AD']
                                adjustment.document_type = DOCUMENT_TYPE_DICT['Adjustment']
                                adjustment.document_number = generate_adj_doc_number(company.id)
                                adjustment.bank_id = ar_receipt_entry.bank_id
                                adjustment.update_by = request.user.id
                                adjustment.document_date = ar_receipt_entry.document_date
                                adjustment.create_date = datetime.datetime.now()
                                adjustment.update_date = datetime.datetime.now()
                                adjustment.company_id = company_id
                                adjustment.reference = transaction['adjustments']['reference']
                                adjustment.name = transaction['adjustments']['description']
                                adjustment.currency_id = trans.currency_id
                                adjustment.payment_check_number = ar_receipt_entry.payment_check_number
                                adjustment.is_hidden = False
                                adjustment.transaction_id = trans.id
                                adjustment.batch_id = batch_entry.id
                                adjustment.posting_date = ar_receipt_entry.document_date
                                adjustment.customer_id = ar_receipt_entry.customer_id
                                adjustment.payment_code_id = ar_receipt_entry.payment_code_id
                                adjustment.exchange_rate = trans.exchange_rate
                                adjustment.exchange_rate_fk_id = exchange_rate.id if exchange_rate else None
                                adjustment.perd_month = ar_receipt_entry.perd_month
                                adjustment.perd_year = ar_receipt_entry.perd_year
                                adjustment.save()

                                doc_number = update_next_adj_number(company.id, adjustment.code)

                                j_amount = 0
                                for trx_adjustment in transaction['adjustments']['transactions']:
                                    trx = Transaction()

                                    trx.company_id = company_id
                                    trx.journal_id = adjustment.id
                                    trx.currency_id = trans.currency_id
                                    trx.distribution_code_id = trx_adjustment['distribution_code_id'] if int(trx_adjustment['distribution_code_id']) != 0 else None
                                    trx.account_id = trx_adjustment['account_id'] if trx_adjustment['account_id'] != 0 else None
                                    trx.related_invoice_id = transaction['invoice_id']

                                    if trx_adjustment['reference'] == '':
                                        trx.reference = adjustment.customer.name
                                    else:
                                        trx.reference = trx_adjustment['reference']

                                    if trx_adjustment['description'] == '':
                                        trx.description = transaction['adjustments']['description'] + ' - ' + transaction['adjustments']['reference']
                                    else:
                                        trx.description = trx_adjustment['description']

                                    trx.amount = float(trx_adjustment['credit'].replace(",", "")) if trx_adjustment['credit'] else float(
                                        trx_adjustment['debit'].replace(",", ""))
                                    trx.total_amount = trx.amount
                                    trx.is_credit_account = True if trx_adjustment['credit'] else False
                                    trx.is_debit_account = True if trx_adjustment['debit'] else False

                                    trx.exchange_rate = trans.exchange_rate
                                    trx.functional_currency_id = company.currency_id
                                    trx.functional_amount = float(round_number(float(trx.total_amount) * float(trans.exchange_rate)))
                                    if exchange_rate:
                                        trx.rate_date = exchange_rate.exchange_date
                                    else:
                                        trx.rate_date = ar_receipt_entry.document_date

                                    trx.functional_balance_type = BALANCE_TYPE_DICT['Credit'] if trx.is_credit_account else BALANCE_TYPE_DICT['Debit']
                                    trx.transaction_date = getTransactionDate(request, ar_receipt_entry.document_date)
                                    trx.create_date = datetime.datetime.now()
                                    trx.update_date = datetime.datetime.now()
                                    trx.save()

                                    j_amount += trx.amount

                                adjustment.amount = j_amount
                                adjustment.total_amount = j_amount
                                adjustment.save()
                    
                    # fix aging
                    if len(related_invoice_list):
                        update_aging_thread = threading.Thread(name='fix_payments_outs_amount_ar',
                                                            target=fix_payments_outs_amount,
                                                            args=(request, 'AR', related_invoice_list, ), daemon=False)
                        update_aging_thread.start()

                elif ar_receipt_entry.transaction_type == RECEIPT_TRANSACTION_TYPES_DICT['Unapplied Cash']:
                    ar_receipt_entry.document_type = DOCUMENT_TYPE_DICT['Unapplied Cash']
                    ar_receipt_entry.amount = request.POST['payment_amount'].replace(",", "")
                    ar_receipt_entry.total_amount = request.POST['payment_amount'].replace(",", "")
                    ar_receipt_entry.document_amount = request.POST['payment_amount'].replace(",", "")
                    # ar_receipt_entry.payment_amount = 0
                    ar_receipt_entry.original_amount = request.POST['original_amount'].replace(",", "")
                    ar_receipt_entry.outstanding_amount = request.POST['customer_unapplied'].replace(",", "")
                    ar_receipt_entry.receipt_unapplied = request.POST['receipt_unapplied'].replace(",", "")
                    ar_receipt_entry.customer_unapplied = request.POST['customer_unapplied'].replace(",", "")
                    ar_receipt_entry.original_currency_id = ar_receipt_entry.customer.currency.id
                    ar_receipt_entry.payment_currency_id = ar_receipt_entry.bank.currency.id
                    ar_receipt_entry.orig_exch_rate = request.POST['orig_exch_rate'] if request.POST['orig_exch_rate'] else ar_receipt_entry.exchange_rate
                    if float(ar_receipt_entry.orig_exch_rate) == 0.0:
                        ar_receipt_entry.orig_exch_rate = ar_receipt_entry.exchange_rate
                    ar_receipt_entry.save()

                    account_set_item = AccountSet.objects.get(pk=request.POST['account_set'])
                    trans = Transaction()
                    trans.is_credit_account = True
                    trans.is_debit_account = False
                    trans.update_by = request.user.id
                    trans.update_date = datetime.datetime.now()
                    trans.company_id = company_id
                    if ar_receipt_entry.original_currency_id:
                        trans.currency_id = ar_receipt_entry.original_currency_id
                    else:
                        trans.currency_id = ar_receipt_entry.currency_id
                    if trans.currency_id == ar_receipt_entry.currency_id:
                        trans.exchange_rate = ar_receipt_entry.exchange_rate
                    elif trans.currency_id == company.currency_id:
                        trans.exchange_rate = 1.0
                    elif trans.currency_id != company.currency_id and\
                        'orig_exch_rate' in request.POST and request.POST['orig_exch_rate'] and\
                            request.POST['orig_exch_rate'] != 1.0 and request.POST['orig_exch_rate'] != 0.0:
                        trans.exchange_rate = request.POST['orig_exch_rate']
                    if not trans.exchange_rate:
                        if trans.currency_id != ar_receipt_entry.currency_id:
                            from_currency = trans.currency_id
                            to_currency = company.currency_id

                            exchange_rate = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                                        from_currency_id=from_currency,
                                                                        to_currency_id=to_currency,
                                                                        flag='ACCOUNTING', exchange_date=str(ar_receipt_entry.document_date.year) + '-' + str(ar_receipt_entry.document_date.month) + '-01').first()
                            if not exchange_rate:
                                exchange_rate = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                                            from_currency_id=from_currency,
                                                                            to_currency_id=to_currency,
                                                                            exchange_date__lte=ar_receipt_entry.document_date,
                                                                            flag='ACCOUNTING').order_by('exchange_date').last()
                            if exchange_rate:
                                trans.exchange_rate = exchange_rate.rate
                            else:
                                trans.exchange_rate = 1.0
                        else:
                            trans.exchange_rate = ar_receipt_entry.exchange_rate
                    trans.amount = ar_receipt_entry.total_amount
                    trans.base_tax_amount = ar_receipt_entry.total_amount
                    trans.tax_amount = 0
                    trans.total_amount = ar_receipt_entry.total_amount
                    trans.journal_id = ar_receipt_entry.id
                    trans.account_id = account_set_item.control_account_id if account_set_item.control_account else ar_receipt_entry.account_set.control_account_id
                    trans.remark = ''
                    trans.is_tax_include = False
                    trans.is_tax_transaction = False
                    trans.is_manual_tax_input = False
                    trans.functional_currency_id = company.currency_id
                    trans.functional_amount = float(round_number(float(trans.total_amount) * float(trans.exchange_rate)))
                    trans.functional_balance_type = BALANCE_TYPE_DICT['Credit'] if trans.is_credit_account else BALANCE_TYPE_DICT['Debit']
                    if exchange_rate:
                        trans.rate_date = exchange_rate.exchange_date
                    else:
                        try:
                            split_date = str(ar_receipt_entry.document_date).split('-')
                            trans.rate_date = split_date[0] + '-' + split_date[1] + '-01'
                        except:
                            trans.rate_date = ar_receipt_entry.document_date
                    trans.save()
                else:
                    transaction_list = request.POST['listTrans']
                    for transaction in transaction_list:
                        trans = Transaction()
                        trans.is_credit_account = True
                        trans.is_debit_account = False
                        trans.update_by = request.user.id
                        trans.update_date = datetime.datetime.now()
                        trans.company_id = company_id
                        trans.currency_id = request.POST['currency']
                        trans.amount = transaction['amount']
                        trans.base_tax_amount = transaction['base_tax_amount']
                        trans.tax_amount = transaction['tax_amount']
                        trans.total_amount = transaction['total_amount']
                        trans.journal_id = ar_receipt_entry.id
                        trans.distribution_code_id = transaction['distribution_id']
                        trans.account_id = transaction['account_id']
                        trans.description = transaction['description']
                        # trans.remark = transaction['description']
                        trans.is_tax_include = int(transaction['is_tax_included'])
                        trans.is_tax_transaction = int(transaction['is_tax_transaction'])
                        trans.is_manual_tax_input = int(transaction['is_manual_tax_input'])
                        if transaction['tax_id'] and transaction['tax_id'] is not '0' and transaction['tax_id'] is not '':
                            trans.tax_id = int(transaction['tax_id'])
                        trans.reference = ar_receipt_entry.reference
                        trans.exchange_rate = ar_receipt_entry.exchange_rate
                        trans.functional_currency_id = company.currency_id
                        trans.functional_amount = float(round_number(float(trans.total_amount) * float(ar_receipt_entry.exchange_rate)))
                        if exchange_rate:
                            trans.rate_date = exchange_rate.exchange_date
                        else:
                            try:
                                split_date = str(ar_receipt_entry.document_date).split('-')
                                trans.rate_date = split_date[0] + '-' + split_date[1] + '-01'
                            except:
                                trans.rate_date = ar_receipt_entry.document_date
                        trans.functional_balance_type = (BALANCE_TYPE_DICT['Credit'],
                                                         BALANCE_TYPE_DICT['Debit'])[trans.is_debit_account]
                        trans.transaction_date = getTransactionDate(request, ar_receipt_entry.document_date)
                        trans.save()
                    ar_receipt_entry.amount = request.POST['amount'].replace(",", "")
                    ar_receipt_entry.tax_amount = request.POST['tax_amount'].replace(",", "")
                    ar_receipt_entry.total_amount = request.POST['total_amount'].replace(",", "")
                    ar_receipt_entry.document_type = DOCUMENT_TYPE_DICT['Miscellaneous Receipt']
                    ar_receipt_entry.save()

                doc_number = update_next_doc_number(company.id, ar_receipt_entry.document_number, dict(TRANSACTION_TYPES)['AR Receipt'])

                batch_amount = Journal.objects.filter(batch_id=batch_entry.id, company_id=company_id, is_hidden=0) \
                    .aggregate(batch_amount=Sum('total_amount'))
                batch_entry.batch_amount = batch_amount.get('batch_amount', Decimal(0.000000))
                batch_entry.save()

                messages.success(request, "AR Receipt entry is created successfully")
                return redirect('/accounting/add/ARReceipt/' + str(batch_entry.id) + '/')
                # if int(batch_entry.id) == 0:
                #     return HttpResponsePermanentRedirect(
                #         reverse('batch_list', kwargs={'batch_type': dict(TRANSACTION_TYPES)['AR Receipt']}))
                # else:
                #     return HttpResponsePermanentRedirect(
                #         reverse('journal_list', kwargs={'journal_type': dict(TRANSACTION_TYPES)['AR Receipt'],
                #                                         'batch_id': batch_entry.id}))
            else:
                if 'is_locked' in request.session and request.session['is_locked']:
                    is_locked = 1
                else:
                    is_locked = 0
                return render(request, 'AR_receipt_form.html',
                              {'form': form, 'distribution_code_list': distribution_code_list_ar,
                               'account_list': account_list, 'tax_list': tax_list, 'next_journal': next_journal,
                               'prev_journal': prev_journal, 'first_journal': first_journal, 'last_journal': last_journal,
                               'next_batch': next_batch, 'prev_batch': prev_batch, 'entry_no': entry_no, 'is_locked': is_locked})
    except OSError as e:
        print(e)
        logging.error(e)


@login_required
@permission_required('accounting.change_journal', login_url='/alert/')
@check_fiscal
def ar_receipt_edit(request, journal_id):
    try:
        with transactionlib.atomic():
            prev_batch = 0
            next_batch = 0
            prev_journal = 0
            next_journal = 0
            first_journal = 0
            last_journal = 0
            company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
            company = Company.objects.get(pk=company_id)
            journal = Journal.objects.get(pk=journal_id)
            is_manual_doc = journal.is_manual_doc
            journal_old_amount = journal.total_amount
            source_amount = 0
            batch = Batch.objects.get(pk=journal.batch_id)
            source_amount = get_batch_amount(batch.id, company_id)
            if batch:
                prev_journal, next_journal, first_journal, last_journal = get_batch_journals(batch.id, journal, False)
                prev_batch, next_batch = get_nearest_batches(company_id, dict(TRANSACTION_TYPES)['AR Receipt'], batch.batch_no)
            else:
                prev_batch, next_batch = get_nearest_batches(company_id, dict(TRANSACTION_TYPES)['AR Receipt'], None)
            batch_form = BatchInfoForm(instance=batch)
            batch_form.initial = {'batch_amount': source_amount}
            bank_id = journal.bank_id
            distribution_code_list = DistributionCode.objects.filter(is_hidden=False, is_active=True,
                                                                     company_id=company_id,
                                                                     type=DIS_CODE_TYPE_DICT['AR Distribution Code'])
            account_list = Account.objects.filter(is_hidden=False, is_active=True, company_id=company_id).order_by('account_segment', 'code')
            tax_list = Tax.objects.filter(is_hidden=False,
                                          company_id=company_id,
                                          tax_group__company_id=company_id,
                                          tax_group__transaction_type=int(TAX_TRX_TYPES_DICT['Sales']))

            distribution_code_list_ar = []
            for dist_code_list in distribution_code_list:
                distribution_code_list_obj = {'id': dist_code_list.id,
                                              'code': dist_code_list.code,
                                              'name': dist_code_list.name,
                                              'gl_account_id': dist_code_list.gl_account_id, 'tax_id': None}
                for tax_code in tax_list:
                    if tax_code.distribution_code_id:
                        if tax_code.distribution_code_id == dist_code_list.id:
                            distribution_code_list_obj['tax_id'] = tax_code.id
                            break
                distribution_code_list_ar.append(distribution_code_list_obj)

            transaction_list = Transaction.objects.filter(company_id=company_id, is_hidden=0,
                                                          journal_id=journal_id)
            transactions = []
            if journal.transaction_type == RECEIPT_TRANSACTION_TYPES_DICT['Receipt']:
                # transactions = transaction_list \
                #     .exclude(account_id=journal.bank.account_id) \
                transaction_list = transaction_list.exclude(related_invoice__isnull=True)
                transactions = transaction_list \
                    .annotate(pending_balance=Sum((F('related_invoice__outstanding_amount'))))

                form = ARReceiptInfoForm(company_id=company_id, journal_id=journal_id, instance=journal,
                                         initial={'customer_name': journal.customer.name,
                                                  'customer_currency': journal.customer.currency_id})
            elif journal.transaction_type == RECEIPT_TRANSACTION_TYPES_DICT['Misc Receipt']:
                # transactions = transaction_list.exclude(account_id=journal.bank.account_id)
                transactions = transaction_list
                form = ARReceiptInfoForm(company_id=company_id, journal_id=journal_id, instance=journal,
                                        initial={'customer_name': journal.customer.name if journal.customer else '',
                                                  'customer_currency': journal.customer.currency_id if journal.customer else None})
            elif journal.transaction_type == RECEIPT_TRANSACTION_TYPES_DICT['Unapplied Cash']:
                form = ARReceiptInfoForm(company_id=company_id, journal_id=journal_id, instance=journal,
                                         initial={'customer_name': journal.customer.name,
                                                  'customer_currency': journal.customer.currency_id})

            # if not transactions:
            #     transactions = transaction_list.filter(is_debit_account=True)

            adjustment_transaction = []

            for transaction in transactions:
                if transaction.adjustment_amount != 0:
                    adjustment_transaction.append(transaction.id)

            adjustment_journal_list = Journal.objects.filter(transaction_id__in=adjustment_transaction)

            adjustments = {}

            for adjustment_journal in adjustment_journal_list:
                adjustment_transaction = []

                adjustment_transaction_list = Transaction.objects.filter(journal_id=adjustment_journal.id, is_hidden=False)
                try:
                    for adjustment_transaction_row in adjustment_transaction_list:
                        adjustment_transaction.append({
                            'id': adjustment_transaction_row.id,
                            'distribution_code_id': adjustment_transaction_row.distribution_code_id,
                            'account_id': adjustment_transaction_row.account.id if adjustment_transaction_row.account else '',
                            'account_name': adjustment_transaction_row.account.name if adjustment_transaction_row.account else '',
                            'reference': adjustment_transaction_row.reference,
                            'description': adjustment_transaction_row.description,
                            'debit': float(adjustment_transaction_row.amount) if adjustment_transaction_row.is_debit_account else '',
                            'credit': float(adjustment_transaction_row.amount) if adjustment_transaction_row.is_credit_account else '',
                        })

                    adjustments[adjustment_journal.transaction_id] = json.dumps({
                        'id': adjustment_journal.id,
                        'doc_no': adjustment_journal.document_number,
                        'reference': adjustment_journal.reference,
                        'description': adjustment_journal.name,
                        'transactions': adjustment_transaction
                    })
                except Exception as e:
                    print(e)

            for transaction in transactions:
                if transaction.id in adjustments:
                    transaction.adjustments = adjustments[transaction.id]

                if transaction.related_invoice:
                    # transaction.pending_balance = (transaction.amount + transaction.discount_amount - transaction.adjustment_amount) + journal.customer_unapplied
                    transaction.pending_balance = (transaction.amount + transaction.discount_amount)
                    outstanding_balance = transaction.related_invoice.real_outstanding
                    if outstanding_balance != 0:
                        if outstanding_balance < 0:
                            if int(transaction.related_invoice.document_type) == int(DOCUMENT_TYPE_DICT['Credit Note']):
                                outstanding_balance = math.fabs(outstanding_balance)
                            else:
                                outstanding_balance = 0
                    # else:
                    #     cut_date = request.session['session_date'].strftime(("%Y-%m-%d"))
                    #     outstanding_balance = transaction.related_invoice.has_outstanding(cut_date)[1]
                    transaction.outstanding_amount = outstanding_balance
                    # transaction.outstanding_amount = (transaction.related_invoice.document_amount - (transaction.amount +
                    #                                                                                  transaction.discount_amount - transaction.adjustment_amount))

            if request.method == 'GET':
                has_old_rate = 1 if journal.has_old_rate else 0
                if 'is_locked' in request.session and request.session['is_locked']:
                    is_locked = 1
                else:
                    is_locked = 0
                if journal.transaction_type == RECEIPT_TRANSACTION_TYPES_DICT['Receipt']:
                    return render(request, 'AR_receipt_form.html', {'form': form, 'batch_form': batch_form,
                                                                    'distribution_code_list': distribution_code_list_ar,
                                                                    'account_list': account_list, 'tax_list': tax_list,
                                                                    'journal_id': int(journal_id),
                                                                    'perd_month': journal.perd_month,
                                                                    'perd_year': journal.perd_year,
                                                                    'transactions': transactions,
                                                                    'journal_type': journal.journal_type,
                                                                    'batch_id': journal.batch_id,
                                                                    'status': int(journal.status),
                                                                    'adjustments': adjustments,
                                                                    'is_decimal': journal.currency.is_decimal,
                                                                    'is_ven_decimal': journal.original_currency.is_decimal if journal.original_currency else True,
                                                                    'bank_id': bank_id,
                                                                    'next_journal': next_journal,
                                                                    'prev_journal': prev_journal,
                                                                    'first_journal': first_journal,
                                                                    'last_journal': last_journal,
                                                                    'next_batch': next_batch,
                                                                    'prev_batch': prev_batch,
                                                                    'batch': batch,
                                                                    'journal': journal, 
                                                                    'has_old_rate': has_old_rate,
                                                                    'is_locked': is_locked})
                else:
                    return render(request, 'AR_receipt_form.html', {'form': form, 'batch_form': batch_form,
                                                                    'distribution_code_list': distribution_code_list_ar,
                                                                    'account_list': account_list, 'tax_list': tax_list,
                                                                    'journal_id': int(journal_id),
                                                                    'perd_month': journal.perd_month,
                                                                    'perd_year': journal.perd_year,
                                                                    'misc_transactions': transactions,
                                                                    'journal_type': journal.journal_type,
                                                                    'batch_id': journal.batch_id,
                                                                    'status': int(journal.status),
                                                                    'is_decimal': journal.currency.is_decimal,
                                                                    'is_ven_decimal': journal.original_currency.is_decimal if journal.original_currency else True,
                                                                    'bank_id': bank_id,
                                                                    'next_journal': next_journal,
                                                                    'prev_journal': prev_journal,
                                                                    'first_journal': first_journal,
                                                                    'last_journal': last_journal,
                                                                    'next_batch': next_batch,
                                                                    'prev_batch': prev_batch,
                                                                    'batch': batch,
                                                                    'journal': journal, 
                                                                    'has_old_rate': has_old_rate,
                                                                    'is_locked': is_locked})
            elif request.method == 'POST':
                new_post = []
                if request.POST['transaction_type'] == '1' and request.POST['listTrans']:
                    for old_trx in ast.literal_eval(request.POST['listTrans']):
                        list_2 = {}
                        list_2['document_number'] = old_trx['document_number']
                        list_2['document_type'] = old_trx['document_type']
                        list_2['payment_number'] = int(old_trx['payment_number']) if old_trx['payment_number'] != '' and old_trx['payment_number'] != 'None' else 0
                        list_2['pending_balance'] = old_trx['pending_balance'].replace(",", "")
                        list_2['applied_amount'] = old_trx['applied_amount'].replace(",", "")
                        list_2['discount_amount'] = old_trx['discount_amount'].replace(",", "")
                        list_2['adjustment_amount'] = old_trx['adjustment_amount'].replace(",", "") if 'adjustment_amount' in old_trx else 0
                        list_2['net_balance'] = old_trx['net_balance']
                        list_2['original_amount'] = old_trx['original_amount'].replace(",", "")
                        list_2['document_date'] = old_trx['document_date']
                        list_2['due_date'] = old_trx['due_date']
                        list_2['invoice_id'] = int(
                            old_trx['invoice_id']) if old_trx['invoice_id'] != '' and old_trx['invoice_id'] != 'None' else None
                        list_2['is_delete'] = old_trx['is_delete']
                        list_2['adjustments'] = old_trx['adjustments'] if 'adjustments' in old_trx else []
                        new_post.append(list_2)
                    tot_amu = request.POST.get('total_amount', '')
                    tot_amu_1 = tot_amu.replace(",", "")
                    amu = request.POST.get('appliedAmount', '')
                    amu_1 = amu.replace(",", "")
                    batch_amu = request.POST.get('batch_amount', '')
                    batch_amu_1 = batch_amu.replace(",", "")
                    doc_amount = request.POST.get('document_amount', '')
                    doc_amount_1 = doc_amount.replace(",", "")

                    tax_amount = request.POST.get('tax_amount', '')
                    tax_amount1 = tax_amount.replace(",", "")
                    post = request.POST.copy()  # to make it mutable
                    post.update({
                        'total_amount': tot_amu_1,
                        'tax_amount': tax_amount1,
                        'amount': amu_1,
                        'batch_amount': batch_amu_1,
                        'document_amount': doc_amount_1
                    })

                    request.POST = post
                elif request.POST['transaction_type'] == '2' and request.POST['listTrans']:
                    tran_type = 0
                    for old_trx in ast.literal_eval(request.POST['listTrans']):
                        list_1 = {}
                        list_1['amount'] = old_trx['amount'].replace(",", "")
                        list_1['base_tax_amount'] = old_trx['base_tax_amount'].replace(",", "")
                        list_1['trans_id'] = old_trx['trans_id'] if old_trx['trans_id'] else None
                        list_1['distribution_id'] = old_trx['distribution_id']
                        list_1['distribution_code'] = old_trx['distribution_code']
                        list_1['account_id'] = old_trx['account_id']
                        list_1['account_code'] = old_trx['account_code']
                        list_1['account_name'] = old_trx['account_name']
                        list_1['description'] = old_trx['description']
                        list_1['tax_amount'] = old_trx['tax_amount'].replace(",", "")
                        list_1['total_amount'] = old_trx['total_amount'].replace(",", "")
                        list_1['is_delete'] = old_trx['is_delete']
                        list_1['is_tax_included'] = int(old_trx['is_tax_included'])
                        list_1['is_tax_transaction'] = int(old_trx['is_tax_transaction'])
                        list_1['is_manual_tax_input'] = int(old_trx['is_manual_tax_input'])
                        list_1['tax_id'] = old_trx['tax_id']
                        new_post.append(list_1)
                        tot_amu = request.POST.get('total_amount', '')
                        tot_amu_1 = tot_amu.replace(",", "")
                        amu = request.POST.get('amount', '')
                        amu_1 = amu.replace(",", "")
                        batch_amu = request.POST.get('batch_amount', '')
                        batch_amu_1 = batch_amu.replace(",", "")
                        doc_amount = request.POST.get('document_amount', '')
                        doc_amount_1 = doc_amount.replace(",", "")
                        post = request.POST.copy()  # to make it mutable
                        post.update({
                            'total_amount': tot_amu_1,
                            'amount': amu_1,
                            'batch_amount': batch_amu_1,
                            'document_amount': doc_amount_1
                        })
                        request.POST = post
                request.POST['listTrans'] = new_post

                batch_form = BatchInfoForm(request.POST, instance=batch)
                batch_form.initial = {'batch_amount': source_amount}
                form = ARReceiptInfoForm(request.POST, company_id=company_id, journal_id=journal_id, instance=journal)

                if 'is_locked' in request.session and request.session['is_locked']:
                    if journal.transaction_type == RECEIPT_TRANSACTION_TYPES_DICT['Receipt']:
                        return render(request, 'AR_receipt_form.html', {'form': form, 'batch_form': batch_form,
                                                                        'distribution_code_list': distribution_code_list_ar,
                                                                        'account_list': account_list,
                                                                        'tax_list': tax_list,
                                                                        'journal_id': int(journal_id),
                                                                        'perd_month': journal.perd_month,
                                                                        'perd_year': journal.perd_year,
                                                                        'transactions': transactions,
                                                                        'journal_type': journal.journal_type,
                                                                        'batch_id': journal.batch_id,
                                                                        'is_decimal': journal.currency.is_decimal,
                                                                        'status': int(journal.status),
                                                                        'next_journal': next_journal,
                                                                        'prev_journal': prev_journal,
                                                                        'first_journal': first_journal,
                                                                        'last_journal': last_journal,
                                                                        'next_batch': next_batch,
                                                                        'prev_batch': prev_batch,
                                                                        'batch': batch,
                                                                        'journal': journal,
                                                                        'is_locked': 1})
                    else:
                        return render(request, 'AR_receipt_form.html', {'form': form, 'batch_form': batch_form,
                                                                        'distribution_code_list': distribution_code_list_ar,
                                                                        'account_list': account_list,
                                                                        'tax_list': tax_list,
                                                                        'journal_id': int(journal_id),
                                                                        'perd_month': journal.perd_month,
                                                                        'perd_year': journal.perd_year,
                                                                        'misc_transactions': transactions,
                                                                        'journal_type': journal.journal_type,
                                                                        'batch_id': journal.batch_id,
                                                                        'is_decimal': journal.currency.is_decimal,
                                                                        'status': int(journal.status),
                                                                        'next_journal': next_journal,
                                                                        'prev_journal': prev_journal,
                                                                        'first_journal': first_journal,
                                                                        'last_journal': last_journal,
                                                                        'next_batch': next_batch,
                                                                        'prev_batch': prev_batch,
                                                                        'batch': batch,
                                                                        'journal': journal,
                                                                        'is_locked': 1})
                if batch_form.is_valid():
                    batch_entry = batch_form.save(commit=False)
                    batch_entry.company_id = company_id
                    batch_entry.status = int(STATUS_TYPE_DICT['Open'])
                    batch_entry.input_type = int(INPUT_TYPE_DICT['Manual Entry'])
                    batch_entry.batch_type = dict(TRANSACTION_TYPES)['AR Receipt']
                    batch_entry.update_date = datetime.datetime.now()
                    batch_entry.update_by = request.user.id
                    batch_entry.save()

                if form.is_valid():
                    ar_receipt_entry = form.save(commit=False)
                    if request.POST.get('payment_check_number'):
                        ar_receipt_entry.payment_check_number = request.POST.get('payment_check_number')
                    ar_receipt_entry.update_by = request.user.id
                    ar_receipt_entry.company_id = company_id
                    ar_receipt_entry.document_number = request.POST['document_number']
                    ar_receipt_entry.is_manual_doc = is_manual_doc
                    ar_receipt_entry.is_hidden = False
                    ar_receipt_entry.save()

                    # Update batch total amount
                    batch.batch_amount += (ar_receipt_entry.total_amount - journal_old_amount)
                    batch.save()

                    # get latest exchange rate
                    if 'exchange_rate' in request.POST and request.POST['exchange_rate']:
                        ar_receipt_entry.exchange_rate = request.POST['exchange_rate']
                    if 'exchange_rate_fk' in request.POST and request.POST['exchange_rate_fk']:
                        exchange_rate = ExchangeRate.objects.get(pk=request.POST['exchange_rate_fk'])
                    if not ar_receipt_entry.exchange_rate:
                        from_currency = ar_receipt_entry.bank.currency_id
                        to_currency = company.currency_id
                        exchange_rate = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                                    from_currency_id=from_currency,
                                                                    to_currency_id=to_currency,
                                                                    flag='ACCOUNTING', exchange_date=str(ar_receipt_entry.document_date.year) + '-' + str(ar_receipt_entry.document_date.month) + '-01').first()
                        if not exchange_rate:
                            exchange_rate = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                                        from_currency_id=from_currency,
                                                                        to_currency_id=to_currency,
                                                                        exchange_date__lte=ar_receipt_entry.document_date,
                                                                        flag='ACCOUNTING').order_by('exchange_date').last()
                        if not exchange_rate:
                            if from_currency == to_currency:
                                # exchange_rate = ExchangeRate()
                                # exchange_rate.from_currency_id = from_currency
                                # exchange_rate.to_currency_id = to_currency
                                # exchange_rate.company_id = company.id
                                # exchange_rate.rate = 1
                                # exchange_rate.is_hidden = 0
                                # exchange_rate.flag = 'ACCOUNTING'
                                # exchange_rate.save()
                                ar_receipt_entry.exchange_rate = 1
                                ar_receipt_entry.exchange_rate_fk_id = None
                                exchange_rate = None
                            else:
                                try:
                                    transactionlib.rollback()
                                except:
                                    pass
                                messages.error(request, NO_EXCHANGE_RATE)
                                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
                        else:
                            ar_receipt_entry.exchange_rate = exchange_rate.rate
                            ar_receipt_entry.exchange_rate_fk_id = exchange_rate.id
                    else:
                        exchange_rate = None
                    if 'orig_rate' in request.POST:
                        ar_receipt_entry.orig_exch_rate = request.POST['orig_rate'] if request.POST['orig_rate'] != '' else exchange_rate.rate
                    else:
                        ar_receipt_entry.orig_exch_rate = ar_receipt_entry.exchange_rate

                    perd_month, perd_year = get_fiscal_year_period(company_id, ar_receipt_entry.document_date)
                    if perd_month and perd_year:
                        ar_receipt_entry.perd_month = perd_month
                        ar_receipt_entry.perd_year = perd_year
                    else:
                        ar_receipt_entry.perd_month = int(request.POST.get('perd_month'))
                        ar_receipt_entry.perd_year = int(request.POST.get('perd_year'))
                    ar_receipt_entry.has_old_rate = False
                    ar_receipt_entry.save()

                    transaction_list = request.POST['listTrans']
                    db_trans_list = Transaction.objects.filter(company_id=company_id, is_hidden=0,
                                                               journal_id=journal_id)
                    if journal.transaction_type == RECEIPT_TRANSACTION_TYPES_DICT['Receipt']:
                        ar_receipt_entry.document_type = DOCUMENT_TYPE_DICT['Receipt']
                        ar_receipt_entry.amount = request.POST['payment_amount'].replace(",", "")
                        ar_receipt_entry.total_amount = request.POST['payment_amount'].replace(",", "")
                        ar_receipt_entry.document_amount = request.POST['payment_amount'].replace(",", "")
                        # ar_receipt_entry.payment_amount = 0
                        ar_receipt_entry.original_amount = request.POST['original_amount'].replace(",", "")
                        ar_receipt_entry.outstanding_amount = request.POST['customer_unapplied'].replace(",", "")
                        ar_receipt_entry.receipt_unapplied = request.POST['receipt_unapplied'].replace(",", "")
                        ar_receipt_entry.customer_unapplied = request.POST['customer_unapplied'].replace(",", "")
                        ar_receipt_entry.real_outstanding = request.POST['customer_unapplied'].replace(",", "")
                        ar_receipt_entry.original_currency_id = ar_receipt_entry.customer.currency.id
                        ar_receipt_entry.payment_currency_id = ar_receipt_entry.bank.currency.id
                        ar_receipt_entry.orig_exch_rate = request.POST['orig_exch_rate'] if request.POST['orig_exch_rate'] else ar_receipt_entry.exchange_rate
                        if float(ar_receipt_entry.orig_exch_rate) == 0.0:
                            ar_receipt_entry.orig_exch_rate = ar_receipt_entry.exchange_rate
                        ar_receipt_entry.save()
                        account_set_item = AccountSet.objects.get(pk=request.POST['account_set'])
                        related_invoice_list = []
                        if len(transaction_list) == 0:
                            transs = Transaction.objects.filter(company_id=company_id, is_hidden=0,
                                                           journal_id=ar_receipt_entry.id)
                            for item in transs:
                                item.is_hidden = 1
                                item.save()

                            trans = Transaction()
                            trans.is_credit_account = True
                            trans.is_debit_account = False
                            trans.update_by = request.user.id
                            trans.update_date = datetime.datetime.now()
                            trans.company_id = company_id
                            if ar_receipt_entry.original_currency_id:
                                trans.currency_id = ar_receipt_entry.original_currency_id
                            else:
                                trans.currency_id = ar_receipt_entry.currency_id
                            if trans.currency_id == ar_receipt_entry.currency_id:
                                trans.exchange_rate = ar_receipt_entry.exchange_rate
                            elif trans.currency_id == company.currency_id:
                                trans.exchange_rate = 1.0
                            elif trans.currency_id != company.currency_id and\
                                'orig_exch_rate' in request.POST and request.POST['orig_exch_rate'] and\
                                    request.POST['orig_exch_rate'] != 1.0 and request.POST['orig_exch_rate'] != 0.0:
                                trans.exchange_rate = request.POST['orig_exch_rate']
                            if not trans.exchange_rate:
                                if trans.currency_id != ar_receipt_entry.currency_id:
                                    from_currency = trans.currency_id
                                    to_currency = company.currency_id

                                    exchange_rate = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                                                from_currency_id=from_currency,
                                                                                to_currency_id=to_currency,
                                                                                flag='ACCOUNTING', exchange_date=str(ar_receipt_entry.document_date.year) + '-' + str(ar_receipt_entry.document_date.month) + '-01').first()
                                    if not exchange_rate:
                                        exchange_rate = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                                                    from_currency_id=from_currency,
                                                                                    to_currency_id=to_currency,
                                                                                    exchange_date__lte=ar_receipt_entry.document_date,
                                                                                    flag='ACCOUNTING').order_by('exchange_date').last()
                                    if exchange_rate:
                                        trans.exchange_rate = exchange_rate.rate
                                    else:
                                        trans.exchange_rate = 1.0
                                else:
                                    trans.exchange_rate = ar_receipt_entry.exchange_rate
                            trans.amount = ar_receipt_entry.total_amount
                            trans.base_tax_amount = ar_receipt_entry.total_amount
                            trans.tax_amount = 0
                            trans.total_amount = ar_receipt_entry.total_amount
                            trans.journal_id = ar_receipt_entry.id
                            trans.account_id = account_set_item.control_account_id if account_set_item.control_account else ar_receipt_entry.account_set.control_account_id
                            trans.remark = ''
                            trans.is_tax_include = False
                            trans.is_tax_transaction = False
                            trans.is_manual_tax_input = False
                            trans.functional_currency_id = company.currency_id
                            trans.functional_amount = float(round_number(float(trans.total_amount) * float(trans.exchange_rate)))
                            trans.functional_balance_type = BALANCE_TYPE_DICT['Credit'] if trans.is_credit_account else BALANCE_TYPE_DICT['Debit']
                            if exchange_rate:
                                trans.rate_date = exchange_rate.exchange_date
                            else:
                                try:
                                    split_date = str(ar_receipt_entry.document_date).split('-')
                                    trans.rate_date = split_date[0] + '-' + split_date[1] + '-01'
                                except:
                                    trans.rate_date = ar_receipt_entry.document_date
                            trans.save()
                        else:
                            for transaction in transaction_list:
                                if transaction['is_delete'] == '0':
                                    trans0 = db_trans_list.filter(related_invoice_id=transaction['invoice_id'])
                                    last_trx = None
                                    for trans in trans0:
                                        trans.is_credit_account = True
                                        trans.is_debit_account = False
                                        old_paid_amount = trans.amount
                                        old_discount_amount = trans.discount_amount
                                        old_adjustment_amount = trans.adjustment_amount
                                        related_invoice = Journal.objects.filter(pk=transaction['invoice_id'])
                                        if related_invoice.exists():
                                            related_invoice = related_invoice.first()
                                            related_invoice.real_discount = float(related_invoice.real_discount) - float(trans.discount_amount)
                                            related_invoice.real_adjustment = float(related_invoice.real_adjustment) - float(trans.adjustment_amount)
                                            related_invoice.real_outstanding = float(related_invoice.real_outstanding) + float(trans.amount) + \
                                                float(trans.discount_amount) - float(trans.adjustment_amount)
                                            # related_invoice.save()

                                        trans.amount = transaction['applied_amount']
                                        trans.base_tax_amount = transaction['applied_amount']
                                        trans.discount_amount = transaction['discount_amount']
                                        trans.adjustment_amount = transaction['adjustment_amount'] if 'adjustment_amount' in transaction else 0
                                        trans.update_by = request.user.id
                                        trans.company_id = company_id
                                        if ar_receipt_entry.original_currency_id:
                                            trans.currency_id = ar_receipt_entry.original_currency_id
                                        else:
                                            trans.currency_id = ar_receipt_entry.currency_id
                                        if trans.currency_id == ar_receipt_entry.currency_id:
                                            trans.exchange_rate = ar_receipt_entry.exchange_rate
                                        elif trans.currency_id == company.currency_id:
                                            trans.exchange_rate = 1.0
                                        elif trans.currency_id != company.currency_id and\
                                            'orig_exch_rate' in request.POST and request.POST['orig_exch_rate'] and\
                                                request.POST['orig_exch_rate'] != 1.0 and request.POST['orig_exch_rate'] != 0.0:
                                            trans.exchange_rate = request.POST['orig_exch_rate']
                                        if not trans.exchange_rate:
                                            if trans.currency_id != ar_receipt_entry.currency_id:
                                                from_currency = trans.currency_id
                                                to_currency = company.currency_id

                                                exchange_rate = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                                                            from_currency_id=from_currency,
                                                                                            to_currency_id=to_currency,
                                                                                            flag='ACCOUNTING', exchange_date=str(ar_receipt_entry.document_date.year) + '-' + str(ar_receipt_entry.document_date.month) + '-01').first()
                                                if not exchange_rate:
                                                    exchange_rate = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                                                                from_currency_id=from_currency,
                                                                                                to_currency_id=to_currency,
                                                                                                exchange_date__lte=ar_receipt_entry.document_date,
                                                                                                flag='ACCOUNTING').order_by('exchange_date').last()
                                                if exchange_rate:
                                                    trans.exchange_rate = exchange_rate.rate
                                                else:
                                                    trans.exchange_rate = 1.0
                                            else:
                                                trans.exchange_rate = ar_receipt_entry.exchange_rate
                                        trans.total_amount = transaction['applied_amount']
                                        trans.journal_id = journal_id
                                        trans.account_id = account_set_item.control_account_id if account_set_item.control_account else ar_receipt_entry.account_set.control_account_id

                                        # related_invoice = Journal.objects.filter(pk=transaction['invoice_id'])
                                        if related_invoice:
                                            # related_invoice = related_invoice.first()
                                            if related_invoice.journal_type == dict(TRANSACTION_TYPES)['AR Invoice']:
                                                # related_invoice.paid_amount = float(related_invoice.paid_amount) + \
                                                #     float(trans.amount) - float(old_paid_amount)
                                                # related_invoice.discount_amount = float(related_invoice.discount_amount) + \
                                                #     float(trans.discount_amount) - float(old_discount_amount)
                                                # related_invoice.adjustment_amount = float(related_invoice.adjustment_amount) + \
                                                #     float(trans.adjustment_amount) - float(old_adjustment_amount)
                                                # related_invoice.outstanding_amount = float(related_invoice.outstanding_amount) - \
                                                #     float(trans.amount) - float(old_paid_amount)
                                                
                                                discount_amount = float(related_invoice.real_discount) + float(trans.discount_amount)
                                                adjustment_amount = float(related_invoice.real_adjustment) + float(trans.adjustment_amount)
                                                outstanding_amount = float(related_invoice.real_outstanding) - float(trans.amount)

                                                real_outstanding_amount = float(outstanding_amount) + float(adjustment_amount) - \
                                                    float(discount_amount)
                                                related_invoice.real_outstanding = real_outstanding_amount
                                                related_invoice.real_discount = discount_amount
                                                related_invoice.real_adjustment = adjustment_amount

                                            else:
                                                # related_invoice.paid_amount = float(
                                                #     related_invoice.paid_amount) + float(trans.total_amount) - float(old_paid_amount)
                                                # related_invoice.discount_amount = float(
                                                #     related_invoice.discount_amount) + float(trans.discount_amount) - float(old_discount_amount)
                                                # related_invoice.adjustment_amount = float(
                                                #     related_invoice.adjustment_amount) + float(trans.adjustment_amount) - float(old_adjustment_amount)

                                                discount_amount = float(related_invoice.real_discount) + float(trans.discount_amount)
                                                adjustment_amount = float(related_invoice.real_adjustment) + float(trans.adjustment_amount)
                                                outstanding_amount = float(related_invoice.real_outstanding) - float(trans.amount)

                                                real_document_amount = float(outstanding_amount) + float(adjustment_amount) - \
                                                            float(discount_amount)

                                                related_invoice.real_outstanding = real_document_amount
                                                related_invoice.real_adjustment = adjustment_amount
                                                related_invoice.real_discount = discount_amount

                                            related_invoice.save()
                                            # related_invoice_list.append(related_invoice.id)
                                        trans.functional_balance_type = BALANCE_TYPE_DICT['Credit'] if trans.is_credit_account else BALANCE_TYPE_DICT['Debit']
                                        trans.functional_currency_id = company.currency_id
                                        trans.functional_amount = float(round_number(float(trans.total_amount) * float(trans.exchange_rate)))
                                        if exchange_rate:
                                            trans.rate_date = exchange_rate.exchange_date
                                        else:
                                            try:
                                                split_date = str(ar_receipt_entry.document_date).split('-')
                                                trans.rate_date = split_date[0] + '-' + split_date[1] + '-01'
                                            except:
                                                trans.rate_date = ar_receipt_entry.document_date
                                        trans.save()

                                        adj_trans = Transaction.objects.filter(journal__transaction_id=trans.id, journal__is_hidden=0, is_hidden=0)
                                        adj_total = 0
                                        for adj_trx in adj_trans:
                                            adj_total += adj_trx.amount
                                            adj_trx.is_hidden = True
                                            adj_trx.create_date = datetime.datetime.now()
                                            adj_trx.update_date = datetime.datetime.now()
                                            adj_trx.save()
                                    
                                        last_trx = trans
                                        if len(transaction['adjustments']) > 0:
                                            if 'id' in transaction['adjustments']:
                                                adjustment = Journal.objects.get(pk=transaction['adjustments']['id'])
                                            else:
                                                adjustment = Journal()

                                            # if 'id' in transaction['adjustments']:
                                            #     adjustment.id = transaction['adjustments']['id']

                                            adjustment.code = (Journal.objects.filter(journal_type=dict(TRANSACTION_TYPES)['AD']).count() + 1)
                                            adjustment.status = int(STATUS_TYPE_DICT['Open'])
                                            adjustment.journal_type = dict(TRANSACTION_TYPES)['AD']
                                            adjustment.document_number = ar_receipt_entry.document_number
                                            adjustment.update_by = request.user.id
                                            adjustment.document_date = ar_receipt_entry.document_date
                                            adjustment.perd_month = ar_receipt_entry.perd_month
                                            adjustment.perd_year = ar_receipt_entry.perd_year
                                            adjustment.create_date = datetime.datetime.now()
                                            adjustment.update_date = datetime.datetime.now()
                                            adjustment.company_id = company_id
                                            adjustment.reference = transaction['adjustments']['reference']
                                            adjustment.name = transaction['adjustments']['description']
                                            adjustment.currency_id = last_trx.currency_id
                                            adjustment.payment_check_number = ar_receipt_entry.payment_check_number
                                            # if adjustment exists but transactions are empty, the adjustment has been removed
                                            if "id" in transaction["adjustments"] and len(transaction['adjustments']['transactions']) == 0:
                                                adjustment.is_hidden = True
                                            else:
                                                adjustment.is_hidden = False
                                            adjustment.transaction_id = last_trx.id
                                            adjustment.batch_id = batch_entry.id
                                            adjustment.posting_date = ar_receipt_entry.document_date
                                            adjustment.customer_id = ar_receipt_entry.customer_id
                                            adjustment.payment_code_id = ar_receipt_entry.payment_code_id
                                            adjustment.exchange_rate = last_trx.exchange_rate
                                            adjustment.exchange_rate_fk_id = exchange_rate.id if exchange_rate else None
                                            adjustment.save()

                                            doc_number = update_next_adj_number(company.id, adjustment.code)

                                            old_transactions = Transaction.objects.filter(journal_id=adjustment.id)
                                            old_transaction_ids = []

                                            for old_trx in old_transactions:
                                                old_transaction_ids.append(old_trx.id)

                                            for trx_adjustment in transaction['adjustments']['transactions']:
                                                trx = Transaction()

                                                trx.is_hidden = False
                                                trx.company_id = company_id
                                                trx.journal_id = adjustment.id
                                                trx.currency_id = last_trx.currency_id
                                                trx.distribution_code_id = trx_adjustment['distribution_code_id'] if int(
                                                    trx_adjustment['distribution_code_id']) != 0 else None
                                                trx.account_id = trx_adjustment['account_id'] if int(trx_adjustment['account_id']) != 0 else None
                                                trx.related_invoice_id = transaction['invoice_id']

                                                if trx_adjustment['reference'] == '':
                                                    trx.reference = adjustment.customer.name
                                                else:
                                                    trx.reference = trx_adjustment['reference']

                                                if trx_adjustment['description'] == '':
                                                    trx.description = transaction['adjustments']['description'] + ' - ' + transaction['adjustments']['reference']
                                                else:
                                                    trx.description = trx_adjustment['description']

                                                trx.amount = float(trx_adjustment['credit'].replace(",", "")) if trx_adjustment['credit'] else float(
                                                    trx_adjustment['debit'].replace(",", ""))
                                                trx.is_credit_account = True if trx_adjustment['credit'] else False
                                                trx.is_debit_account = True if trx_adjustment['debit'] else False

                                                trx.exchange_rate = last_trx.exchange_rate
                                                trx.functional_currency_id = company.currency_id
                                                trx.total_amount = trx.amount
                                                trx.functional_amount = float(round_number(float(trx.total_amount) * float(last_trx.exchange_rate)))
                                                if exchange_rate:
                                                    trx.rate_date = exchange_rate.exchange_date
                                                else:
                                                    trx.rate_date = ar_receipt_entry.document_date

                                                trx.functional_balance_type = BALANCE_TYPE_DICT['Credit'] if trx.is_credit_account else BALANCE_TYPE_DICT['Debit']
                                                trx.transaction_date = getTransactionDate(request, ar_receipt_entry.document_date)
                                                trx.create_date = datetime.datetime.now()
                                                trx.update_date = datetime.datetime.now()
                                                trx.save()

                                            for old_transaction in old_transactions:
                                                if old_transaction.id in old_transaction_ids:
                                                    old_transaction.is_hidden = True
                                                    old_transaction.save()

                                        elif old_adjustment_amount != 0:
                                            adjustment = Journal.objects.get(transaction_id=trans.id)

                                            Transaction.objects.filter(journal_id=adjustment.id).update(is_hidden=True)

                                            adjustment.is_hidden = True
                                            adjustment.save()
                                elif transaction['is_delete'] == '1':
                                    trans = db_trans_list.filter(related_invoice_id=transaction['invoice_id']).first()
                                    trans.is_hidden = True
                                    trans.update_date = datetime.datetime.now()
                                    trans.update_by = request.user.id

                                    adj_trans = Transaction.objects.filter(journal__transaction_id=trans.id, journal__is_hidden=0, is_hidden=0)
                                    for adj_trx in adj_trans:
                                        adj_total += adj_trx.amount
                                        adj_trx.is_hidden = True
                                        adj_trx.create_date = datetime.datetime.now()
                                        adj_trx.update_date = datetime.datetime.now()
                                        adj_trx.save()
                                    
                                    adj_jr = Journal.objects.filter(transaction_id=trans.id, is_hidden=0)
                                    for jr in adj_jr:
                                        jr.is_hidden = True
                                        jr.save()
                                    if transaction['invoice_id']:
                                        related_invoice = Journal.objects.get(pk=transaction['invoice_id'])
                                    else:
                                        related_invoice = None
                                    if related_invoice:
                                        if related_invoice.journal_type == dict(TRANSACTION_TYPES)['AR Invoice']:
                                            adjustment_amount = float(related_invoice.real_adjustment) - float(trans.adjustment_amount)
                                            discount_amount = float(related_invoice.real_discount) - float(trans.discount_amount)
                                            outstanding_amount = float(related_invoice.real_outstanding) + float(
                                                trans.amount)
                                            real_outstanding_amount = float(outstanding_amount) + float(adjustment_amount) - \
                                                    float(discount_amount)

                                            related_invoice.real_outstanding = real_outstanding_amount
                                            related_invoice.real_adjustment = adjustment_amount
                                            related_invoice.real_discount = discount_amount
                                            
                                        else:
                                            discount_amount = float(related_invoice.real_discount) - float(trans.discount_amount)
                                            adjustment_amount = float(related_invoice.real_adjustment) - float(trans.adjustment_amount)
                                            outstanding_amount = float(related_invoice.real_outstanding) + float(trans.amount)

                                            real_document_amount = float(outstanding_amount) + float(adjustment_amount) - \
                                                    float(discount_amount)

                                            related_invoice.real_outstanding = real_document_amount
                                            related_invoice.real_adjustment = adjustment_amount
                                            related_invoice.real_discount = discount_amount
                                        
                                        related_invoice.save()
                                        # related_invoice_list.append(related_invoice.id)
                                        # trans.related_journal_outstanding = related_invoice.outstanding_amount
                                    if trans.exchange_rate:
                                        trans.functional_amount = float(round_number(float(trans.amount) * float(trans.exchange_rate)))
                                    trans.save()
                                else:
                                    trans = Transaction()
                                    trans.is_credit_account = True
                                    trans.is_debit_account = False
                                    trans.amount = transaction['applied_amount']
                                    trans.base_tax_amount = transaction['applied_amount']
                                    trans.discount_amount = transaction['discount_amount']
                                    trans.adjustment_amount = transaction['adjustment_amount'] if 'adjustment_amount' in transaction else 0
                                    trans.update_by = request.user.id
                                    trans.create_date = datetime.datetime.now()
                                    trans.update_date = datetime.datetime.now()
                                    trans.company_id = company_id
                                    if ar_receipt_entry.original_currency_id:
                                        trans.currency_id = ar_receipt_entry.original_currency_id
                                    else:
                                        trans.currency_id = ar_receipt_entry.currency_id
                                    if trans.currency_id == ar_receipt_entry.currency_id:
                                        trans.exchange_rate = ar_receipt_entry.exchange_rate
                                    elif trans.currency_id == company.currency_id:
                                        trans.exchange_rate = 1.0
                                    elif trans.currency_id != company.currency_id and\
                                        'orig_exch_rate' in request.POST and request.POST['orig_exch_rate'] and\
                                            request.POST['orig_exch_rate'] != 1.0 and request.POST['orig_exch_rate'] != 0.0:
                                        trans.exchange_rate = request.POST['orig_exch_rate']
                                    if not trans.exchange_rate:
                                        if trans.currency_id != ar_receipt_entry.currency_id:
                                            from_currency = trans.currency_id
                                            to_currency = company.currency_id

                                            exchange_rate = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                                                        from_currency_id=from_currency,
                                                                                        to_currency_id=to_currency,
                                                                                        flag='ACCOUNTING', exchange_date=str(ar_receipt_entry.document_date.year) + '-' + str(ar_receipt_entry.document_date.month) + '-01').first()
                                            if not exchange_rate:
                                                exchange_rate = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                                                            from_currency_id=from_currency,
                                                                                            to_currency_id=to_currency,
                                                                                            exchange_date__lte=ar_receipt_entry.document_date,
                                                                                            flag='ACCOUNTING').order_by('exchange_date').last()
                                            if exchange_rate:
                                                trans.exchange_rate = exchange_rate.rate
                                            else:
                                                trans.exchange_rate = 1.0
                                        else:
                                            trans.exchange_rate = ar_receipt_entry.exchange_rate
                                    trans.total_amount = transaction['applied_amount']
                                    trans.journal_id = ar_receipt_entry.id
                                    trans.transaction_date = getTransactionDate(request, ar_receipt_entry.document_date)
                                    trans.account_id = account_set_item.control_account_id if account_set_item.control_account else ar_receipt_entry.account_set.control_account_id
                                    trans.related_invoice_id = transaction['invoice_id']
                                    trans.reference = ar_receipt_entry.reference
                                    related_invoice = Journal.objects.get(pk=transaction['invoice_id'])
                                    if related_invoice.journal_type == dict(TRANSACTION_TYPES)['AR Invoice']:
                                        discount_amount = float(related_invoice.real_discount) + float(trans.discount_amount)
                                        adjustment_amount = float(related_invoice.real_adjustment) + float(trans.adjustment_amount)
                                        outstanding_amount = float(related_invoice.real_outstanding) - float(trans.amount)

                                        real_outstanding_amount = float(outstanding_amount) + float(adjustment_amount) - \
                                            float(discount_amount)

                                        related_invoice.real_outstanding = real_outstanding_amount
                                        related_invoice.real_adjustment = adjustment_amount
                                        related_invoice.real_discount = discount_amount
                                    else:
                                        discount_amount = float(related_invoice.real_discount) + float(trans.discount_amount)
                                        adjustment_amount = float(related_invoice.real_adjustment) + float(trans.adjustment_amount)

                                        real_document_amount = float(related_invoice.customer_unapplied) + float(adjustment_amount) - \
                                            float(discount_amount) - float(trans.amount)

                                        related_invoice.real_outstanding = real_document_amount
                                        related_invoice.real_adjustment = adjustment_amount
                                        related_invoice.real_discount = discount_amount

                                    related_invoice.save()
                                    # related_invoice_list.append(related_invoice.id)
                                    # trans.related_journal_outstanding = related_invoice.outstanding_amount
                                    trans.functional_currency_id = company.currency_id
                                    trans.functional_amount = float(round_number(float(trans.total_amount) * float(trans.exchange_rate)))
                                    if exchange_rate:
                                        trans.rate_date = exchange_rate.exchange_date
                                    else:
                                        try:
                                            split_date = str(ar_receipt_entry.document_date).split('-')
                                            trans.rate_date = split_date[0] + '-' + split_date[1] + '-01'
                                        except:
                                            trans.rate_date = ar_receipt_entry.document_date

                                    trans.functional_balance_type = (BALANCE_TYPE_DICT['Credit'],
                                                                    BALANCE_TYPE_DICT['Debit'])[trans.is_debit_account]
                                    trans.save()
                                    last_trx = trans
                                    if len(transaction['adjustments']) > 0:
                                        if 'id' in transaction['adjustments']:
                                            adjustment = Journal.objects.get(pk=transaction['adjustments']['id'])
                                        else:
                                            adjustment = Journal()

                                        # if 'id' in transaction['adjustments']:
                                        #     adjustment.id = transaction['adjustments']['id']

                                        adjustment.code = (Journal.objects.filter(journal_type=dict(TRANSACTION_TYPES)['AD']).count() + 1)
                                        adjustment.status = int(STATUS_TYPE_DICT['Open'])
                                        adjustment.journal_type = dict(TRANSACTION_TYPES)['AD']
                                        adjustment.document_number = ar_receipt_entry.document_number
                                        adjustment.update_by = request.user.id
                                        adjustment.document_date = ar_receipt_entry.document_date
                                        adjustment.perd_month = ar_receipt_entry.perd_month
                                        adjustment.perd_year = ar_receipt_entry.perd_year
                                        adjustment.create_date = datetime.datetime.now()
                                        adjustment.update_date = datetime.datetime.now()
                                        adjustment.company_id = company_id
                                        adjustment.reference = transaction['adjustments']['reference']
                                        adjustment.name = transaction['adjustments']['description']
                                        adjustment.currency_id = last_trx.currency_id
                                        adjustment.payment_check_number = ar_receipt_entry.payment_check_number
                                        # if adjustment exists but transactions are empty, the adjustment has been removed
                                        if "id" in transaction["adjustments"] and len(transaction['adjustments']['transactions']) == 0:
                                            adjustment.is_hidden = True
                                        else:
                                            adjustment.is_hidden = False
                                        adjustment.transaction_id = last_trx.id
                                        adjustment.batch_id = batch_entry.id
                                        adjustment.posting_date = ar_receipt_entry.document_date
                                        adjustment.customer_id = ar_receipt_entry.customer_id
                                        adjustment.payment_code_id = ar_receipt_entry.payment_code_id
                                        adjustment.exchange_rate = last_trx.exchange_rate
                                        adjustment.exchange_rate_fk_id = exchange_rate.id if exchange_rate else None
                                        adjustment.save()


                                        for trx_adjustment in transaction['adjustments']['transactions']:
                                            trx = Transaction()

                                            trx.is_hidden = False
                                            trx.company_id = company_id
                                            trx.journal_id = adjustment.id
                                            trx.currency_id = last_trx.currency_id
                                            trx.distribution_code_id = trx_adjustment['distribution_code_id'] if int(
                                                trx_adjustment['distribution_code_id']) != 0 else None
                                            trx.account_id = trx_adjustment['account_id'] if int(trx_adjustment['account_id']) != 0 else None
                                            trx.related_invoice_id = transaction['invoice_id']

                                            if trx_adjustment['reference'] == '':
                                                trx.reference = adjustment.customer.name
                                            else:
                                                trx.reference = trx_adjustment['reference']

                                            if trx_adjustment['description'] == '':
                                                trx.description = transaction['adjustments']['description'] + ' - ' + transaction['adjustments']['reference']
                                            else:
                                                trx.description = trx_adjustment['description']

                                            trx.amount = float(trx_adjustment['credit'].replace(",", "")) if trx_adjustment['credit'] else float(
                                                trx_adjustment['debit'].replace(",", ""))
                                            trx.is_credit_account = True if trx_adjustment['credit'] else False
                                            trx.is_debit_account = True if trx_adjustment['debit'] else False

                                            trx.exchange_rate = last_trx.exchange_rate
                                            trx.functional_currency_id = company.currency_id
                                            trx.total_amount = trx.amount
                                            trx.functional_amount = float(round_number(float(trx.total_amount) * float(last_trx.exchange_rate)))
                                            if exchange_rate:
                                                trx.rate_date = exchange_rate.exchange_date
                                            else:
                                                trx.rate_date = ar_receipt_entry.document_date

                                            trx.functional_balance_type = BALANCE_TYPE_DICT['Credit'] if trx.is_credit_account else BALANCE_TYPE_DICT['Debit']
                                            trx.transaction_date = getTransactionDate(request, ar_receipt_entry.document_date)
                                            trx.create_date = datetime.datetime.now()
                                            trx.update_date = datetime.datetime.now()
                                            trx.save()
                        # fix aging
                        if len(related_invoice_list):
                            update_aging_thread = threading.Thread(name='fix_payments_outs_amount_ar',
                                                                target=fix_payments_outs_amount,
                                                                args=(request, 'AR', related_invoice_list, ), daemon=False)
                            update_aging_thread.start()

                    elif ar_receipt_entry.transaction_type == RECEIPT_TRANSACTION_TYPES_DICT['Unapplied Cash']:
                        ar_receipt_entry.document_type = DOCUMENT_TYPE_DICT['Unapplied Cash']
                        ar_receipt_entry.amount = request.POST['payment_amount'].replace(",", "")
                        ar_receipt_entry.total_amount = request.POST['payment_amount'].replace(",", "")
                        # ar_receipt_entry.payment_amount = 0
                        ar_receipt_entry.original_amount = request.POST['original_amount'].replace(",", "")
                        ar_receipt_entry.outstanding_amount = request.POST['customer_unapplied'].replace(",", "")
                        ar_receipt_entry.receipt_unapplied = request.POST['receipt_unapplied'].replace(",", "")
                        ar_receipt_entry.customer_unapplied = request.POST['customer_unapplied'].replace(",", "")
                        ar_receipt_entry.original_currency_id = ar_receipt_entry.customer.currency.id
                        ar_receipt_entry.payment_currency_id = ar_receipt_entry.bank.currency.id
                        ar_receipt_entry.orig_exch_rate = request.POST['orig_exch_rate'] if request.POST['orig_exch_rate'] else ar_receipt_entry.exchange_rate
                        if float(ar_receipt_entry.orig_exch_rate) == 0.0:
                            ar_receipt_entry.orig_exch_rate = ar_receipt_entry.exchange_rate
                        ar_receipt_entry.save()

                        account_set_item = AccountSet.objects.get(pk=request.POST['account_set'])

                        transs = Transaction.objects.filter(company_id=company_id, is_hidden=0,
                                                           journal_id=ar_receipt_entry.id)
                        for item in transs:
                            item.is_hidden = 1
                            item.save()

                        trans = Transaction()
                        trans.is_credit_account = True
                        trans.is_debit_account = False
                        trans.update_by = request.user.id
                        trans.update_date = datetime.datetime.now()
                        trans.company_id = company_id
                        if ar_receipt_entry.original_currency_id:
                            trans.currency_id = ar_receipt_entry.original_currency_id
                        else:
                            trans.currency_id = ar_receipt_entry.currency_id
                        if trans.currency_id == ar_receipt_entry.currency_id:
                            trans.exchange_rate = ar_receipt_entry.exchange_rate
                        elif trans.currency_id == company.currency_id:
                            trans.exchange_rate = 1.0
                        elif trans.currency_id != company.currency_id and\
                            'orig_exch_rate' in request.POST and request.POST['orig_exch_rate'] and\
                                request.POST['orig_exch_rate'] != 1.0 and request.POST['orig_exch_rate'] != 0.0:
                            trans.exchange_rate = request.POST['orig_exch_rate']
                        if not trans.exchange_rate:
                            if trans.currency_id != ar_receipt_entry.currency_id:
                                from_currency = trans.currency_id
                                to_currency = company.currency_id

                                exchange_rate = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                                            from_currency_id=from_currency,
                                                                            to_currency_id=to_currency,
                                                                            flag='ACCOUNTING', exchange_date=str(ar_receipt_entry.document_date.year) + '-' + str(ar_receipt_entry.document_date.month) + '-01').first()
                                if not exchange_rate:
                                    exchange_rate = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                                                from_currency_id=from_currency,
                                                                                to_currency_id=to_currency,
                                                                                exchange_date__lte=ar_receipt_entry.document_date,
                                                                                flag='ACCOUNTING').order_by('exchange_date').last()
                                if exchange_rate:
                                    trans.exchange_rate = exchange_rate.rate
                                else:
                                    trans.exchange_rate = 1.0
                            else:
                                trans.exchange_rate = ar_receipt_entry.exchange_rate
                        trans.amount = ar_receipt_entry.total_amount
                        trans.base_tax_amount = ar_receipt_entry.total_amount
                        trans.tax_amount = 0
                        trans.total_amount = ar_receipt_entry.total_amount
                        trans.journal_id = ar_receipt_entry.id
                        trans.account_id = account_set_item.control_account_id if account_set_item.control_account else ar_receipt_entry.account_set.control_account_id
                        trans.remark = ''
                        trans.is_tax_include = False
                        trans.is_tax_transaction = False
                        trans.is_manual_tax_input = False
                        trans.functional_currency_id = company.currency_id
                        trans.functional_amount = float(round_number(float(trans.total_amount) * float(trans.exchange_rate)))
                        trans.functional_balance_type = BALANCE_TYPE_DICT['Credit'] if trans.is_credit_account else BALANCE_TYPE_DICT['Debit']
                        if exchange_rate:
                            trans.rate_date = exchange_rate.exchange_date
                        else:
                            try:
                                split_date = str(ar_receipt_entry.document_date).split('-')
                                trans.rate_date = split_date[0] + '-' + split_date[1] + '-01'
                            except:
                                trans.rate_date = ar_receipt_entry.document_date
                        trans.save()
                    else:
                        print(transaction_list)
                        for transaction in transaction_list:
                            if transaction['is_delete'] == '0':
                                trans = Transaction.objects.get(pk=transaction['trans_id'])
                                trans.is_credit_account = True
                                trans.update_by = request.user.id
                                trans.update_date = datetime.datetime.now()
                                trans.company_id = company_id
                                trans.currency_id = request.POST['currency']
                                trans.amount = transaction['amount']
                                trans.base_tax_amount = transaction['amount']
                                trans.tax_amount = transaction['tax_amount']
                                trans.total_amount = transaction['total_amount']
                                trans.journal_id = journal_id
                                trans.distribution_code_id = transaction['distribution_id']
                                trans.account_id = transaction['account_id']
                                trans.description = transaction['description']
                                # trans.remark = transaction['description']
                                trans.is_tax_include = int(transaction['is_tax_included'])
                                trans.is_tax_transaction = int(transaction['is_tax_transaction'])
                                trans.is_manual_tax_input = int(transaction['is_manual_tax_input'])
                                if transaction['tax_id'] and transaction['tax_id'] is not '0' and transaction['tax_id'] is not '':
                                    trans.tax_id = int(transaction['tax_id'])
                                else:
                                    trans.tax_id = None
                                trans.reference = ar_receipt_entry.reference
                                trans.exchange_rate = ar_receipt_entry.exchange_rate
                                trans.functional_currency_id = company.currency_id
                                trans.functional_amount = float(round_number(float(trans.total_amount) * float(ar_receipt_entry.exchange_rate)))
                                trans.functional_balance_type = BALANCE_TYPE_DICT['Credit'] if trans.is_credit_account else BALANCE_TYPE_DICT['Debit']
                                if exchange_rate:
                                    trans.rate_date = exchange_rate.exchange_date
                                else:
                                    try:
                                        split_date = str(ar_receipt_entry.document_date).split('-')
                                        trans.rate_date = split_date[0] + '-' + split_date[1] + '-01'
                                    except:
                                        trans.rate_date = ar_receipt_entry.document_date
                                trans.save()
                            elif transaction['is_delete'] == '1':
                                trans = Transaction.objects.get(pk=transaction['trans_id'])
                                trans.is_hidden = True
                                trans.update_date = datetime.datetime.now()
                                trans.update_by = request.user.id
                                trans.save()
                            else:
                                trans = Transaction()
                                trans.is_credit_account = True
                                trans.update_by = request.user.id
                                trans.update_date = datetime.datetime.now()
                                trans.company_id = company_id
                                trans.currency_id = request.POST['currency']
                                trans.amount = transaction['amount']
                                trans.base_tax_amount = transaction['base_tax_amount']
                                trans.tax_amount = transaction['tax_amount']
                                trans.total_amount = transaction['total_amount']
                                trans.journal_id = journal_id
                                trans.distribution_code_id = transaction['distribution_id']
                                trans.account_id = transaction['account_id']
                                trans.description = transaction['description']
                                trans.is_tax_include = int(transaction['is_tax_included'])
                                trans.is_tax_transaction = int(transaction['is_tax_transaction'])
                                trans.is_manual_tax_input = int(transaction['is_manual_tax_input'])
                                if transaction['tax_id'] and transaction['tax_id'] is not '0' and transaction['tax_id'] is not '':
                                    trans.tax_id = int(transaction['tax_id'])
                                else:
                                    trans.tax_id = None
                                trans.reference = ar_receipt_entry.reference
                                trans.exchange_rate = ar_receipt_entry.exchange_rate
                                trans.functional_currency_id = company.currency_id
                                trans.functional_amount = float(round_number(float(trans.total_amount) * float(ar_receipt_entry.exchange_rate)))
                                if exchange_rate:
                                    trans.rate_date = exchange_rate.exchange_date
                                else:
                                    try:
                                        split_date = str(ar_receipt_entry.document_date).split('-')
                                        trans.rate_date = split_date[0] + '-' + split_date[1] + '-01'
                                    except:
                                        trans.rate_date = ar_receipt_entry.document_date
                                trans.functional_balance_type = (BALANCE_TYPE_DICT['Credit'],
                                                                 BALANCE_TYPE_DICT['Debit'])[trans.is_debit_account]
                                trans.transaction_date = getTransactionDate(request, ar_receipt_entry.document_date)
                                trans.save()

                        ar_receipt_entry.amount = request.POST['amount'].replace(",", "")
                        ar_receipt_entry.tax_amount = request.POST['tax_amount'].replace(",", "")
                        ar_receipt_entry.total_amount = request.POST['total_amount'].replace(",", "")
                        ar_receipt_entry.document_type = DOCUMENT_TYPE_DICT['Miscellaneous Receipt']
                        ar_receipt_entry.save()

                    batch_amount = Journal.objects.filter(batch_id=batch.id, company_id=company_id, is_hidden=0) \
                        .aggregate(batch_amount=Sum('total_amount'))
                    batch.batch_amount = batch_amount.get('batch_amount', Decimal(0.000000))
                    batch.save()

                    return HttpResponsePermanentRedirect(
                        reverse('journal_list', kwargs={'journal_type': dict(TRANSACTION_TYPES)['AR Receipt'],
                                                        'batch_id': journal.batch_id}))
                else:
                    print(INVALID_FORM, " Form Error: ", form.errors)
                    messages.error(request, INVALID_FORM)

    except Exception as e:
        print(EXCEPTION_JOURNAL_EDIT % ('AR Receipt'), e)
        logging.error(traceback.format_exc())
        messages.error(request, EXCEPTION_JOURNAL_EDIT % ('AR Receipt'))

    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))


@login_required
@permission_required('accounting.delete_journal', login_url='/alert/')
def ar_receipt_delete(request, journal_id):
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    try:
        with transactionlib.atomic():
            # get journal
            journal = Journal.objects.get(pk=journal_id)
            journal.is_hidden = True
            journal.update_by = request.user.id
            journal.update_date = datetime.datetime.now()
            journal.save()
            # update batch number entries
            batch = Batch.objects.get(pk=journal.batch_id)
            batch.no_entries -= 1
            batch.batch_amount -= journal.total_amount
            batch.update_by = request.user.id
            batch.update_date = datetime.datetime.now()
            batch.save()
            # journal transactions
            transactions = Transaction.objects.filter(company_id=company_id, is_hidden=0, journal_id=journal_id)
            if journal.transaction_type == RECEIPT_TRANSACTION_TYPES_DICT['Receipt']:
                related_invoice_list = []
                for trans in transactions:
                    trans.is_hidden = True
                    trans.update_date = datetime.datetime.now()
                    trans.update_by = request.user.id
                    if trans.is_credit_account == 1:
                        if trans.related_invoice_id:
                            related_invoice = Journal.objects.get(pk=trans.related_invoice_id)
                            if related_invoice:
                                if related_invoice.journal_type == dict(TRANSACTION_TYPES)['AR Invoice']:
                                    adjustment_amount = float(related_invoice.real_adjustment) - float(trans.adjustment_amount)
                                    discount_amount = float(related_invoice.real_discount) - float(trans.discount_amount)
                                    outstanding_amount = float(related_invoice.real_outstanding) + float(
                                        trans.amount)
                                    real_outstanding_amount = float(outstanding_amount) + float(adjustment_amount) - \
                                            float(discount_amount)

                                    related_invoice.real_outstanding = real_outstanding_amount
                                    related_invoice.real_adjustment = adjustment_amount
                                    related_invoice.real_discount = discount_amount
                                    
                                else:
                                    discount_amount = float(related_invoice.real_discount) - float(trans.discount_amount)
                                    adjustment_amount = float(related_invoice.real_adjustment) - float(trans.adjustment_amount)
                                    outstanding_amount = float(related_invoice.real_outstanding) + float(trans.amount)

                                    real_document_amount = float(outstanding_amount) + float(adjustment_amount) - \
                                            float(discount_amount)

                                    related_invoice.real_outstanding = real_document_amount
                                    related_invoice.real_adjustment = adjustment_amount
                                    related_invoice.real_discount = discount_amount
                                
                                related_invoice.save()
                                # related_invoice_list.append(related_invoice.id)
                            if trans.exchange_rate:
                                trans.functional_amount = float(round_number(float(trans.amount) * float(trans.exchange_rate)))
                    trans.save()
                    # delete adj journal
                    try:
                        adj_trans = Transaction.objects.filter(journal__transaction_id=trans.id, journal__is_hidden=0, is_hidden=0)
                        for adj_trx in adj_trans:
                            adj_trx.is_hidden = True
                            adj_trx.create_date = datetime.datetime.now()
                            adj_trx.update_date = datetime.datetime.now()
                            adj_trx.save()
                        
                        adj_jr = Journal.objects.filter(transaction_id=trans.id, is_hidden=0)
                        for jr in adj_jr:
                            jr.is_hidden = True
                            jr.save()
                    except:
                        pass
                # fix aging
                if len(related_invoice_list):
                    update_aging_thread = threading.Thread(name='fix_payments_outs_amount_ar',
                                                        target=fix_payments_outs_amount,
                                                        args=(request, 'AR', related_invoice_list, ), daemon=False)
                    update_aging_thread.start()
            else:
                for trans in transactions:
                    trans.is_hidden = True
                    trans.update_date = datetime.datetime.now()
                    trans.update_by = request.user.id
                    trans.save()

            batch_amount = Journal.objects.filter(batch_id=batch.id, company_id=company_id, is_hidden=0).aggregate(
                batch_amount=Sum('total_amount'))
            if batch_amount.get('batch_amount'):
                batch.batch_amount = batch_amount.get('batch_amount')
            else:
                batch.batch_amount = Decimal(0.000000)
            batch.save()

            return HttpResponsePermanentRedirect(
                reverse('journal_list', kwargs={'journal_type': dict(TRANSACTION_TYPES)['AR Receipt'],
                                                'batch_id': journal.batch_id}))
    except OSError as e:
        print(e)
        # logging.error(e)
        return HttpResponsePermanentRedirect(
                reverse('journal_list', kwargs={'journal_type': dict(TRANSACTION_TYPES)['AR Receipt'],
                                                'batch_id': journal.batch_id}))


@login_required
@permission_required('accounting.delete_batch', login_url='/alert/')
def delete_batch_receipt(request, batch_id):
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    with transactionlib.atomic():
        try:
            related_invoice_list = []
            # Batch
            batch = Batch.objects.get(pk=batch_id)
            batch.status = STATUS_TYPE_DICT['Deleted']
            batch.update_by = request.user.id
            batch.update_date = datetime.datetime.now()
            batch.save()
            # Journal
            list_journal = Journal.objects.filter(batch_id=batch_id, company_id=company_id, is_hidden=False)
            for journal in list_journal:
                journal.is_hidden = True
                journal.update_by = request.user.id
                journal.update_date = datetime.datetime.now()
                journal.save()
                # journal transactions
                transactions = Transaction.objects.filter(company_id=company_id, is_hidden=0,
                                                          journal_id=journal.id)
                if journal.transaction_type == RECEIPT_TRANSACTION_TYPES_DICT['Receipt']:
                    for trans in transactions:
                        trans.is_hidden = True
                        trans.update_date = datetime.datetime.now()
                        trans.update_by = request.user.id
                        if trans.is_credit_account == 1:
                            if trans.related_invoice_id:
                                related_invoice = Journal.objects.get(pk=trans.related_invoice_id)
                                if related_invoice:
                                    if related_invoice.journal_type == dict(TRANSACTION_TYPES)['AR Invoice']:
                                        adjustment_amount = float(related_invoice.real_adjustment) - float(trans.adjustment_amount)
                                        discount_amount = float(related_invoice.real_discount) - float(trans.discount_amount)
                                        outstanding_amount = float(related_invoice.real_outstanding) + float(
                                            trans.amount)
                                        real_outstanding_amount = float(outstanding_amount) + float(adjustment_amount) - \
                                                float(discount_amount)

                                        related_invoice.real_outstanding = real_outstanding_amount
                                        related_invoice.real_adjustment = adjustment_amount
                                        related_invoice.real_discount = discount_amount
                                        
                                    else:
                                        discount_amount = float(related_invoice.real_discount) - float(trans.discount_amount)
                                        adjustment_amount = float(related_invoice.real_adjustment) - float(trans.adjustment_amount)
                                        outstanding_amount = float(related_invoice.real_outstanding) + float(trans.amount)

                                        real_document_amount = float(outstanding_amount) + float(adjustment_amount) - \
                                                float(discount_amount)

                                        related_invoice.real_outstanding = real_document_amount
                                        related_invoice.real_adjustment = adjustment_amount
                                        related_invoice.real_discount = discount_amount
                                    
                                    related_invoice.save()
                                    # related_invoice_list.append(related_invoice.id)
                                if trans.exchange_rate:
                                    trans.functional_amount = float(round_number(float(trans.amount) * float(trans.exchange_rate)))
                        trans.save()
                        # delete adj journal
                        try:
                            adj_trans = Transaction.objects.filter(journal__transaction_id=trans.id, journal__is_hidden=0, is_hidden=0)
                            for adj_trx in adj_trans:
                                adj_trx.is_hidden = True
                                adj_trx.create_date = datetime.datetime.now()
                                adj_trx.update_date = datetime.datetime.now()
                                adj_trx.save()
                            
                            adj_jr = Journal.objects.filter(transaction_id=trans.id, is_hidden=0)
                            for jr in adj_jr:
                                jr.is_hidden = True
                                jr.save()
                        except:
                            pass
                else:
                    for trans in transactions:
                        trans.is_hidden = True
                        trans.update_date = datetime.datetime.now()
                        trans.update_by = request.user.id
                        trans.save()
            
            # fix aging
            if len(related_invoice_list):
                update_aging_thread = threading.Thread(name='fix_payments_outs_amount_ar',
                                                    target=fix_payments_outs_amount,
                                                    args=(request, 'AR', related_invoice_list, ), daemon=False)
                update_aging_thread.start()
        except OSError as e:
            print(e)
            # logging.error(e)
            transactionlib.set_rollback(True)
            messages.error(request, 'Error happened while deleting the batch')

    return HttpResponsePermanentRedirect(
        reverse('batch_list', kwargs={'batch_type': dict(TRANSACTION_TYPES)['AR Receipt']}))


@login_required
@permission_required('accounting.change_batch', login_url='/alert/')
def send_batch_receipt(request, batch_id):
    with transactionlib.atomic():
        try:
            related_invoice_list = []
            # Batch
            company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
            session_date = request.session['session_date']
            company = Company.objects.get(pk=company_id)
            batch = Batch.objects.get(pk=batch_id)
            batch.status = int(STATUS_TYPE_DICT['Posted'])
            batch.update_by = request.user.id
            batch.update_date = datetime.datetime.now()
            batch.save()

            # clone GL for Batch
            gl_batch = deepcopy(batch)
            gl_batch.pk = None
            gl_batch.status = int(STATUS_TYPE_DICT['Open'])
            gl_batch.input_type = int(INPUT_TYPE_DICT['Generated'])
            gl_batch.description = 'Generated from AR Receipt ' + str(batch.batch_date.strftime('%d/%m/%Y'))
            gl_batch.batch_type = dict(TRANSACTION_TYPES)['GL']
            gl_batch.batch_no = generate_batch_number(company.id, gl_batch.batch_type)
            gl_batch.batch_amount = 0
            gl_batch.posting_sequence = 0
            gl_batch.related_batch_id = batch.id
            gl_batch.save()

            # Journal
            list_journal = Journal.objects.filter(batch_id=batch_id, company_id=company_id, is_hidden=False) \
                                            .exclude(journal_type=dict(TRANSACTION_TYPES)['AD'])\
                                            .select_related('batch')

            for journal in list_journal:
                apply_to_docs = ''
                journal.status = int(STATUS_TYPE_DICT['Posted'])
                journal.update_by = request.user.id
                journal.update_date = datetime.datetime.now()
                journal.save()
                total_source = total_func = tax_source = tax_func = 0.0
                tax_id = None

                same_curr = True

                # get latest exchange rate
                if journal.transaction_type == RECEIPT_TRANSACTION_TYPES_DICT['Receipt']:  # 1:receipt, 2:misc.receipt
                    from_currency = journal.customer.currency_id
                else:
                    from_currency = journal.bank.currency_id

                to_currency = company.currency_id

                # clone GL for journal
                gl_journal = deepcopy(journal)
                gl_journal.pk = None
                gl_journal.status = int(STATUS_TYPE_DICT['Open'])
                gl_journal.journal_type = dict(TRANSACTION_TYPES)['GL']
                gl_journal.batch_id = gl_batch.id
                gl_journal.source_type = 'AR-PY'
                gl_journal.exchange_rate = 1
                gl_journal.amount = float(round_number(math.fabs(Decimal(journal.total_amount) * Decimal(journal.exchange_rate))))
                gl_journal.total_amount = float(round_number(math.fabs(Decimal(journal.total_amount) * Decimal(journal.exchange_rate))))
                gl_journal.save()
                name = generate_description(company_id, journal, 'G/L Entry Description')
                if name and name != '':
                    gl_journal.name = name
                else:
                    gl_journal.name = ""
                gl_journal.save()

                # get 'invoice source'
                invoice_source_id = Transaction.objects.filter(is_hidden=False, company_id=company_id,
                                                                journal_id=journal.id) \
                    .values('related_invoice_id').distinct()

                last_ar_gl_transactions = None

                if invoice_source_id:
                    for invoice_source in invoice_source_id:

                        if invoice_source['related_invoice_id'] == None:
                            continue

                        journal_src = Journal.objects.get(pk=invoice_source['related_invoice_id'])

                        if journal_src:
                            # search last revaluation of each 'invoice source' of current payment , add all of its transactions if exist
                            last_ar_gl_journals = Journal.objects.filter(company_id=company_id, is_hidden=False,
                                                                            journal_type=dict(TRANSACTION_TYPES)['GL'],
                                                                            source_type='AR-GL',
                                                                            reference=journal_src.id, status__in=(1, 2))
                            if last_ar_gl_journals:
                                for last_ar_gl_journal in last_ar_gl_journals:
                                    last_ar_gl_transactions = Transaction.objects.filter(company_id=company_id,
                                                                                            is_hidden=False,
                                                                                            journal_id=last_ar_gl_journal.id)
                                    if last_ar_gl_transactions:
                                        for last_ar_gl_transaction in last_ar_gl_transactions:
                                            revaluation_transaction = deepcopy(last_ar_gl_transaction)
                                            revaluation_transaction.pk = None
                                            revaluation_transaction.source_type = 'AR-GL'
                                            # revaluation_transaction.reference = to_string(
                                            #     gl_journal.payment_check_number)
                                            revaluation_transaction.journal_id = gl_journal.id
                                            if last_ar_gl_transaction.journal.batch.input_type == INPUT_TYPE_DICT[
                                                    'Imported']:
                                                revaluation_transaction.is_debit_account = (True, False)[
                                                    last_ar_gl_transaction.is_debit_account]
                                                revaluation_transaction.is_credit_account = not revaluation_transaction.is_debit_account
                                                revaluation_transaction.functional_balance_type = \
                                                    (BALANCE_TYPE_DICT['Debit'],
                                                        BALANCE_TYPE_DICT['Credit'])[
                                                        last_ar_gl_transaction.is_debit_account]
                                            revaluation_transaction.save()

                transactions = Transaction.objects.filter(company_id=company_id, is_hidden=False,
                                                            journal_id=journal.id)\
                    .select_related('journal')

                # journal transactions
                # if transactions:
                #     lst_transaction = transactions.last()
                #     j_desc = generate_description(company_id, journal, 'G/L Detail Description', False, lst_transaction)
                #     j_reference = generate_description(company_id, journal, 'G/L Detail Reference', False, lst_transaction)
                #     j_remark = generate_description(company_id, journal, 'G/L Detail Comment', False, lst_transaction)
                last_trans = None
                if journal.transaction_type == RECEIPT_TRANSACTION_TYPES_DICT['Unapplied Cash']:
                    if journal.currency != journal.customer.currency:
                        same_curr = False
                    account_set = journal.account_set
                    for trans in transactions:
                        j_desc = generate_description(company_id, journal, 'G/L Detail Description', False, trans)
                        j_reference = generate_description(company_id, journal, 'G/L Detail Reference', False, trans)
                        j_remark = generate_description(company_id, journal, 'G/L Detail Comment', False, trans)
                        desc = generate_description(company_id, journal, 'G/L Detail Description', True, trans)
                        reference = generate_description(company_id, journal, 'G/L Detail Reference', True, trans)
                        remark = generate_description(company_id, journal, 'G/L Detail Comment', True, trans)
                        gl_clone_transaction = deepcopy(trans)
                        gl_clone_transaction.pk = None
                        gl_clone_transaction.account_id = account_set.control_account_id
                        if trans.amount < 0:
                            if trans.is_debit_account:
                                gl_clone_transaction.is_debit_account = False
                                gl_clone_transaction.is_credit_account = True
                                gl_clone_transaction.functional_balance_type = BALANCE_TYPE_DICT['Credit']
                            else:
                                gl_clone_transaction.is_debit_account = True
                                gl_clone_transaction.is_credit_account = False
                                gl_clone_transaction.functional_balance_type = BALANCE_TYPE_DICT['Debit']

                        total_source += float(trans.total_amount)
                        # total_func += float(trans.functional_amount)
                        total_func += float(trans.total_amount) * float(trans.exchange_rate)

                        gl_clone_transaction.amount = math.fabs(float(trans.amount))
                        gl_clone_transaction.base_tax_amount = math.fabs(float(trans.base_tax_amount))
                        gl_clone_transaction.tax_amount = math.fabs(float(trans.tax_amount))
                        gl_clone_transaction.total_amount = math.fabs(float(trans.total_amount))
                        if company.currency.is_decimal:
                            gl_clone_transaction.functional_amount = float(round_number(math.fabs(float(trans.functional_amount))))
                        else:
                            gl_clone_transaction.functional_amount = float(round_number(math.fabs(float(trans.functional_amount)), 0))

                        gl_clone_transaction.journal_id = gl_journal.id
                        gl_clone_transaction.source_type = gl_journal.source_type
                        if desc != '':
                            gl_clone_transaction.description = desc
                        else:
                            gl_clone_transaction.description = ''
                        if reference != '':
                            gl_clone_transaction.reference = reference
                        else:
                            gl_clone_transaction.reference = ''
                        if remark != '':
                            gl_clone_transaction.remark = remark
                        else:
                            gl_clone_transaction.remark = ''
                        gl_clone_transaction.save()
                elif journal.transaction_type == RECEIPT_TRANSACTION_TYPES_DICT['Receipt']:
                    if journal.currency != journal.customer.currency:
                        same_curr = False
                    # Store account set
                    account_set = journal.account_set
                    currencies = []
                    if transactions:
                        for trans in transactions:
                            j_desc = generate_description(company_id, journal, 'G/L Detail Description', False, trans)
                            j_reference = generate_description(company_id, journal, 'G/L Detail Reference', False, trans)
                            j_remark = generate_description(company_id, journal, 'G/L Detail Comment', False, trans)
                            invoice_exchange_rate = None
                            desc = generate_description(company_id, journal, 'G/L Detail Description', True, trans)
                            reference = generate_description(company_id, journal, 'G/L Detail Reference', True, trans)
                            remark = generate_description(company_id, journal, 'G/L Detail Comment', True, trans)
                            related_invoice = Journal.objects.none()
                            if trans.currency_id != company.currency_id:
                                # Store transaction currency
                                currencies.append(trans.currency)
                                try:
                                    related_invoice = Journal.objects.get(pk=trans.related_invoice_id)
                                    invoice_exchange_rate = float(related_invoice.exchange_rate)
                                except:
                                    pass

                                exchange_rate = float(trans.exchange_rate)

                            if trans.related_invoice_id == None:
                                continue
                            # Discount entry
                            if float(trans.discount_amount) > 0.000000:
                                discount_trans = deepcopy(trans)

                                discount_trans.pk = None
                                discount_trans.is_credit_account = False
                                discount_trans.is_debit_account = True
                                discount_trans.journal_id = gl_journal.id
                                discount_trans.source_type = gl_journal.source_type
                                if j_desc != '':
                                    discount_trans.description = j_desc
                                elif desc != '':
                                    discount_trans.description = desc
                                else:
                                    discount_trans.description = ''
                                if j_reference != '':
                                    discount_trans.reference = j_reference
                                else:
                                    discount_trans.reference = ''
                                discount_trans.account_id = trans.account_id
                                discount_trans.tax_amount = 0
                                discount_trans.amount = trans.discount_amount
                                discount_trans.base_tax_amount = trans.discount_amount
                                discount_trans.total_amount = trans.discount_amount
                                discount_trans.functional_balance_type = BALANCE_TYPE_DICT['Debit'] if discount_trans.is_debit_account else BALANCE_TYPE_DICT['Credit']
                                if company.currency.is_decimal:
                                    discount_trans.functional_amount = float(round_number(Decimal(discount_trans.total_amount) * Decimal(
                                        trans.exchange_rate)))
                                else:
                                    discount_trans.functional_amount = float(round_number(Decimal(discount_trans.total_amount) * Decimal(
                                        trans.exchange_rate), 0))

                                discount_trans.save()

                                discount_trans_pair = deepcopy(trans)

                                discount_trans_pair.pk = None
                                discount_trans_pair.is_credit_account = True
                                discount_trans_pair.is_debit_account = False
                                discount_trans_pair.journal_id = gl_journal.id
                                discount_trans_pair.source_type = gl_journal.source_type
                                if j_desc != '':
                                    discount_trans_pair.description = j_desc
                                elif desc != '':
                                    discount_trans_pair.description = desc
                                else:
                                    discount_trans_pair.description = ''
                                if j_reference != '':
                                    discount_trans_pair.reference = j_reference
                                else:
                                    discount_trans_pair.reference = ''
                                discount_trans_pair.account_id = account_set.discount_account_id
                                discount_trans_pair.tax_amount = 0
                                discount_trans_pair.amount = trans.discount_amount
                                discount_trans_pair.base_tax_amount = trans.discount_amount
                                discount_trans_pair.total_amount = trans.discount_amount
                                discount_trans_pair.functional_balance_type = BALANCE_TYPE_DICT['Debit'] \
                                    if discount_trans_pair.is_debit_account else BALANCE_TYPE_DICT['Credit']
                                if company.currency.is_decimal:
                                    discount_trans_pair.functional_amount = float(round_number(Decimal(discount_trans_pair.total_amount) * Decimal(
                                        trans.exchange_rate)))
                                else:
                                    discount_trans_pair.functional_amount = float(round_number(Decimal(discount_trans_pair.total_amount) * Decimal(
                                        trans.exchange_rate), 0))

                                discount_trans_pair.save()

                            # Adjustment entry
                            if float(trans.adjustment_amount) != 0.000000:
                                adjustment_trans = deepcopy(trans)

                                # Adjustment transaction entry
                                adj_journal = Journal.objects.filter(transaction_id=trans.id)
                                if adj_journal:
                                    adj_journal = adj_journal.first()
                                    adj_journal.status = int(STATUS_TYPE_DICT['Posted'])
                                    adj_journal.save()

                                adjustment_trans.pk = None

                                if trans.adjustment_amount > 0:
                                    adjustment_trans.is_credit_account = False
                                    adjustment_trans.is_debit_account = True
                                    adjustment_trans.functional_balance_type = BALANCE_TYPE_DICT['Debit']
                                else:
                                    adjustment_trans.is_credit_account = True
                                    adjustment_trans.is_debit_account = False
                                    adjustment_trans.functional_balance_type = BALANCE_TYPE_DICT['Credit']

                                adjustment_trans.journal_id = gl_journal.id
                                adjustment_trans.source_type = gl_journal.source_type
                                if j_desc != '':
                                    adjustment_trans.description = j_desc
                                elif desc != '':
                                    adjustment_trans.description = desc
                                else:
                                    adjustment_trans.description = ''
                                if j_reference != '':
                                    adjustment_trans.reference = j_reference
                                else:
                                    adjustment_trans.reference = ''
                                adjustment_trans.account_id = trans.account_id
                                adjustment_trans.tax_amount = 0
                                adjustment_trans.amount = abs(trans.adjustment_amount)
                                adjustment_trans.base_tax_amount = abs(trans.adjustment_amount)
                                adjustment_trans.total_amount = abs(trans.adjustment_amount)
                                if company.currency.is_decimal:
                                    adjustment_trans.functional_amount = float(round_number(Decimal(adjustment_trans.total_amount) * Decimal(
                                        trans.exchange_rate)))
                                else:
                                    adjustment_trans.functional_amount = float(round_number(Decimal(adjustment_trans.total_amount) * Decimal(
                                        trans.exchange_rate), 0))

                                adjustment_trans.save()

                                adj_transaction_list = Transaction.objects.filter(company_id=company.id, is_hidden=False, journal_id=adj_journal.id)

                                for adj_transaction in adj_transaction_list:
                                    adjustment_entry = deepcopy(adj_transaction)
                                    adjustment_entry.pk = None
                                    adjustment_entry.journal_id = gl_journal.id
                                    adjustment_entry.source_type = gl_journal.source_type
                                    adjustment_entry.total_amount = abs(trans.adjustment_amount)
                                    if j_desc != '':
                                        adjustment_entry.description = j_desc
                                    elif desc != '':
                                        adjustment_entry.description = desc
                                    else:
                                        adjustment_entry.description = ''
                                    if j_reference != '':
                                        adjustment_entry.reference = j_reference
                                    else:
                                        adjustment_entry.reference = ''

                                    adjustment_entry.save()

                            try:
                                related_invoice = Journal.objects.get(pk=trans.related_invoice_id)
                                related_invoice.payment_number += 1
                                if related_invoice.journal_type == dict(TRANSACTION_TYPES)['AR Invoice']:
                                    related_invoice.paid_amount = float(related_invoice.paid_amount) + float(trans.amount)
                                    related_invoice.discount_amount = float(related_invoice.discount_amount) + float(trans.discount_amount)
                                    related_invoice.adjustment_amount = float(related_invoice.adjustment_amount) + float(trans.adjustment_amount)
                                    related_invoice.outstanding_amount = float(related_invoice.outstanding_amount) - float(
                                        trans.amount)

                                    real_outstanding_amount = float(related_invoice.outstanding_amount) + \
                                        float(related_invoice.adjustment_amount) - \
                                        float(related_invoice.discount_amount)

                                    if float(real_outstanding_amount) <= 0:
                                        related_invoice.outstanding_amount = 0  # force outstanding amount to 0
                                        related_invoice.is_fully_paid = True
                                        related_invoice.fully_paid_date = trans.journal.document_date
                                    else:
                                        related_invoice.is_fully_paid = False
                                        related_invoice.fully_paid_date = None
                                    trans.related_journal_outstanding = real_outstanding_amount
                                    related_invoice_list.append(related_invoice.id)
                                else:
                                    related_invoice.paid_amount = float(related_invoice.paid_amount) + float(trans.total_amount)
                                    related_invoice.discount_amount = float(related_invoice.discount_amount) + float(trans.discount_amount)
                                    related_invoice.adjustment_amount = float(related_invoice.adjustment_amount) + float(trans.adjustment_amount)

                                    real_document_amount = float(related_invoice.customer_unapplied) + \
                                        float(related_invoice.adjustment_amount) - \
                                        float(related_invoice.discount_amount)

                                    if float(real_document_amount) - float(related_invoice.paid_amount) <= 0:
                                        related_invoice.is_fully_paid = True
                                        related_invoice.outstanding_amount = 0
                                        related_invoice.fully_paid_date = trans.journal.document_date
                                    else:
                                        related_invoice.is_fully_paid = False
                                        related_invoice.fully_paid_date = None
                                        related_invoice.outstanding_amount = float(real_document_amount) - float(related_invoice.paid_amount)
                                    trans.related_journal_outstanding = (-1) * related_invoice.outstanding_amount

                                trans.save()
                                related_invoice.save()
                                # related_invoice_list.append(related_invoice.id)
                            except Exception as e:
                                print(e)

                            # clone GL for transaction
                            gl_clone_transaction = deepcopy(trans)
                            gl_clone_transaction.pk = None

                            if related_invoice:
                                apply_to_docs += related_invoice.document_number + ','
                                if related_invoice.document_type == DOCUMENT_TYPE_DICT['Credit Note'] or \
                                        related_invoice.journal_type == dict(TRANSACTION_TYPES)['AR Receipt']:
                                    if trans.amount > 0:
                                        if gl_clone_transaction.is_credit_account:
                                            gl_clone_transaction.is_credit_account = False
                                            gl_clone_transaction.is_debit_account = True
                                            gl_clone_transaction.functional_balance_type = BALANCE_TYPE_DICT['Debit']
                                        else:
                                            gl_clone_transaction.is_credit_account = True
                                            gl_clone_transaction.is_debit_account = False
                                            gl_clone_transaction.functional_balance_type = BALANCE_TYPE_DICT['Credit']
                                        total_source -= float(trans.amount)
                                        # total_func -= float(trans.functional_amount)
                                        total_func -= float(trans.total_amount) * float(trans.exchange_rate)
                                    else:
                                        total_source += float(-1 * trans.amount)
                                        # total_func += float(trans.functional_amount)
                                        total_func += float(-1 * trans.total_amount) * float(trans.exchange_rate)
                                else:
                                    if trans.total_amount < 0:
                                        if gl_clone_transaction.is_credit_account:
                                            gl_clone_transaction.is_debit_account = True
                                            gl_clone_transaction.is_credit_account = False
                                            gl_clone_transaction.functional_balance_type = BALANCE_TYPE_DICT['Debit']
                                        else:
                                            gl_clone_transaction.is_debit_account = False
                                            gl_clone_transaction.is_credit_account = True
                                            gl_clone_transaction.functional_balance_type = BALANCE_TYPE_DICT['Credit']
                                    total_source += float(trans.amount)
                                    # total_func += float(trans.functional_amount)
                                    total_func += float(trans.total_amount) * float(trans.exchange_rate)
                            else:
                                if trans.total_amount < 0:
                                    if gl_clone_transaction.is_credit_account:
                                        gl_clone_transaction.is_debit_account = True
                                        gl_clone_transaction.is_credit_account = False
                                        gl_clone_transaction.functional_balance_type = BALANCE_TYPE_DICT['Debit']
                                    else:
                                        gl_clone_transaction.is_debit_account = False
                                        gl_clone_transaction.is_credit_account = True
                                        gl_clone_transaction.functional_balance_type = BALANCE_TYPE_DICT['Credit']
                                total_source += float(trans.amount)
                                # total_func += float(trans.functional_amount)
                                total_func += float(trans.total_amount) * float(trans.exchange_rate)
                            gl_clone_transaction.amount = math.fabs(float(trans.amount))
                            gl_clone_transaction.base_tax_amount = math.fabs(float(trans.base_tax_amount))
                            gl_clone_transaction.tax_amount = math.fabs(float(trans.tax_amount))
                            gl_clone_transaction.total_amount = math.fabs(float(trans.total_amount))
                            if company.currency.is_decimal:
                                gl_clone_transaction.functional_amount = float(round_number(math.fabs(trans.functional_amount)))
                            else:
                                gl_clone_transaction.functional_amount = float(round_number(math.fabs(trans.functional_amount), 0))

                            gl_clone_transaction.journal_id = gl_journal.id
                            gl_clone_transaction.source_type = gl_journal.source_type
                            if desc != '':
                                gl_clone_transaction.description = desc
                            else:
                                gl_clone_transaction.description = ''
                            if reference != '':
                                gl_clone_transaction.reference = reference
                            else:
                                gl_clone_transaction.reference = ''
                            if remark != '':
                                gl_clone_transaction.remark = remark
                            else:
                                gl_clone_transaction.remark = ''
                            gl_clone_transaction.save()

                            # if last_ar_gl_transactions == None and len(currencies) > 0:
                            if invoice_exchange_rate and float(trans.exchange_rate) != float(invoice_exchange_rate):
                                account = account_set.control_account

                                if float(trans.exchange_rate) > float(invoice_exchange_rate):
                                    revaluation_account = account_set.revaluation_realized_gain

                                    is_gain = True

                                else:
                                    revaluation_account = account_set.revaluation_realized_loss

                                    is_gain = False
                                
                                if related_invoice.document_type == DOCUMENT_TYPE_DICT['Credit Note']:
                                    is_gain = not is_gain

                                # gl_functional_transaction = Transaction.objects.filter(company_id=company_id, is_hidden=False,
                                #                                                     account_id=account.id, journal_id=gl_journal.id). \
                                #     aggregate(functional_amount=Sum('functional_amount'))

                                # gl_transaction = Transaction.objects.filter(company_id=company_id, is_hidden=False,
                                #                                             account_id=account.id, journal_id=gl_journal.id). \
                                #     aggregate(trx_amount=Sum('total_amount'))

                                # realized_amount = float(gl_transaction['trx_amount']) * math.fabs(float(exchange_rate) - float(invoice_exchange_rate))
                                # realized_amount = float(trans.total_amount) * math.fabs(float(exchange_rate) - float(invoice_exchange_rate))
                                prior_amount = round_number(Decimal(trans.total_amount) * Decimal(invoice_exchange_rate))
                                new_amount = round_number(Decimal(trans.total_amount) * Decimal(exchange_rate))
                                realized_amount = new_amount - prior_amount
                                # rounded_functional_amount = round_number(float(trans.functional_amount), 2)
                                # rounded_amount = round_number(realized_amount, 2)
                                # rounding_amount = math.fabs(round_number((rounded_amount - realized_amount) + (rounded_functional_amount -
                                                                                                        # float(trans.functional_amount)), 2))

                                rounded_functional_amount = float(round_number(trans.functional_amount, 2))
                                rounded_amount = float(round_number(realized_amount, 2))
                                rounding_amount = float(round_number(math.fabs((rounded_amount - float(realized_amount)) + (rounded_functional_amount -
                                                                                                        float(trans.functional_amount)))))

                                if realized_amount != 0:
                                    revaluation_transaction = deepcopy(trans)
                                    revaluation_transaction.pk = None
                                    revaluation_transaction.journal_id = gl_journal.id
                                    revaluation_transaction.source_type = gl_journal.source_type
                                    if j_desc != '':
                                        revaluation_transaction.description = j_desc
                                    elif desc != '':
                                        revaluation_transaction.description = desc
                                    else:
                                        revaluation_transaction.description = ''
                                    if j_reference != '':
                                        revaluation_transaction.reference = j_reference
                                    else:
                                        revaluation_transaction.reference = ''
                                    if j_remark != '':
                                        revaluation_transaction.remark = j_remark
                                    else:
                                        revaluation_transaction.remark = ''
                                    revaluation_transaction.exchange_rate = exchange_rate
                                    revaluation_transaction.amount = 0
                                    revaluation_transaction.base_tax_amount = 0
                                    revaluation_transaction.total_amount = 0
                                    if company.currency.is_decimal:
                                        revaluation_transaction.functional_amount = float(round_number(math.fabs(realized_amount)))
                                        # revaluation_transaction.functional_amount = math.fabs(realized_amount)
                                    else:
                                        revaluation_transaction.functional_amount = float(round_number(math.fabs(realized_amount), 0))
                                        # revaluation_transaction.functional_amount = math.fabs(round(realized_amount))
                                    if (revaluation_transaction.is_debit_account and is_gain) or (not revaluation_transaction.is_debit_account and is_gain):
                                        revaluation_transaction.functional_balance_type = BALANCE_TYPE_DICT['Debit']
                                        revaluation_transaction.is_debit_account = True
                                        revaluation_transaction.is_credit_account = False
                                    elif (revaluation_transaction.is_debit_account and not is_gain) or (not revaluation_transaction.is_debit_account and not is_gain):
                                        revaluation_transaction.functional_balance_type = BALANCE_TYPE_DICT['Credit']
                                        revaluation_transaction.is_credit_account = True
                                        revaluation_transaction.is_debit_account = False

                                    # if realized_amount < 0:
                                    #     if revaluation_transaction.functional_balance_type == BALANCE_TYPE_DICT['Credit']:
                                    #         revaluation_transaction.is_credit_account = False
                                    #         revaluation_transaction.is_debit_account = True
                                    #         revaluation_transaction.functional_balance_type = BALANCE_TYPE_DICT['Debit']
                                    #     else:
                                    #         revaluation_transaction.is_credit_account = True
                                    #         revaluation_transaction.is_debit_account = False
                                    #         revaluation_transaction.functional_balance_type = BALANCE_TYPE_DICT['Credit']

                                    revaluation_transaction.save()

                                    clone_revaluation_account = deepcopy(trans)
                                    clone_revaluation_account.pk = None
                                    clone_revaluation_account.account = revaluation_account
                                    clone_revaluation_account.journal_id = gl_journal.id
                                    clone_revaluation_account.source_type = gl_journal.source_type
                                    if j_desc != '':
                                        clone_revaluation_account.description = j_desc
                                    elif desc != '':
                                        clone_revaluation_account.description = desc
                                    else:
                                        clone_revaluation_account.description = ''
                                    if j_reference != '':
                                        clone_revaluation_account.reference = j_reference
                                    else:
                                        clone_revaluation_account.reference = ''
                                    if j_remark != '':
                                        clone_revaluation_account.remark = j_remark
                                    else:
                                        clone_revaluation_account.remark = ''
                                    clone_revaluation_account.exchange_rate = exchange_rate
                                    clone_revaluation_account.amount = 0
                                    clone_revaluation_account.base_tax_amount = 0
                                    clone_revaluation_account.total_amount = 0
                                    clone_revaluation_account.is_credit_account = (0, 1)[revaluation_transaction.is_debit_account]
                                    clone_revaluation_account.is_debit_account = (0, 1)[revaluation_transaction.is_credit_account]
                                    if company.currency.is_decimal:
                                        # clone_revaluation_account.functional_amount = float(round_number(math.fabs(realized_amount)))
                                        clone_revaluation_account.functional_amount = math.fabs(realized_amount)
                                    else:
                                        # clone_revaluation_account.functional_amount = float(round_number(math.fabs(realized_amount), 0))
                                        clone_revaluation_account.functional_amount = math.fabs(round(realized_amount))
                                    clone_revaluation_account.functional_balance_type = (BALANCE_TYPE_DICT['Credit'], BALANCE_TYPE_DICT['Debit'])[
                                        revaluation_transaction.functional_balance_type == BALANCE_TYPE_DICT['Credit']]
                                    clone_revaluation_account.save()

                                    if rounding_amount > 0:
                                        rounding_transaction = deepcopy(trans)
                                        rounding_transaction.pk = None
                                        rounding_transaction.journal_id = gl_journal.id
                                        rounding_transaction.source_type = gl_journal.source_type
                                        if j_desc != '':
                                            rounding_transaction.description = j_desc
                                        elif desc != '':
                                            rounding_transaction.description = desc
                                        else:
                                            rounding_transaction.description = ''
                                        if j_reference != '':
                                            rounding_transaction.reference = j_reference
                                        else:
                                            rounding_transaction.reference = ''
                                        if j_remark != '':
                                            rounding_transaction.remark = j_remark
                                        else:
                                            rounding_transaction.remark = ''
                                        rounding_transaction.exchange_rate = exchange_rate
                                        rounding_transaction.amount = 0
                                        rounding_transaction.base_tax_amount = 0
                                        rounding_transaction.total_amount = 0
                                        if company.currency.is_decimal:
                                            rounding_transaction.functional_amount = rounding_amount
                                        else:
                                            rounding_transaction.functional_amount = float(round_number(rounding_amount, 0))

                                        if rounding_transaction.is_debit_account and is_gain or not rounding_transaction.is_debit_account and not is_gain:
                                            rounding_transaction.functional_balance_type = BALANCE_TYPE_DICT['Debit']
                                        elif rounding_transaction.is_debit_account and not is_gain or not rounding_transaction.is_debit_account and is_gain:
                                            rounding_transaction.functional_balance_type = BALANCE_TYPE_DICT['Credit']

                                        rounding_transaction.save()

                                        clone_rounding_account = deepcopy(trans)
                                        clone_rounding_account.pk = None
                                        clone_rounding_account.account = revaluation_account
                                        clone_rounding_account.journal_id = gl_journal.id
                                        clone_rounding_account.source_type = gl_journal.source_type
                                        if j_desc != '':
                                            clone_rounding_account.description = j_desc
                                        elif desc != '':
                                            clone_rounding_account.description = desc
                                        else:
                                            clone_rounding_account.description = ''
                                        if j_reference != '':
                                            clone_rounding_account.reference = j_reference
                                        else:
                                            clone_rounding_account.reference = ''
                                        if j_remark != '':
                                            clone_rounding_account.remark = j_remark
                                        else:
                                            clone_rounding_account.remark = ''
                                        clone_rounding_account.exchange_rate = exchange_rate
                                        clone_rounding_account.amount = 0
                                        clone_rounding_account.base_tax_amount = 0
                                        clone_rounding_account.total_amount = 0
                                        clone_rounding_account.is_credit_account = (0, 1)[rounding_transaction.is_debit_account]
                                        clone_rounding_account.is_debit_account = (0, 1)[rounding_transaction.is_credit_account]
                                        if company.currency.is_decimal:
                                            clone_rounding_account.functional_amount = rounding_amount
                                        else:
                                            clone_rounding_account.functional_amount = float(round_number(rounding_amount, 0))
                                        clone_rounding_account.functional_balance_type = (BALANCE_TYPE_DICT['Credit'], BALANCE_TYPE_DICT['Debit'])[
                                            rounding_transaction.functional_balance_type == BALANCE_TYPE_DICT['Credit']]
                                        clone_rounding_account.save()

                        # # fix aging
                        # if len(related_invoice_list):
                        #     update_aging_thread = threading.Thread(name='fix_payments_outs_amount_ar',
                        #                                         target=fix_payments_outs_amount,
                        #                                         args=(request, 'AR', related_invoice_list, ), daemon=False)
                        #     update_aging_thread.start()
                        
                        if journal.customer_unapplied != 0 and journal.customer_unapplied <= journal.original_amount:
                            trans = Transaction()
                            trans.journal_id = gl_journal.id
                            trans.source_type = gl_journal.source_type
                            trans.number = 1
                            if j_desc != '':
                                trans.description = j_desc
                            else:
                                trans.description = ''
                            if j_reference != '':
                                trans.reference = j_reference
                            else:
                                trans.reference = ''
                            trans.account_id = journal.account_set.control_account_id
                            trans.currency_id = journal.customer.currency_id
                            trans.functional_currency_id = company.currency_id
                            trans.is_debit_account = False
                            trans.is_credit_account = True
                            if journal.customer_unapplied < 0:
                                trans.is_debit_account = True
                                trans.is_credit_account = False
                            trans.amount = math.fabs(journal.customer_unapplied)
                            trans.total_amount = math.fabs(journal.customer_unapplied)
                            # if journal.customer.currency.is_decimal:
                            if float(journal.orig_exch_rate) == 0.0:
                                journal.orig_exch_rate = 1.0
                                journal.save()
                            if company.currency.is_decimal:
                                trans.functional_amount = math.fabs(round_number(Decimal(journal.customer_unapplied) * Decimal(journal.orig_exch_rate)))
                            else:
                                trans.functional_amount = math.fabs(round_number(Decimal(journal.customer_unapplied) * Decimal(journal.orig_exch_rate), 0))
                            trans.exchange_rate = journal.orig_exch_rate
                            trans.is_hidden = False
                            trans.transaction_date = getTransactionDate(request, journal.document_date)
                            trans.create_date = datetime.datetime.today()
                            trans.update_date = datetime.datetime.today()
                            trans.update_by = request.user.id
                            trans.company_id = company_id
                            trans.functional_balance_type = (BALANCE_TYPE_DICT['Credit'],
                                                                BALANCE_TYPE_DICT['Debit'])[trans.is_debit_account]
                            trans.save()
                            total_source += float(journal.customer_unapplied)
                            # total_func += float(trans.functional_amount)
                            total_func += float(journal.customer_unapplied) * float(trans.exchange_rate)
                    else:  # recept with no transaction
                        trans = Transaction()
                        trans.journal_id = gl_journal.id
                        trans.source_type = gl_journal.source_type
                        trans.number = 1
                        if j_desc != '':
                            trans.description = j_desc
                        else:
                            trans.description = ''
                        if j_reference != '':
                            trans.reference = j_reference
                        else:
                            trans.reference = ''
                        trans.account_id = journal.account_set.control_account_id
                        trans.currency_id = journal.currency_id
                        trans.functional_currency_id = company.currency_id
                        trans.is_debit_account = False
                        trans.is_credit_account = True
                        trans.amount = journal.amount
                        trans.total_amount = journal.total_amount
                        if company.currency.is_decimal:
                            trans.functional_amount = float(round_number(Decimal(journal.total_amount) * Decimal(journal.exchange_rate)))
                        else:
                            trans.functional_amount = float(round_number(Decimal(journal.total_amount) * Decimal(journal.exchange_rate), 0))
                        trans.exchange_rate = journal.exchange_rate
                        trans.is_hidden = False
                        trans.transaction_date = getTransactionDate(request, journal.document_date)
                        trans.create_date = datetime.datetime.today()
                        trans.update_date = datetime.datetime.today()
                        trans.update_by = request.user.id
                        trans.company_id = company_id
                        trans.functional_balance_type = (BALANCE_TYPE_DICT['Credit'],
                                                            BALANCE_TYPE_DICT['Debit'])[trans.is_debit_account]
                        trans.save()
                        last_trans = trans

                else:
                    for trans in transactions:
                        j_desc = generate_description(company_id, journal, 'G/L Detail Description', False, trans)
                        j_reference = generate_description(company_id, journal, 'G/L Detail Reference', False, trans)
                        j_remark = generate_description(company_id, journal, 'G/L Detail Comment', False, trans)
                        desc = generate_description(company_id, journal, 'G/L Detail Description', True, trans)
                        reference = generate_description(company_id, journal, 'G/L Detail Reference', True, trans)
                        remark = generate_description(company_id, journal, 'G/L Detail Comment', True, trans)
                        if trans.is_tax_transaction:
                            # gl_trans_tax = deepcopy(trans)
                            # gl_trans_tax.pk = None
                            # if desc != '':
                            #     gl_trans_tax.description = desc
                            # else:
                            #     gl_trans_tax.description = gl_journal.name + ' - ' + to_string(
                            #         gl_journal.reference) + ' - ' + to_string(trans.remark)
                            # if reference != '':
                            #     gl_trans_tax.reference = reference
                            # if remark != '':
                            #     gl_trans_tax.remark = remark
                            # gl_trans_tax.amount = math.fabs(trans.tax_amount)
                            # gl_trans_tax.base_tax_amount = math.fabs(trans.tax_amount)
                            # gl_trans_tax.tax_amount = 0
                            # gl_trans_tax.total_amount = math.fabs(trans.tax_amount)
                            # gl_trans_tax.journal_id = gl_journal.id
                            # gl_trans_tax.source_type = gl_journal.source_type
                            # if company.currency.is_decimal:
                            #     gl_trans_tax.functional_amount = math.fabs(float(gl_trans_tax.total_amount) * float(
                            #         trans.exchange_rate))
                            # else:
                            #     gl_trans_tax.functional_amount = math.fabs(round(float(gl_trans_tax.total_amount) * float(
                            #         trans.exchange_rate)))
                            # if trans.total_amount < 0:
                            #     if trans.is_debit_account:
                            #         gl_trans_tax.is_debit_account = False
                            #         gl_trans_tax.is_credit_account = True
                            #         gl_trans_tax.functional_balance_type = BALANCE_TYPE_DICT['Credit']
                            #     else:
                            #         gl_trans_tax.is_debit_account = True
                            #         gl_trans_tax.is_credit_account = False
                            #         gl_trans_tax.functional_balance_type = BALANCE_TYPE_DICT['Debit']
                            #     total_source -= float(gl_trans_tax.amount)
                            #     total_func -= float(gl_trans_tax.functional_amount)
                            # else:
                            #     if trans.is_debit_account:
                            #         gl_trans_tax.is_debit_account = True
                            #         gl_trans_tax.is_credit_account = False
                            #         gl_trans_tax.functional_balance_type = BALANCE_TYPE_DICT['Debit']
                            #     else:
                            #         gl_trans_tax.is_debit_account = False
                            #         gl_trans_tax.is_credit_account = True
                            #         gl_trans_tax.functional_balance_type = BALANCE_TYPE_DICT['Credit']
                            #     total_source += float(gl_trans_tax.amount)
                            #     total_func += float(gl_trans_tax.functional_amount)
                            # gl_trans_tax.save()
                            if trans.tax and trans.tax.tax_account_code_id:
                                tax_id = trans.tax.tax_account_code_id
                            tax_source += float(trans.tax_amount)
                            tax_func += float(trans.tax_amount) * float(trans.exchange_rate)
                            total_func += float(trans.tax_amount) * float(trans.exchange_rate)

                        elif float(trans.amount) == 0.000000 and float(trans.tax_amount) != 0.000000:
                            gl_trans_tax = deepcopy(trans)
                            gl_trans_tax.pk = None
                            if desc != '':
                                gl_trans_tax.description = desc
                            else:
                                gl_trans_tax.description = ''
                            if reference != '':
                                gl_trans_tax.reference = reference
                            else:
                                gl_trans_tax.reference = ''
                            if remark != '':
                                gl_trans_tax.remark = remark
                            else:
                                gl_trans_tax.remark = ''
                            gl_trans_tax.amount = math.fabs(trans.tax_amount)
                            gl_trans_tax.base_tax_amount = math.fabs(trans.tax_amount)
                            gl_trans_tax.tax_amount = 0
                            gl_trans_tax.total_amount = math.fabs(trans.tax_amount)
                            gl_trans_tax.journal_id = gl_journal.id
                            gl_trans_tax.source_type = gl_journal.source_type
                            if company.currency.is_decimal:
                                gl_trans_tax.functional_amount = float(round_number(math.fabs(Decimal(gl_trans_tax.total_amount) * Decimal(
                                    trans.exchange_rate))))
                            else:
                                gl_trans_tax.functional_amount = float(round_number(math.fabs(Decimal(gl_trans_tax.total_amount) * Decimal(
                                    trans.exchange_rate)), 0))
                            if trans.total_amount < 0:
                                if trans.is_debit_account:
                                    gl_trans_tax.is_debit_account = False
                                    gl_trans_tax.is_credit_account = True
                                    gl_trans_tax.functional_balance_type = BALANCE_TYPE_DICT['Credit']
                                else:
                                    gl_trans_tax.is_debit_account = True
                                    gl_trans_tax.is_credit_account = False
                                    gl_trans_tax.functional_balance_type = BALANCE_TYPE_DICT['Debit']
                                total_source -= float(gl_trans_tax.amount)
                                total_func -= float(gl_trans_tax.total_amount) * float(trans.exchange_rate)
                            else:
                                if trans.is_debit_account:
                                    gl_trans_tax.is_debit_account = True
                                    gl_trans_tax.is_credit_account = False
                                    gl_trans_tax.functional_balance_type = BALANCE_TYPE_DICT['Debit']
                                else:
                                    gl_trans_tax.is_debit_account = False
                                    gl_trans_tax.is_credit_account = True
                                    gl_trans_tax.functional_balance_type = BALANCE_TYPE_DICT['Credit']
                                total_source += float(gl_trans_tax.amount)
                                # total_func += float(gl_trans_tax.functional_amount)
                                total_func += float(gl_trans_tax.total_amount) * float(trans.exchange_rate)
                            gl_trans_tax.save()
                            # if trans.tax and trans.tax.tax_account_code_id:
                            #     tax_id = trans.tax.tax_account_code_id
                            # tax_source += float(trans.tax_amount)
                            # tax_func += float(trans.tax_amount) * float(trans.exchange_rate)

                        else:
                            # Transaction entry
                            gl_trans = deepcopy(trans)
                            gl_trans.pk = None
                            if desc != '':
                                gl_trans.description = desc
                            else:
                                gl_trans.description = ''
                            if reference != '':
                                gl_trans.reference = reference
                            else:
                                gl_trans.reference = ''
                            if remark != '':
                                gl_trans.remark = remark
                            else:
                                gl_trans.remark = ''
                            gl_trans.journal_id = gl_journal.id
                            gl_trans.source_type = gl_journal.source_type
                            gl_trans.base_tax_amount = math.fabs(trans.base_tax_amount)
                            gl_trans.amount = math.fabs(trans.amount)
                            gl_trans.total_amount = math.fabs(trans.total_amount)
                            if company.currency.is_decimal:
                                gl_trans.functional_amount = float(round_number(math.fabs(Decimal(gl_trans.total_amount) * Decimal(trans.exchange_rate))))
                            else:
                                gl_trans.functional_amount = float(round_number(math.fabs(Decimal(gl_trans.total_amount) * Decimal(trans.exchange_rate)), 0))
                            if trans.total_amount < 0:
                                if trans.is_debit_account:
                                    gl_trans.is_debit_account = False
                                    gl_trans.is_credit_account = True
                                    gl_trans.functional_balance_type = BALANCE_TYPE_DICT['Credit']
                                else:
                                    gl_trans.is_debit_account = True
                                    gl_trans.is_credit_account = False
                                    gl_trans.functional_balance_type = BALANCE_TYPE_DICT['Debit']
                                total_source -= float(gl_trans.amount)
                                # total_func -= float(gl_trans.functional_amount)
                                total_func -= float(gl_trans.total_amount) * float(trans.exchange_rate)
                            else:
                                if trans.is_debit_account:
                                    gl_trans.is_debit_account = True
                                    gl_trans.is_credit_account = False
                                    gl_trans.functional_balance_type = BALANCE_TYPE_DICT['Debit']
                                else:
                                    gl_trans.is_debit_account = False
                                    gl_trans.is_credit_account = True
                                    gl_trans.functional_balance_type = BALANCE_TYPE_DICT['Credit']
                                total_source += float(gl_trans.amount)
                                # total_func += float(gl_trans.functional_amount)
                                total_func += float(gl_trans.total_amount) * float(trans.exchange_rate)
                            gl_trans.save()

                            if float(gl_trans.tax_amount) != 0.000000:
                                gl_trans.tax_amount = 0
                                gl_trans.base_tax_amount = math.fabs(trans.base_tax_amount)
                                gl_trans.amount = math.fabs(trans.amount)
                                gl_trans.total_amount = math.fabs(trans.amount)
                                if company.currency.is_decimal:
                                    gl_trans.functional_amount = float(round_number(math.fabs(Decimal(gl_trans.total_amount) * Decimal(trans.exchange_rate))))
                                else:
                                    gl_trans.functional_amount = float(round_number(math.fabs(Decimal(gl_trans.total_amount) * Decimal(trans.exchange_rate)), 0))
                                gl_trans.save()

                                if trans.tax and trans.tax.tax_account_code_id:
                                    tax_id = trans.tax.tax_account_code_id
                                tax_source += float(trans.tax_amount)
                                tax_func += float(trans.tax_amount) * float(trans.exchange_rate)

                    total_source += tax_source
                    # total_func += tax_func
                if total_func == 0 and tax_func > 0:
                    total_func = tax_func
                last_transaction = transactions.last()
                if last_transaction and total_func != 0:
                    if tax_id:
                        gl_trans_tax = deepcopy(last_transaction)
                        gl_trans_tax.pk = None
                        if j_desc != '':
                            gl_trans_tax.description = j_desc
                        elif desc != '':
                            gl_trans_tax.description = desc
                        else:
                            gl_trans_tax.description = ''
                        if j_reference != '':
                            gl_trans_tax.reference = j_reference
                        else:
                            gl_trans_tax.reference = ''
                        if j_remark != '':
                            gl_trans_tax.remark = j_remark
                        else:
                            gl_trans_tax.remark = ''
                        gl_trans_tax.amount = math.fabs(tax_source)
                        gl_trans_tax.base_tax_amount = math.fabs(tax_source)
                        gl_trans_tax.tax_amount = 0
                        gl_trans_tax.total_amount = math.fabs(tax_source)
                        if company.currency.is_decimal:
                            gl_trans_tax.functional_amount = float(round_number(math.fabs(tax_func)))
                        else:
                            gl_trans_tax.functional_amount = float(round_number(math.fabs(tax_func), 0))
                        gl_trans_tax.journal_id = gl_journal.id
                        gl_trans_tax.source_type = gl_journal.source_type
                        gl_trans_tax.account_id = tax_id
                        if tax_func < 0:
                            if last_transaction.is_debit_account:
                                gl_trans_tax.is_debit_account = False
                                gl_trans_tax.is_credit_account = True
                                gl_trans_tax.functional_balance_type = BALANCE_TYPE_DICT['Credit']
                            else:
                                gl_trans_tax.is_debit_account = True
                                gl_trans_tax.is_credit_account = False
                                gl_trans_tax.functional_balance_type = BALANCE_TYPE_DICT['Debit']
                        else:
                            if last_transaction.is_debit_account:
                                gl_trans_tax.is_debit_account = True
                                gl_trans_tax.is_credit_account = False
                                gl_trans_tax.functional_balance_type = BALANCE_TYPE_DICT['Debit']
                            else:
                                gl_trans_tax.is_debit_account = False
                                gl_trans_tax.is_credit_account = True
                                gl_trans_tax.functional_balance_type = BALANCE_TYPE_DICT['Credit']

                        gl_trans_tax.save()

                        if gl_trans_tax.functional_amount != 0 and total_func == 0:
                            total_func = tax_func
                    if (journal.transaction_type == RECEIPT_TRANSACTION_TYPES_DICT['Receipt'] and journal.total_amount != 0) or \
                        journal.transaction_type != RECEIPT_TRANSACTION_TYPES_DICT['Receipt']:
                        j_desc = generate_description(company_id, journal, 'G/L Detail Description', False, last_transaction, apply_to_docs)
                        j_reference = generate_description(company_id, journal, 'G/L Detail Reference', False, last_transaction, apply_to_docs)
                        j_remark = generate_description(company_id, journal, 'G/L Detail Comment', False, last_transaction, apply_to_docs)
                        if journal.transaction_type == RECEIPT_TRANSACTION_TYPES_DICT['Receipt'] and last_trans:
                            last_transaction = deepcopy(last_trans)
                            total_source = last_trans.total_amount
                            total_func = last_trans.functional_amount
                            desc = last_trans.description
                            reference = last_trans.reference
                            remark = last_trans.remark

                        gl_trans_bank = deepcopy(last_transaction)
                        gl_trans_bank.pk = None
                        if total_func < 0:
                            if last_transaction.is_debit_account:
                                gl_trans_bank.is_debit_account = True
                                gl_trans_bank.is_credit_account = False
                                gl_trans_bank.functional_balance_type = BALANCE_TYPE_DICT['Debit']
                            else:
                                gl_trans_bank.is_debit_account = False
                                gl_trans_bank.is_credit_account = True
                                gl_trans_bank.functional_balance_type = BALANCE_TYPE_DICT['Credit']
                        else:
                            if last_transaction.is_debit_account:
                                gl_trans_bank.is_debit_account = False
                                gl_trans_bank.is_credit_account = True
                                gl_trans_bank.functional_balance_type = BALANCE_TYPE_DICT['Credit']
                            else:
                                gl_trans_bank.is_debit_account = True
                                gl_trans_bank.is_credit_account = False
                                gl_trans_bank.functional_balance_type = BALANCE_TYPE_DICT['Debit']
                        if j_desc != '':
                            gl_trans_bank.description = j_desc
                        elif desc != '':
                            gl_trans_bank.description = desc
                        else:
                            gl_trans_bank.description = ''
                        if j_reference != '':
                            gl_trans_bank.reference = j_reference
                        else:
                            gl_trans_bank.reference = ''
                        if j_remark != '':
                            gl_trans_bank.remark = j_remark
                        else:
                            gl_trans_bank.remark = ''
                        if not same_curr:
                            total_source = math.fabs(float(total_func) / float(journal.exchange_rate))
                            gl_trans_bank.currency = journal.currency
                            gl_trans_bank.exchange_rate = journal.exchange_rate
                            gl_trans_bank.rate_date = journal.document_date
                        gl_trans_bank.amount = float(round_number(math.fabs(total_source)))
                        gl_trans_bank.base_tax_amount = float(round_number(math.fabs(total_source)))
                        gl_trans_bank.tax_amount = 0
                        gl_trans_bank.total_amount = float(round_number(math.fabs(total_source)))
                        if company.currency.is_decimal:
                            gl_trans_bank.functional_amount = float(round_number(math.fabs(total_func)))
                        else:
                            gl_trans_bank.functional_amount = float(round_number(math.fabs(total_func), 0))
                        gl_trans_bank.tax_id = None
                        gl_trans_bank.account_id = gl_journal.bank.account_id
                        gl_trans_bank.journal_id = gl_journal.id
                        gl_trans_bank.source_type = gl_journal.source_type
                        gl_trans_bank.save()

                total_func_debit = total_func_credit = 0
                transaction_list = Transaction.objects.filter(company_id=company_id, is_hidden=0,
                                                            journal_id=gl_journal.id)
                trx_debits = transaction_list.filter(is_debit_account=1)
                for trx_debit in trx_debits:
                    total_func_debit += round_number(trx_debit.functional_amount)

                trx_credits = transaction_list.filter(is_credit_account=1)
                for trx_credit in trx_credits:
                    total_func_credit += round_number(trx_credit.functional_amount)

                if round_number(total_func_debit) != round_number(total_func_credit):
                    foreign_exchange_amount = round_number(total_func_debit) - round_number(total_func_credit)

                    try:
                        if journal.account_set and journal.account_set.revaluation_rounding_id:
                            foreign_exchange_account = journal.account_set.revaluation_rounding_id
                        else:
                            foreign_exchange_account = gl_journal.bank.round_account_id

                        gl_exchange = Transaction()
                        if j_desc != '':
                            gl_exchange.description = j_desc
                        elif desc != '':
                            gl_exchange.description = desc
                        else:
                            gl_exchange.description = ''
                        if j_reference != '':
                            gl_exchange.reference = j_reference
                        else:
                            gl_exchange.reference = ''
                        gl_exchange.journal_id = gl_journal.id
                        gl_exchange.account_id = foreign_exchange_account if foreign_exchange_account else None
                        gl_exchange.company_id = company_id
                        gl_exchange.currency_id = last_transaction.currency_id
                        gl_exchange.update_by = last_transaction.update_by
                        gl_exchange.order_id = gl_journal.order_id
                        gl_exchange.source_type = 'AR-RD'
                        gl_exchange.exchange_rate = last_transaction.exchange_rate
                        gl_exchange.rate_date = last_transaction.rate_date if last_transaction.rate_date else None
                        gl_exchange.functional_currency_id = company.currency_id
                        gl_exchange.is_debit_account = (True, False)[foreign_exchange_amount > 0]
                        gl_exchange.is_credit_account = (False, True)[foreign_exchange_amount > 0]
                        if company.currency.is_decimal:
                            gl_exchange.functional_amount = float(round_number(math.fabs(foreign_exchange_amount)))
                        else:
                            gl_exchange.functional_amount = float(round_number(math.fabs(foreign_exchange_amount), 0))
                        gl_exchange.functional_balance_type = (BALANCE_TYPE_DICT['Debit'],
                                                            BALANCE_TYPE_DICT['Credit'])[foreign_exchange_amount > 0]
                        gl_exchange.transaction_date = getTransactionDate(request, gl_journal.document_date)
                        gl_exchange.save()

                    except Exception as e:
                        print('Journal-ID ' + str(journal.id))
                        print("Revaluation account couldn't be retrieved!! ", e)
                        # logging.error(traceback.format_exc())
                        transactionlib.set_rollback(True)
                        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

                gl_functional_transaction = Transaction.objects.filter(company_id=company_id, is_hidden=False,
                                                                    is_debit_account=True, journal_id=gl_journal.id). \
                    aggregate(functional_amount=Sum('functional_amount'))

                gl_journal.amount = gl_functional_transaction['functional_amount'] if gl_functional_transaction['functional_amount'] else 0
                gl_journal.total_amount = gl_functional_transaction['functional_amount'] if gl_functional_transaction['functional_amount'] else 0

                gl_journal.save()

                gl_batch.batch_amount += gl_journal.total_amount
                gl_batch.save()

            # fix aging
            if len(related_invoice_list):
                update_aging_thread = threading.Thread(name='fix_payments_outs_amount_ar',
                                                    target=fix_payments_outs_amount,
                                                    args=(request, 'AR', related_invoice_list, ), daemon=False)
                update_aging_thread.start()
        except Exception as e:
            print(e)
            transactionlib.set_rollback(True)

    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))


def coverterDateTime(o):
    if isinstance(o, datetime.date):
        return o.__str__()


@login_required
def revaluation(request, type_transaction):
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    session_date = request.session['session_date'].strftime("%d-%m-%Y")
    company_currency = Company.objects.filter(pk=company_id).values('currency', 'currency__id',
                                                                    'currency__name').first()
    data_currency = Currency.objects.filter(is_hidden=0).exclude(pk=company_currency['currency']).values('id', 'name',
                                                                                                         'code',
                                                                                                         'symbol')
    for curr in data_currency:
        exchange_rate = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                    from_currency_id=curr['id'],
                                                    to_currency_id=company_currency['currency__id'],
                                                    flag='ACCOUNTING').order_by('exchange_date').last()
        curr['exchrateid'] = None
        curr['rate'] = 0
        curr['rate_date'] = datetime.datetime.now().strftime("%Y-%m-%d")
        if exchange_rate:
            exchrateid = exchange_rate.id
            rate = exchange_rate.rate
            rate_date = str(exchange_rate.exchange_date)
            curr['exchrateid'] = exchrateid
            curr['rate'] = rate
            curr['rate_date'] = rate_date

    if request.method == 'POST':
        rv_curr_lists = ast.literal_eval(request.POST['rev_curr_list_data'])
        isDuplicate = False
        lastCurr = rev_date = None
        for rv_curr_list in rv_curr_lists:
            if rv_curr_list['curr_id'] == lastCurr:
                isDuplicate = True
            lastCurr = rv_curr_list['curr_id']
            rev_date = rv_curr_list['rev_date']

        if not isDuplicate:
            revaluation = C_Revaluation_ver3(request, type_transaction).GenerateRevaluation(rv_curr_lists, rev_date)
            if revaluation[0]:
                journal = Journal.objects.filter(company_id=company_id, document_date=rev_date, name__icontains='RV-',
                                                  is_rev_do=True, batch__is_hidden=False).order_by('-batch_id').first()

                if journal:
                    batch_id = journal.batch_id
                    rev_journals = Journal.objects.filter(batch_id=batch_id)
                    delete = True
                    total = 0
                    for rev_journal in rev_journals:
                        if rev_journal.total_amount == 0:
                            rev_journal.is_hidden = True
                            rev_journal.save()
                        if rev_journal.is_hidden == False:
                            delete = False
                        total += rev_journal.total_amount
                    if total == 0 or delete:
                        rev_batch = rev_journal.batch
                        rev_batch.is_hidden = True
                        rev_batch.save()

                messages.success(request, revaluation[1])
            else:
                messages.error(request, 'ERROR: ' + revaluation[1])
        else:
            messages.error(request, 'ERROR: ' + RV_ERR_DUPLICATE_CURR)

    responseData = {'all_currency': data_currency, 'type_transaction': type_transaction, 'session_date': session_date}

    return render(request, 'revaluation-form_rev2.html', responseData)


def PaymentCode__asJson(request, source_type):
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    draw = request.GET['draw']
    start = request.GET['start']
    length = request.GET['length']
    search = request.GET['search[value]']
    list_filter = PaymentCode.objects.filter(is_hidden=0, is_active=1, company_id=company_id, source_type=source_type)

    payment_type_dict = dict(PAYMENT_TYPE)

    records_total = list_filter.count()

    if search:  # Filter data base on search
        list_filter = list_filter.filter(
            Q(update_date__icontains=search) | Q(code__icontains=search) | Q(name__icontains=search) | Q(
                payment_type__icontains=search) | Q(is_active__contains=search))

    # All data
    records_filtered = list_filter.count()

    # Order by list_limit base on order_dir and order_column
    order_column = request.GET['order[0][column]']
    column_name = ""
    if order_column == "0":
        column_name = "update_date"
    elif order_column == "1":
        column_name = "code"
    elif order_column == "2":
        column_name = "name"
    elif order_column == "3":
        column_name = "payment_type"
    elif order_column == "4":
        column_name = "is_active"
    order_dir = request.GET['order[0][dir]']

    list = []
    if order_dir == "asc":
        list = list_filter.order_by(column_name)[int(start):(int(start) + int(length))]
    elif order_dir == "desc":
        list = list_filter.order_by('-' + column_name)[int(start):(int(start) + int(length))]

    # Create data list
    array = []
    for j, field in enumerate(list):
        # for field in list:
        data = {"id": field.id,
                "update_date": field.update_date.strftime("%d-%m-%Y"),
                "code": field.code,
                "name": field.name,
                "payment_type": payment_type_dict.get(field.payment_type),
                "is_active": str(field.is_active)}
        array.append(data)

    content = {"draw": draw, "data": array, "recordsTotal": records_total, "recordsFiltered": records_filtered}

    json_content = json.dumps(content, ensure_ascii=False)
    return HttpResponse(json_content, content_type='application/json')


# def calculate_account_history(company_id, period_year, period_month):
#     try:
#         with transactionlib.atomic():
#             company = Company.objects.get(pk=company_id)
#             first_day = datetime.date(int(period_year), int(period_month), 1)
#             last_day = datetime.date(int(period_year), int(period_month),
#                                      calendar.monthrange(int(period_year), int(period_month))[1])

#             transaction_list = Transaction.objects.filter(company_id=company_id, is_hidden=False,
#                                                               journal__document_date__range=[first_day, last_day]).order_by('currency_id')

#             account_histories = AccountHistory.objects.filter(is_hidden=False, company_id=company_id,
#                                                                      period_month=period_month, period_year=period_year)

#             account_list = transaction_list.order_by('account_id').values_list('account_id', flat=True).distinct()
#             for account_item in account_list:
#                 transaction_list = transaction_list.filter(account_id=account_item)

#                 currency_list = transaction_list.values('currency_id').distinct()

#                 account_history_list = account_histories.filter(account_id=account_item)

#                 for currency_item in currency_list:
#                     transaction_list = transaction_list.filter(currency_id=currency_item['currency_id'])
#                     transaction_debit_list = transaction_list.filter(is_debit_account=1)
#                     transaction_credit_list = transaction_list.filter(is_credit_account=1)
#                     debit_sum = transaction_debit_list.annotate(source_sum_amount=Sum('amount')).annotate(
#                         source_sum_tax_amount=Sum('tax_amount')).annotate(
#                         source_sum_total_amount=Sum('total_amount')).annotate(
#                         functional_sum_amount=Sum('functional_amount')).first()
#                     credit_sum = transaction_credit_list.annotate(source_sum_amount=Sum('amount')).annotate(
#                         source_sum_tax_amount=Sum('tax_amount')).annotate(
#                         source_sum_total_amount=Sum('total_amount')).annotate(
#                         functional_sum_amount=Sum('functional_amount')).first()
#                     if currency_item['currency_id']:
#                         source_currency = currency_item['currency_id']
#                     else:
#                         source_currency = company.currency_id

#                     account_history = account_history_list.filter(source_currency_id=source_currency).first()

#                     if not account_history:
#                         account_history = AccountHistory()
#                         account_history.account_id = account_item
#                         account_history.source_currency_id = currency_item['currency_id'] if currency_item[
#                             'currency_id'] else company.currency_id
#                         account_history.period_month = period_month
#                         account_history.period_year = period_year
#                         account_history.is_hidden = 0
#                         account_history.period_date = last_day
#                         account_history.company_id = company.id
#                         # account_history.update_by = request.user.id
#                         if debit_sum:
#                             account_history.source_debit_amount = debit_sum.total_amount
#                             account_history.functional_debit_amount = debit_sum.functional_amount
#                             account_history.functional_currency_id = debit_sum.functional_currency_id if debit_sum.functional_currency_id else company.currency_id
#                         else:
#                             account_history.source_debit_amount = 0
#                             account_history.functional_debit_amount = 0
#                             account_history.functional_currency_id = company.currency_id

#                         if credit_sum:
#                             account_history.source_credit_amount = credit_sum.total_amount
#                             account_history.functional_credit_amount = credit_sum.functional_amount
#                             account_history.functional_currency_id = credit_sum.functional_currency_id if credit_sum.functional_currency_id else company.currency_id
#                         else:
#                             account_history.source_credit_amount = 0
#                             account_history.functional_credit_amount = 0
#                             account_history.functional_currency_id = company.currency_id

#                         # set Net Change Amount
#                         account_history.source_net_change = account_history.source_debit_amount - account_history.source_credit_amount
#                         account_history.functional_net_change = account_history.functional_debit_amount - account_history.functional_credit_amount

#                         # Get previous account history of Account
#                         previous_period_date = first_day - datetime.timedelta(days=1)
#                         previous_account_history = account_history_list.filter(
#                             period_month=previous_period_date.strftime('%m'),
#                             period_year=previous_period_date.strftime('%Y'),
#                             source_currency_id=currency_item['currency_id']).first()
#                         if previous_account_history:
#                             account_history.source_begin_balance = previous_account_history.source_end_balance
#                             account_history.functional_begin_balance = previous_account_history.functional_end_balance
#                         else:
#                             account_history.source_begin_balance = 0
#                             account_history.functional_begin_balance = 0

#                         account_history.source_end_balance = account_history.source_begin_balance + account_history.source_net_change
#                         account_history.functional_end_balance = account_history.functional_begin_balance + account_history.functional_net_change
#                         account_history.save()
#     except Exception as e:
#         print(e)
#         logger.error(traceback.format_exc())
#         return False
#     return True


@login_required
def RevaluationList__asJson(request, type_transaction):
    draw = request.GET['draw']
    start = request.GET['start']
    length = request.GET['length']
    search = request.GET['search[value]']
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    if type_transaction == 'AR':
        revaluation_list = RevaluationLogs.objects.filter(is_hidden=0, company_id=company_id, journal_type=dict(TRANSACTION_TYPES)[
                                                          'AR Invoice']).order_by('-revaluation_date', '-posting_sequence')
    elif type_transaction == 'AP':
        revaluation_list = RevaluationLogs.objects.filter(is_hidden=0, company_id=company_id, journal_type=dict(TRANSACTION_TYPES)[
                                                          'AP Invoice']).order_by('-revaluation_date', '-posting_sequence')

    records_total = revaluation_list.count()

    if search:  # Filter data base on search
        revaluation_list = revaluation_list.filter(Q(revaluation_date__icontains=search) | Q(currency__icontains=search) | Q(
            posting_sequence__icontains=search) | Q(posting_date__icontains=search) | Q(
            rate_date__contains=search) | Q(exchange_rate__icontains=search)) \
            .order_by('-revaluation_date', '-posting_sequence')

    # All data
    records_filtered = revaluation_list.count()
    # Order by list_limit base on order_dir and order_column
    order_column = request.GET['order[0][column]']
    column_name = ""
    if order_column == "0":
        column_name = "revaluation_date"
    elif order_column == "1":
        column_name = "currency"
    elif order_column == "2":
        column_name = "posting_sequence"
    elif order_column == "3":
        column_name = "posting_date"
    elif order_column == "4":
        column_name = "rate_date"
    elif order_column == "5":
        column_name = "exchange_rate"

    order_dir = request.GET['order[0][dir]']
    list = []
    if order_dir == "asc":
        list = revaluation_list.order_by(column_name, 'posting_sequence')[int(start):(int(start) + int(length))]
    elif order_dir == "desc":
        list = revaluation_list.order_by('-' + column_name, '-posting_sequence')[int(start):(int(start) + int(length))]

    # Create data list
    array = []
    for field in list:
        curr = field.currency.code if field.currency else ''

        data = {
            "revaluation_date": field.revaluation_date.strftime("%d-%m-%Y"),
            "currency": curr,
            "posting_sequence": field.posting_sequence,
            "posting_date": field.posting_date.strftime("%d-%m-%Y"),
            "rate_date": field.rate_date.strftime("%d-%m-%Y"),
            "exchange_rate": str(field.exchange_rate),
        }
        array.append(data)

    content = {"draw": draw, "data": array, "recordsTotal": records_total, "recordsFiltered": records_filtered}
    json_content = json.dumps(content, ensure_ascii=False)
    return HttpResponse(json_content, content_type='application/json')


@login_required
def BatchList__asJson(request, batch_type):
    draw = request.GET['draw']
    start = request.GET['start']
    length = request.GET['length']
    search = request.GET['search[value]']
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    company = Company.objects.get(pk=company_id)
    order_list = Batch.objects.filter(is_hidden=0, company_id=company_id, batch_type=int(batch_type))
    records_total = order_list.count()

    if search:  # Filter data base on search
        if search == 'Generated':
            search_type = 1
        else:
            search_type = 2 if search == 'Enter' else search

        if search == 'Open':
            search_status = 1
        else:
            search_status = 2 if search == 'Posted' else search

        order_list = order_list.filter(
            Q(update_date__icontains=search) | Q(batch_no__icontains=search) | Q(batch_date__icontains=search)
            | Q(description__icontains=search) | Q(no_entries__icontains=search)
            | Q(batch_amount__icontains=search) | Q(status__icontains=search_status)
            | Q(input_type__icontains=search_type) | Q(posting_sequence__icontains=search_type))

    # All data
    records_filtered = order_list.count()
    # Order by list_limit base on order_dir and order_column
    order_column = request.GET['order[0][column]']
    order_column_dict = {'posting_sequence': '11', 'source_ledger': '10', 'status': '9', 'input_type': '8',
                         'batch_amount': '7', 'no_entries': '6', 'description': '5',
                         'batch_date': '4', 'batch_no': '3', 'update_date': '2'}

    if int(batch_type) == dict(TRANSACTION_TYPES)['GL']:
        order_column_dict['status'] = '11'
        order_column_dict['input_type'] = '10'
        order_column_dict['batch_amount'] = '9'
        order_column_dict['no_entries'] = '8'
        order_column_dict['posting_sequence'] = '7'
        order_column_dict['source_ledger'] = '6'

    column_name = ""
    if order_column == "0":
        column_name = "update_date"
    elif order_column == "1":
        column_name = "update_date"
    elif order_column == order_column_dict['update_date']:
        column_name = "update_date"
    elif order_column == order_column_dict['batch_no']:
        column_name = "batch_no"
    elif order_column == order_column_dict['batch_date']:
        column_name = "batch_date"
    elif order_column == order_column_dict['source_ledger']:
        column_name = "source_ledger"
    elif order_column == order_column_dict['posting_sequence']:
        column_name = "posting_sequence"
    elif order_column == order_column_dict['description']:
        column_name = "description"
    elif order_column == order_column_dict['no_entries']:
        column_name = "no_entries"
    elif order_column == order_column_dict['batch_amount']:
        column_name = "batch_amount"
    elif order_column == order_column_dict['input_type']:
        column_name = "input_type"
    elif order_column == order_column_dict['status']:
        column_name = "status"
    order_dir = request.GET['order[0][dir]']

    list = []
    if order_dir == "asc":
        if column_name == 'posting_sequence':
            list = order_list.annotate(int_posting_sequence=RawSQL('CAST(posting_sequence AS UNSIGNED)', params=[])) \
                .order_by('int_posting_sequence', '-id')[int(start):(int(start) + int(length))]
        else:
            list = order_list.order_by(column_name, '-id')[int(start):(int(start) + int(length))]
    elif order_dir == "desc":
        if column_name == 'posting_sequence':
            list = order_list.annotate(int_posting_sequence=RawSQL('CAST(posting_sequence AS UNSIGNED)', params=[])) \
                .order_by('-int_posting_sequence', '-id')[int(start):(int(start) + int(length))]
        else:
            list = order_list.order_by('-' + column_name, '-id')[int(start):(int(start) + int(length))]

    # Create data list
    array = []
    input_type_dict = dict(INPUT_TYPES)
    for field in list:
        fsc_calendar = FiscalCalendar.objects.filter(company_id=company_id, is_hidden=0,
                                                     start_date__lte=field.batch_date, end_date__gte=field.batch_date).first()
        if fsc_calendar:
            if int(field.batch_type) == dict(TRANSACTION_TYPES)['GL']:
                locked = fsc_calendar.is_gl_locked
            elif int(field.batch_type) in [dict(TRANSACTION_TYPES)['AR Invoice'], dict(TRANSACTION_TYPES)['AR Receipt']]:
                locked = fsc_calendar.is_ar_locked
            elif int(field.batch_type) in [dict(TRANSACTION_TYPES)['AP Invoice'], dict(TRANSACTION_TYPES)['AP Payment']]:
                locked = fsc_calendar.is_ap_locked
            else:
                locked = False
        else:
            locked = False

        batch_functional_amount = batch_source_amount = 0
        transaction_list = Transaction.objects.filter(is_hidden=False, company_id=company_id,
                                                      journal__is_hidden=False, journal__batch_id=field.id) \
            .exclude(journal__journal_type=dict(TRANSACTION_TYPES)['AD'])\
            .exclude(journal__is_auto_reversed_entry=True)\
            .exclude(journal__reference='REVERSING ENTRY')\
            .select_related('journal', 'journal__batch')
        if int(batch_type) == dict(TRANSACTION_TYPES)['GL']:
            transactions = transaction_list.filter(is_credit_account=True,
                                                   journal__status__in=(int(STATUS_TYPE_DICT['Open']),
                                                                        int(STATUS_TYPE_DICT['Posted']),
                                                                        int(STATUS_TYPE_DICT['Prov. Posted']))).order_by('journal_id')
            if not transactions:
                transactions = transaction_list.filter(is_credit_account=False,
                                                       journal__status__in=(int(STATUS_TYPE_DICT['Open']),
                                                                            int(STATUS_TYPE_DICT['Posted']),
                                                                            int(STATUS_TYPE_DICT['Prov. Posted']))).order_by('journal_id')
        else:
            transactions = transaction_list.filter(journal__status__in=(int(STATUS_TYPE_DICT['Open']),
                                                                        int(STATUS_TYPE_DICT['Posted']),
                                                                        int(STATUS_TYPE_DICT['Draft']))).order_by('journal_id')
        journal_ids = Journal.objects.filter(is_hidden=0, batch_id=field.id)\
            .exclude(journal_type=dict(TRANSACTION_TYPES)['AD'])\
            .exclude(is_auto_reversed_entry=True)\
            .exclude(reference='REVERSING ENTRY')\
            .exclude(status=int(STATUS_TYPE_DICT['Auto Reverse Entry']))\
            .select_related('batch')\
            .values_list('id', flat=True)[::1]
        journal_count = len(journal_ids)
        if transactions:
            last_j_id = 0
            for transaction in transactions:
                # src_amt = (round(float(transaction.amount + transaction.tax_amount), 2),
                #            round(float(transaction.functional_amount) / float(transaction.exchange_rate), 2))[
                #     (transaction.amount + transaction.tax_amount) <= 0]
                if last_j_id != transaction.journal_id:
                    src_amt = round_number(Decimal(transaction.journal.amount) + Decimal(transaction.journal.tax_amount), 2)
                    last_j_id = transaction.journal_id
                    if last_j_id in journal_ids:
                        journal_ids.remove(last_j_id)
                else:
                    src_amt = 0
                if transaction.journal.journal_type != dict(TRANSACTION_TYPES)['GL']:
                    if transaction.journal.document_type and transaction.journal.document_type == DOCUMENT_TYPE_DICT['Credit Note']:
                        batch_functional_amount -= round_number(transaction.functional_amount, 2)
                        batch_source_amount -= src_amt
                    elif transaction.journal.journal_type in (dict(TRANSACTION_TYPES)['AP Payment'], dict(TRANSACTION_TYPES)['AR Receipt']) and \
                            transaction.related_invoice and transaction.related_invoice.document_type and \
                            transaction.related_invoice.document_type == DOCUMENT_TYPE_DICT['Credit Note']:
                        batch_functional_amount -= round_number(transaction.functional_amount, 2)
                        batch_source_amount += src_amt
                    else:
                        batch_functional_amount += round_number(transaction.functional_amount, 2)
                        batch_source_amount += src_amt
                else:
                    batch_functional_amount += round_number(float(transaction.functional_amount), 2)
                    batch_source_amount += src_amt
        if len(journal_ids):
            for id in journal_ids:
                journal = Journal.objects.get(pk=id)
                batch_functional_amount += round_number(Decimal(journal.amount) + Decimal(journal.tax_amount), 2)
                batch_source_amount += round_number(Decimal(journal.amount) + Decimal(journal.tax_amount), 2)
        batch_source_amount = (round_number((batch_source_amount), 2), 0)[field.status == int(STATUS_TYPE_DICT['Deleted'])]
        batch_functional_amount = (round_number((batch_functional_amount), 2), 0)[field.status == int(STATUS_TYPE_DICT['Deleted'])]
        data = {}
        data["id"] = str(field.id)
        data["locked"] = str(locked)
        data["update_date"] = field.update_date.strftime("%d-%m-%Y")
        data["batch_no"] = str(field.batch_no)
        data["batch_type"] = str(field.batch_type)
        data["batch_date"] = field.batch_date.strftime("%d-%m-%Y")
        data["description"] = field.description
        # data["no_entries"] = (field.no_entries, '0')[field.status == int(STATUS_TYPE_DICT['Deleted'])]
        data["no_entries"] = (journal_count, '0')[field.status == int(STATUS_TYPE_DICT['Deleted'])]
        data["posting_sequence"] = str(field.posting_sequence) if field.posting_sequence is not None else '0'
        data["source_ledger"] = field.source_ledger
        try:
            if field.status != int(STATUS_TYPE_DICT['Deleted']):
                # if not field.batch_type == dict(TRANSACTION_TYPES)['GL']:
                #     if field.currency.is_decimal:
                #         data["functional_amount"] = intcomma("%.2f" % batch_functional_amount) if batch_functional_amount else "0"
                #         data["total_amount"] = intcomma("%.2f" % batch_source_amount) if batch_source_amount else "0"
                #     else:
                #         data["functional_amount"] = intcomma(int(batch_functional_amount)) if batch_functional_amount else "0"
                #         data["total_amount"] = intcomma(int(batch_source_amount)) if batch_source_amount else "0"
                # else:
                if company.currency.is_decimal:
                    data["functional_amount"] = intcomma("%.2f" % batch_functional_amount) if batch_functional_amount else "0"
                else:
                    data["functional_amount"] = intcomma(int(batch_functional_amount)) if batch_functional_amount else "0"
                if int(field.batch_type) in [dict(TRANSACTION_TYPES)['AR Invoice'], dict(TRANSACTION_TYPES)['AP Invoice']]:
                    data["total_amount"] = intcomma("%.2f" % batch_source_amount) if batch_source_amount else "0"
                else:
                    if field.currency.is_decimal:
                        data["total_amount"] = intcomma("%.2f" % batch_source_amount) if batch_source_amount else "0"
                    else:
                        data["total_amount"] = intcomma(int(batch_source_amount)) if batch_source_amount else "0"
            else:
                data["total_amount"] = '0'
                data["functional_amount"] = '0'

        except Exception as e:
            print(e)
            data["total_amount"] = '0'
            data["functional_amount"] = '0'
        data["status"] = str(field.status)
        data["input_type"] = input_type_dict.get(field.input_type) if int(field.input_type) else UNDEFINED_LIST[0][0]
        array.append(data)

    content = {"draw": draw, "data": array, "recordsTotal": records_total, "recordsFiltered": records_filtered}
    json_content = json.dumps(content, ensure_ascii=False)
    return HttpResponse(json_content, content_type='application/json')


@login_required
def batch_invocie_delete(request, batch_id):
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    with transactionlib.atomic():
        try:
            batch = Batch.objects.get(pk=batch_id)
            batch.status = STATUS_TYPE_DICT['Deleted']
            batch.save()

            list_journal = Journal.objects.filter(batch_id=batch_id, company_id=company_id, is_hidden=0)
            for journal in list_journal:
                # check if related payment
                user_journal_ids = Transaction.objects.filter(related_invoice_id=journal.id
                    ).exclude(journal_id__isnull=True).exclude(journal__reverse_reconciliation=True
                    ).exclude(journal__journal_type=dict(TRANSACTION_TYPES)['GL']
                    ).exclude(is_hidden=True
                    ).exclude(journal__is_hidden=True)
                if user_journal_ids.exists():
                    msg = ''
                    for trans in user_journal_ids:
                        msg += trans.journal.document_number + ', '
                    messages.error(request, "Entry " + journal.document_number +
                                   " cannot be be deleted. Because these " + msg + "docs are using it")
                    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
                    
                journal.is_hidden = True
                journal.update_by = request.user.id
                journal.update_date = datetime.datetime.now()
                journal.save()
                # journal transactions
                transactions = Transaction.objects.filter(company_id=company_id, is_hidden=0, journal_id=journal.id)
                for trans in transactions:
                    trans.is_hidden = True
                    trans.update_date = datetime.datetime.now()
                    trans.update_by = request.user.id
                    trans.save()
                    try:
                        if trans.related_invoice:
                            journal_id_related = Journal.objects.get(pk=trans.related_invoice_id)
                            journal_id_related.is_fully_paid = False
                            journal_id_related.save()
                    except:
                        pass
        except Exception as e:
            print(e)
            messages.error(request, 'Error happened while deleting the batch')
            # logging.error(traceback.format_exc())
            transactionlib.set_rollback(True)

    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))


@login_required
def fiscal_calendars(request, year, module_type):
    try:
        company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
        company = Company.objects.get(pk=company_id)
        year_list = FiscalCalendar.objects.filter(company_id=company_id, is_hidden=0).values_list('fiscal_year', flat=True).order_by('fiscal_year').distinct()

        FiscalCalendarFormset = formset_factory(FiscalCalendarForm, extra=0)

        if request.method == 'POST':
            fiscal_formset = FiscalCalendarFormset(request.POST)
            if fiscal_formset.is_valid():
                fiscal_calendar = FiscalCalendar.objects.filter(
                    is_hidden=0, fiscal_year=year, company_id=company_id)
                if fiscal_calendar:
                    fiscal_calendar.delete()
                for fiscal_form in fiscal_formset:
                    fiscal_period = fiscal_form.save(commit=False)
                    fiscal_period.fiscal_year = year
                    fiscal_period.company_id = company_id
                    fiscal_period.save()
                messages.info(request, FISCAL_UPDATED % year)
            else:
                print('Formset invalid')

        # filter if that year already have fiscal calendar info
        is_adj_lock = 0
        is_cls_lock = 0
        fiscal_calendar = FiscalCalendar.objects.filter(is_hidden=0, fiscal_year=year, company_id=company_id)[:12]

        if fiscal_calendar:
            fiscal_array = list(fiscal_calendar.values())
            try:
                adj_count = cls_count = 0
                for fiscal in fiscal_array:
                    fiscal['start_date'] = fiscal['start_date'].strftime('%d-%m-%Y')
                    fiscal['end_date'] = fiscal['end_date'].strftime('%d-%m-%Y')
                    if fiscal['is_adj_locked']:
                        adj_count += 1
                    if fiscal['is_cls_locked']:
                        cls_count += 1
            except Exception as e:
                raise e

            fiscal_formset = FiscalCalendarFormset(initial=fiscal_array)
            if adj_count >= 12:
                is_adj_lock = 1
            if cls_count >= 12:
                is_cls_lock = 1
        else:
            # or init a new one
            years_array = []
            for i in range(1, 13):
                month = {}
                _, num_days = calendar.monthrange(year, i)
                first_day = datetime.date(year, i, 1).strftime('%d-%m-%Y')
                last_day = datetime.date(year, i, num_days).strftime('%d-%m-%Y')
                month['start_date'] = first_day
                month['end_date'] = last_day
                month['period'] = i
                years_array.append(month)

            fiscal_formset = FiscalCalendarFormset(initial=years_array)

        return render(request, 'fiscal_calendars.html',
                      {'fiscal_formset': fiscal_formset, 'choosen_year': year, 'year_list': year_list,
                       'module_type': module_type, 'use_inventory': company.is_inventory,
                       'is_adj_lock': is_adj_lock, 'is_cls_lock': is_cls_lock})

    except Exception as e:
        print(EXCEPTION_JOURNAL_VIEW % ('Fiscal Calendar'), e)
        logging.error(traceback.format_exc())
        messages.error(request, EXCEPTION_JOURNAL_VIEW % ('Fiscal Calendar'))
        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))


def JournalList__inReverseTransaction(request):
    draw = request.GET['draw']
    start = request.GET['start']
    length = request.GET['length']
    search = request.GET['search[value]']
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    journal_type = request.GET['journal_type']
    bank_id = request.GET['bank_id']

    journal_transaction_list = Transaction.objects.filter(is_hidden=0, company_id=company_id,
                                                          journal__journal_type=journal_type,
                                                          journal__bank_id=bank_id,
                                                          is_credit_account=True)

    if 'exclude_transaction_list' in request.GET:
        exclude_transaction_list = request.GET['exclude_transaction_list']
        exclude_transaction_list = json.loads(exclude_transaction_list)
        journal_transaction_list = journal_transaction_list.exclude(id__in=exclude_transaction_list)

    records_total = journal_transaction_list.count()

    if search:  # Filter data base on search
        journal_transaction_list = journal_transaction_list.filter(
            Q(transaction_date__icontains=search) | Q(journal__customer__code__icontains=search) | Q(
                functional_amount__icontains=search) | Q(journal__customer__name__icontains=search))

    # All data
    records_filtered = journal_transaction_list.count()

    # Order by list_limit base on order_dir and order_column
    order_column = request.GET['order[0][column]']
    column_name = ""
    if order_column == "0":
        column_name = "transaction_date"
    elif order_column == "1":
        column_name = "vendor_customer_number"
    elif order_column == "2":
        column_name = "vendor_customer_name"
    elif order_column == "3":
        column_name = "functional_amount"
    elif order_column == "4":
        column_name = "batch_number"
    elif order_column == "5":
        column_name = "entry_number"
    elif order_column == "6":
        column_name = "outstanding_amount"
    elif order_column == "7":
        column_name = "payment_code"
    elif order_column == "8":
        column_name = "invoice_id"
    order_dir = request.GET['order[0][dir]']

    list = []
    if order_dir == "asc":
        list = journal_transaction_list.order_by(column_name, '-id')[int(start):(int(start) + int(length))]
    elif order_dir == "desc":
        list = journal_transaction_list.order_by('-' + column_name, '-id')[int(start):(int(start) + int(length))]

    # Create data list
    array = []
    if list.exists():
        for field in list:
            data = {}
            if int(journal_type) == dict(TRANSACTION_TYPES)['AR Receipt']:
                data["vendor_customer_number"] = field.journal.customer.code if field.journal.customer_id else None
                data["vendor_customer_name"] = field.journal.customer.name if field.journal.customer_id else None
            else:
                data["vendor_customer_number"] = field.journal.supplier.code if field.journal.supplier_id else None
                data["vendor_customer_name"] = field.journal.supplier.name if field.journal.supplier_id else None
            if field.currency.is_decimal:
                data["functional_amount"] = str(field.functional_amount)
            else:
                data["functional_amount"] = str(round_number(field.functional_amount), 0)
            data["batch_number"] = field.journal.batch.batch_no
            data["entry_number"] = field.journal.code
            data["outstanding_amount"] = str(
                field.related_invoice.outstanding_amount) if field.related_invoice_id else None
            data["payment_code"] = field.journal.payment_code.code if field.journal.payment_code_id else None
            data["transaction_date"] = field.transaction_date.strftime("%d-%m-%Y")
            data["payment_check_no"] = field.journal.payment_check_number if field.journal.payment_check_number else None
            data['invoice_id'] = field.related_invoice_id if field.related_invoice_id else None
            data['journal_id'] = field.journal_id
            data['transaction_id'] = field.id

            array.append(data)

    content = {"draw": draw, "data": array, "recordsTotal": records_total, "recordsFiltered": records_filtered}
    json_content = json.dumps(content, ensure_ascii=False)
    return HttpResponse(json_content, content_type='application/json')


def advanceSearch__inReverseTransaction(request):
    draw = request.GET['draw']
    start = request.GET['start']
    length = request.GET['length']
    search = request.GET['search[value]']
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    journal_type = request.GET['journal_type']
    bank_id = request.GET['bank_id']

    journal_transaction_list = Journal.objects.filter(is_hidden=0, company_id=company_id,
                                                      journal_type=journal_type,
                                                      bank_id=bank_id,
                                                      status=int(STATUS_TYPE_DICT['Posted']))

    if request.GET['payment_check_no'] != 'null':
        journal_transaction_list = journal_transaction_list.filter(id__in=json.loads(request.GET['payment_check_no']))

    if request.GET['vendor_customer'] != 'null':
        if int(journal_type) == dict(TRANSACTION_TYPES)['AR Receipt']:
            journal_transaction_list = journal_transaction_list.filter(
                customer_id__in=json.loads(request.GET['vendor_customer']))
        else:
            journal_transaction_list = journal_transaction_list.filter(
                supplier_id__in=json.loads(request.GET['vendor_customer']))

    if request.GET['from_date'] != '' and request.GET['to_date'] != '':
        journal_transaction_list = journal_transaction_list.filter(
            document_date__range=[request.GET['from_date'], request.GET['to_date']])
    if request.GET['from_amount'] != '' and request.GET['to_amount'] != '':
        journal_transaction_list = journal_transaction_list.filter(
            total_amount__range=[request.GET['from_amount'], request.GET['to_amount']])

    if 'exclude_transaction_list' in request.GET:
        exclude_transaction_list = request.GET['exclude_transaction_list']
        exclude_transaction_list = json.loads(exclude_transaction_list)
        journal_transaction_list = journal_transaction_list.exclude(id__in=exclude_transaction_list)

    records_total = journal_transaction_list.count()

    if search:  # Filter data base on search
        journal_transaction_list = journal_transaction_list.filter(
            Q(payment_check_number__icontains=search) | Q(customer__code__icontains=search) | Q(
                total_amount__icontains=search) | Q(customer__name__icontains=search))

    # All data
    records_filtered = journal_transaction_list.count()

    # Order by list_limit base on order_dir and order_column
    order_column = request.GET['order[0][column]']
    column_name = ""
    if order_column == "0":
        column_name = "document_date"
    elif order_column == "1":
        if int(journal_type) == dict(TRANSACTION_TYPES)['AR Receipt']:
            column_name = "customer_id"
        else:
            column_name = "supplier_id"
    elif order_column == "2":
        if int(journal_type) == dict(TRANSACTION_TYPES)['AR Receipt']:
            column_name = "customer_id"
        else:
            column_name = "supplier_id"
    elif order_column == "3":
        column_name = "total_amount"
    elif order_column == "4":
        column_name = "batch_id"
    elif order_column == "5":
        column_name = "code"
    elif order_column == "6":
        column_name = "outstanding_amount"
    elif order_column == "7":
        column_name = "payment_check_number"
    elif order_column == "8":
        column_name = "invoice_id"
    order_dir = request.GET['order[0][dir]']

    list = []
    if order_dir == "asc":
        list = journal_transaction_list.order_by(column_name, '-id')[int(start):(int(start) + int(length))]
    elif order_dir == "desc":
        list = journal_transaction_list.order_by('-' + column_name, '-id')[int(start):(int(start) + int(length))]

    # Create data list
    array = []
    if list.exists():
        for field in list:
            data = {}
            if int(journal_type) == dict(TRANSACTION_TYPES)['AR Receipt']:
                data["vendor_customer_number"] = field.customer.code if field.customer_id else None
                data["vendor_customer_name"] = field.customer.name if field.customer_id else None
            else:
                data["vendor_customer_number"] = field.supplier.code if field.supplier_id else None
                data["vendor_customer_name"] = field.supplier.name if field.supplier_id else None
            functional_amount = float(field.total_amount) * float(field.exchange_rate)
            if field.currency.is_decimal:
                data["functional_amount"] = "{0:.6f}".format(functional_amount)
            else:
                data["functional_amount"] = float(round_number(functional_amount, 0))
            data["batch_number"] = field.batch.batch_no
            data["entry_number"] = field.code
            data["payment_code"] = field.payment_code.code if field.payment_code_id else None
            data["transaction_date"] = field.document_date.strftime("%d-%m-%Y")
            data["payment_check_no"] = field.payment_check_number if field.payment_check_number else None
            data['journal_id'] = field.id

            array.append(data)

    content = {"draw": draw, "data": array, "recordsTotal": records_total, "recordsFiltered": records_filtered}
    json_content = json.dumps(content, ensure_ascii=False)
    return HttpResponse(json_content, content_type='application/json')


@login_required
@check_fiscal
def reverse_transaction(request):
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    reverse_form = ReverseTransactionForm(company_id=company_id)
    try:
        with transactionlib.atomic():
            if request.method == 'POST':
                journal_list = json.loads(request.POST.getlist('listTrans')[0])
                Reverse_Transaction = C_Reverse_Transaction(request, journal_list).reverseTransaction()
                if Reverse_Transaction[0]:
                    messages.success(request, Reverse_Transaction[1])
                else:
                    messages.error(request, Reverse_Transaction[1])
    except OSError as e:
        print(EXCEPTION_JOURNAL_ADD % ('Reverse Transaction'), e)
        logging.error(traceback.format_exc())
        messages.error(request, EXCEPTION_JOURNAL_ADD % ('Reverse Transaction'))
    return render(request, 'reverse_transaction.html', {'reverse_form': reverse_form})


@login_required
def advance_search_form(request):
    if request.is_ajax():
        try:
            journal_type = request.POST['journal_type']
            company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
            payment_check_list = Journal.objects.filter(company_id=company_id, is_hidden=False,
                                                        journal_type=journal_type,
                                                        payment_check_number__isnull=False,
                                                        status=int(STATUS_TYPE_DICT['Posted'])).values('payment_check_number', 'id')

            if int(journal_type) == dict(TRANSACTION_TYPES)['AR Receipt']:
                vendor_customer_list = Customer.objects.filter(is_hidden=0, company_id=company_id, is_active=1)
            else:
                vendor_customer_list = Supplier.objects.filter(is_hidden=0, company_id=company_id, is_active=1)
            html = render_to_string('advance_search_form.html', {'payment_check_list': payment_check_list,
                                                                 'vendor_customer_list': vendor_customer_list})
            return HttpResponse(html)
        except OSError as e:
            print(e)
            messages.add_message(request, messages.ERROR, e, extra_tags='advance_search_form')
    else:
        return HttpResponse(json.dumps({"nothing to see": "this isn't happening"}), content_type="application/json")


@login_required
def AccountSetList__asJson(request, account_set_type):
    try:
        draw = request.POST['draw']
        start = request.POST['start']
        length = request.POST['length']
        search = request.POST['search[value]']
        company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
        currency_id = request.POST['currency_id'] if 'currency_id' in request.POST else ''

        list_filter = AccountSet.objects.filter(is_hidden=0, company_id=company_id, is_active=True,
                                                type=account_set_type)
        if currency_id:
            list_filter = list_filter.filter(currency_id=int(currency_id))

        records_total = list_filter.count()

        if search:
            list_filter = list_filter.filter(
                Q(name__icontains=search) | Q(code__icontains=search) | Q(control_account__code__icontains=search) | Q(
                    control_account__name__icontains=search) | Q(revaluation_account__code__icontains=search) | Q(
                    revaluation_account__name__icontains=search) | Q(currency__code__icontains=search) | Q(
                    currency__name__icontains=search))

            # All data
        records_filtered = list_filter.count()  # Order by list_limit base on order_dir and order_column
        order_column = request.POST['order[0][column]']
        column_name = ""
        if order_column == "0":
            column_name = "code"
        elif order_column == "1":
            column_name = "name"
        elif order_column == "2":
            column_name = "control_account__code"
        elif order_column == "3":
            column_name = "currency__code"
        elif order_column == "4":
            column_name = "revaluation_account__code"
        order_dir = request.POST['order[0][dir]']

        list = []
        if order_dir == "asc":
            list = list_filter.order_by(column_name)[int(start):(int(start) + int(length))]
        elif order_dir == "desc":
            list = list_filter.order_by('-' + column_name)[int(start):(int(start) + int(length))]

        # Create data list
        array = []
        for field in list:
            data = {}
            data["id"] = field.id
            data["update_date"] = field.update_date.strftime("%d-%m-%Y")
            data["name"] = field.name
            data["code"] = field.code
            data["control_account"] = (
                field.control_account.code + '-' + field.control_account.name) if field.control_account else ''
            # data["currency_code"] = (field.currency.code + '-' + field.currency.name) if field.currency else ''
            data["currency_code"] = field.currency.code if field.currency else ''
            data["currency_id"] = str(field.currency_id) if field.currency else ''
            data["revaluation_account"] = (
                field.revaluation_account.code + '-' + field.revaluation_account.name) if field.revaluation_account else ''
            array.append(data)

        content = {"draw": draw, "data": array, "recordsTotal": records_total, "recordsFiltered": records_filtered}

        json_content = json.dumps(content, ensure_ascii=False)
        return HttpResponse(json_content, content_type='application/json')

    except Exception as e:
        print(e)
        logger.error(traceback.format_exc())
        return HttpResponseNotFound


@login_required
def ExchangeRateList__asJson(request):
    try:
        draw = request.POST['draw']
        start = request.POST['start']
        length = request.POST['length']
        search = request.POST['search[value]']
        company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
        company = Company.objects.get(pk=company_id)
        currency_id = request.POST['currency_id'] if 'currency_id' in request.POST else company.currency_id
        for_tax = int(request.POST['tax']) if 'tax' in request.POST else 0

        if for_tax:
            list_filter = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                    from_currency_id=currency_id,
                                                    to_currency_id=9,
                                                    flag='ACCOUNTING')
        else:
            list_filter = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                    from_currency_id=currency_id,
                                                    to_currency_id=company.currency_id,
                                                    flag='ACCOUNTING')
        records_total = list_filter.count()

        if search:
            list_filter = list_filter.filter(Q(rate__contains=search))

            # All data
        records_filtered = list_filter.count()  # Order by list_limit base on order_dir and order_column
        order_column = request.POST['order[0][column]']

        column_name = ""
        if order_column == "2":
            column_name = "exchange_date"
        elif order_column == "3":
            column_name = "rate"

        order_dir = request.POST['order[0][dir]']
        list = []
        if order_dir == "asc":
            list = list_filter.order_by(column_name)[int(start):(int(start) + int(length))]
        elif order_dir == "desc":
            list = list_filter.order_by('-' + column_name)[int(start):(int(start) + int(length))]

        # Create data list
        array = []
        for field in list:
            data = {}
            data["id"] = field.id
            data["from_currency"] = field.from_currency.code if field.from_currency else ''
            data["to_currency"] = field.to_currency.code if field.to_currency else ''
            data["rate"] = str(field.rate)
            data["exchange_date"] = field.exchange_date.strftime("%d-%m-%Y")
            array.append(data)
        content = {"draw": draw, "data": array, "recordsTotal": records_total, "recordsFiltered": records_filtered}

        json_content = json.dumps(content, ensure_ascii=False)
        return HttpResponse(json_content, content_type='application/json')

    except Exception as e:
        print(e)
        logger.error(traceback.format_exc())
        return HttpResponseNotFound


@login_required
def ExchangeRateDay__asJson(request, currency_id, days):
    if currency_id:
        company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
        company = Company.objects.get(pk=company_id)
        array = []
        id_exc = rate_exc = exchange_date = ''
        year_rate = days.split('-')[0]
        month_rate = days.split('-')[1]
        list_filter = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                  from_currency_id=currency_id,
                                                  to_currency_id=company.currency_id,
                                                  flag='ACCOUNTING',
                                                  exchange_date__year=year_rate,
                                                  exchange_date__month=month_rate)
        for field in list_filter:
            data = {}
            id_exc = field.id
            rate_exc = str(field.rate)
            exchange_date = str(field.exchange_date)
            array.append(data)
        content = {"id": id_exc, 'rate': rate_exc, 'exchange_date': exchange_date}

        json_content = json.dumps(content, ensure_ascii=False)
        return HttpResponse(json_content, content_type='application/json')
    else:
        logger.error(traceback.format_exc())
        return HttpResponseNotFound


@login_required
def ExchangeRateHistory__asJson(request):
    try:
        draw = request.POST['draw']
        start = request.POST['start']
        length = request.POST['length']
        search = request.POST['search[value]']
        company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
        company = Company.objects.get(pk=company_id)
        currency_id = request.POST['currency_id'] if request.POST['currency_id'] else '0'

        list_filter = ExchangeRate.objects.filter(company_id=company_id, is_hidden=False, flag='ACCOUNTING')
        if int(currency_id) > 0:
            list_filter = list_filter.filter(from_currency_id=currency_id, to_currency_id=company.currency_id)

        records_total = list_filter.count()

        if search:
            list_filter = list_filter.filter(Q(rate__contains=search))

            # All data
        records_filtered = list_filter.count()  # Order by list_limit base on order_dir and order_column
        order_column = request.POST['order[0][column]']
        column_name = ""
        if order_column == "0":
            column_name = "exchange_date"
        elif order_column == "1":
            column_name = "rate"
        order_dir = request.POST['order[0][dir]']

        list = []
        if order_dir == "asc":
            list = list_filter.order_by(column_name)[int(start):(int(start) + int(length))]
        elif order_dir == "desc":
            list = list_filter.order_by('-' + column_name)[int(start):(int(start) + int(length))]

        # Create data list
        array = []
        for field in list:
            data = {}
            data["id"] = field.id
            data["rate"] = str(field.rate)
            data["exchange_date"] = field.exchange_date.strftime(("%d-%m-%Y"))
            array.append(data)
        content = {"draw": draw, "data": array, "recordsTotal": records_total, "recordsFiltered": records_filtered}

        json_content = json.dumps(content, ensure_ascii=False)
        return HttpResponse(json_content, content_type='application/json')

    except Exception as e:
        print(e)
        logger.error(traceback.format_exc())
        return HttpResponseNotFound


@csrf_exempt
@login_required
def load_account_set(request, account_set_type):
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    if request.method == 'POST':
        try:
            if 'currency_id' in request.POST and request.POST['currency_id']:
                currency_id = request.POST['currency_id']
                account_set_list = AccountSet.objects.filter(is_hidden=0, company_id=company_id, is_active=True,
                                                             type=account_set_type,
                                                             currency_id=currency_id)
            else:
                account_set_list = AccountSet.objects.filter(is_hidden=0, company_id=company_id, is_active=True,
                                                             type=account_set_type)
            array = []
            for field in account_set_list:
                data = {}
                data["id"] = field.id
                data["name"] = field.name
                data["text"] = field.code
                data["currency_id"] = str(field.currency_id) if field.currency else ''
                array.append(data)
            return HttpResponse(json.dumps(array), content_type="application/json")
        except Exception as e:
            print(e)
            logger.error(traceback.format_exc())
            return HttpResponseNotFound
    else:
        return HttpResponseNotFound


@login_required
def monthly_closing(request, module_type):
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    company = Company.objects.get(pk=company_id)
    if company.current_period_year_sp and company.current_period_month_sp:
        year_sp = company.current_period_year_sp
        period_sp = company.current_period_month_sp
    else:
        company.current_period_year_sp = company.current_period_year
        company.current_period_month_sp = company.current_period_month
        company.save()
        year_sp = company.current_period_year_sp
        period_sp = company.current_period_month_sp
    current_period_sp = calendar.month_name[int(period_sp)].upper() + " " + str(year_sp)
    today = datetime.date.today()
    current_year = today.year
    next_year = current_year + 1
    current_month = today.month
    current_fiscal_period = FiscalCalendar.objects.filter(fiscal_year=current_year, period=current_month,
                                                          company_id=company_id, is_hidden=0).first()

    if company.current_period_year_ic and company.current_period_month_ic:
        current_period_inv = calendar.month_name[int(company.current_period_month_ic)].upper() + " " + str(
            company.current_period_year_ic)
    else:
        company.current_period_year_ic = company.current_period_year_sp
        company.current_period_month_ic = company.current_period_month_sp
        company.save()
        current_period_inv = calendar.month_name[int(company.current_period_month_ic)].upper() + " " + str(
            company.current_period_year_ic)

    current_period = {
        'id': current_fiscal_period.id,
        'year': current_fiscal_period.fiscal_year,
        'month': current_fiscal_period.period,
        'start': current_fiscal_period.start_date.strftime("%d-%m-%Y"),
        'end': current_fiscal_period.end_date.strftime("%d-%m-%Y"),
        'inv_prd_month': company.current_period_month_ic,
        'inv_prd_year': company.current_period_year_ic,
        'inv_prd_string': current_period_inv
    }

    current_sp_closing = datetime.datetime.strptime(company.current_period_month_sp + '-' + company.current_period_year_sp, "%m-%Y").strftime("%m-%Y")

    prev_period = {
        'id': None,
        'month': None,
        'start': None,
        'end': None
    }
    last_year = current_year
    last_month = today.month - 1
    if last_month == 0:
        last_year -= 1
        last_month = 12
    prev_fiscal_period = FiscalCalendar.objects.filter(fiscal_year=last_year, period=last_month, company_id=company_id,
                                                       is_hidden=0).first()
    if prev_fiscal_period:
        prev_period = {
            'id': prev_fiscal_period.id,
            'year': prev_fiscal_period.fiscal_year,
            'month': prev_fiscal_period.period,
            'start': prev_fiscal_period.start_date.strftime("%d-%m-%Y"),
            'end': prev_fiscal_period.end_date.strftime("%d-%m-%Y")
        }

    year_list = AccountHistory.objects.filter(is_hidden=0, company_id__in=[company_id, None]).values(
        'period_year').distinct()
    year_list_asc = year_list.annotate(year_number=RawSQL('CAST(period_year AS UNSIGNED)', params=[])). \
        order_by('year_number')

    context = {
        'module_type': module_type,
        'current_year': current_year,
        'next_year': next_year,
        'current_period': current_period,
        'prev_period': prev_period,
        'year_list': year_list_asc,
        'year_sp': year_sp,
        'period_sp': period_sp,
        'current_period_sp': current_period_sp,
        'current_sp_closing': current_sp_closing
    }

    return render(request, 'month_end_closing.html', context)


@login_required
def closing(request):
    date = datetime.date.today()
    current_year = request.POST['year']
    next_year = int(current_year) + 1
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0

    if request.method == 'POST':
        dataBatch = Journal.objects.filter(is_hidden=0, company_id=company_id,
                                           journal_type=dict(TRANSACTION_TYPES)['GL'], perd_year=current_year)
        unposted_journals = dataBatch.filter(status__in=(STATUS_TYPE_DICT['Open'],
                                                              STATUS_TYPE_DICT['Prov. Posted']))
        if unposted_journals.exists():
            batch_ids = unposted_journals.values_list('batch_id', flat=True).order_by('batch_id').distinct()
            open_batches = Batch.objects.filter(id__in=batch_ids).values_list('batch_no', flat=True)
            msg = ' '
            count = 0
            for btch in open_batches:
                msg += btch + ', '
                count = count + 1
            msg = msg[:-2]
            if count > 1:
                msg = ' Batches' + msg + ' are in OPEN status.'
            else:
                msg = ' Batch' + msg + ' is in OPEN status.'

            messages.error(request, 'ERROR: ' + YEAR_END_CLOSING_FAILED % (current_year) + YEAR_END_CLOSING_ERR2)
            messages.error(request, 'ERROR: ' + msg)
        else:
            closing = C_Closing(request).generateClosingBatch(current_year)
            if closing[0]:
                messages.success(request, closing[1])

                close_fiscal_year = set_fiscal_year(request, current_year, True)
                if not close_fiscal_year[0]:
                    messages.warning(request, 'WARNING: ' + close_fiscal_year[1])
                else:
                    messages.success(request, close_fiscal_year[1])

                open_fiscal_year = set_fiscal_year(request, next_year, False)
                if not open_fiscal_year[0]:
                    messages.warning(request, 'WARNING: ' + open_fiscal_year[1])
                else:
                    new_fiscal_year = create_fiscal_year(request, next_year)
                    if new_fiscal_year[0]:
                        messages.success(request, new_fiscal_year[1])
                    else:
                        messages.error(request, 'ERROR: ' + new_fiscal_year[1])
            else:
                messages.error(request, 'ERROR: ' + closing[1])

    context = {'next_year': next_year}

    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))


@login_required
def set_fiscal_year(request, year, is_close):
    result = False
    status = (FISCAL_YEAR_OPEN_SUCCESS % (year), FISCAL_YEAR_CLOSED_SUCCESS % (year))[is_close == 1]
    operation_type = ('open', 'close')[is_close == 1]
    fails = []
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    fiscal_calendars = FiscalCalendar.objects.filter(is_hidden=0, fiscal_year=year, company_id=company_id)
    if fiscal_calendars:
        for fiscal_calendar in fiscal_calendars:
            try:
                fiscal_calendar.is_ap_locked = is_close
                fiscal_calendar.is_ar_locked = is_close
                fiscal_calendar.is_gl_locked = is_close
                fiscal_calendar.is_bank_locked = is_close
                fiscal_calendar.is_ic_locked = is_close
                fiscal_calendar.is_sp_locked = is_close
                fiscal_calendar.update_date = datetime.datetime.today()
                fiscal_calendar.update_by = request.user.id
                fiscal_calendar.save()
            except Exception as e:
                print(e)
                fail_info = {}
                fail_info['text'] = YEAR_END_CLOSING_ERR3 % (
                    operation_type, fiscal_calendar.period, fiscal_calendar.fiscal_year)
                fails.append(fail_info)
        result = True

    if len(fails) > 0:
        status = YEAR_END_CLOSING_ERROR + YEAR_END_CLOSING_WARN1 % (year)
        for fail in fails:
            status += '<br \>' + fail['text']

    return [result, status]


@login_required
def create_fiscal_year(request, year):
    result = True
    status = None
    fails = []
    fiscal_year_exist = True
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    try:
        fiscal_year = FiscalCalendar.objects.filter(is_hidden=0, fiscal_year=year, company_id=company_id)
        if fiscal_year.count() > 0 and fiscal_year.count() < 12:
            fiscal_year_exist = False
            for fis_yr in fiscal_year:
                fis_yr.delete()
        elif fiscal_year.count() == 0:
            fiscal_year_exist = False
    except Exception as e:
        print(e)
        fiscal_year_exist = False

    if not fiscal_year_exist:
        fsc_years = FiscalCalendar.objects.filter(company_id=company_id, is_hidden=0).values_list('fiscal_year', flat=True).order_by('fiscal_year').distinct()
        latest_fsc_data = FiscalCalendar.objects.filter(company_id=company_id, is_hidden=0, fiscal_year=fsc_years[-1])
        latest_fsc_data = sorted(latest_fsc_data, key=lambda FiscalCalendar: int(FiscalCalendar.period))
        new_year = int(fsc_years[-1]) + 1
        for data in latest_fsc_data:
            try:
                new_calendar = FiscalCalendar()
                new_calendar.fiscal_year = new_year
                new_calendar.period = data.period
                new_calendar.start_date = data.start_date.replace(year=new_year)
                new_calendar.end_date = data.end_date.replace(year=new_year)
                new_calendar.is_ap_locked = False
                new_calendar.is_ar_locked = False
                new_calendar.is_gl_locked = False
                new_calendar.is_bank_locked = False
                new_calendar.is_ic_locked = False
                new_calendar.is_sp_locked = False
                new_calendar.is_adj_locked = False
                new_calendar.is_cls_locked = False
                new_calendar.is_hidden = False
                new_calendar.company_id = company_id
                new_calendar.create_date = datetime.datetime.today()
                new_calendar.update_date = datetime.datetime.today()
                new_calendar.update_by = request.user.id
                new_calendar.save()
            except Exception as e:
                print(e)
                fail_info = {}
                fail_info['text'] = YEAR_END_CLOSING_ERR3 % (
                    'create', new_calendar.period, new_calendar.fiscal_year)
                fails.append(fail_info)

        if len(fails) > 0 and len(fails) < 12:
            status = YEAR_END_CLOSING_ERROR + YEAR_END_CLOSING_WARN1 % (year)
            for fail in fails:
                status += '<br \>' + fail['text']
        if len(fails) > 11:
            result = False
            status = YEAR_END_CLOSING_ERR5 % (year)
        else:
            status = FISCAL_YEAR_OPEN_SUCCESS % (year)

    return [result, status]


@csrf_exempt
@login_required
def load_fiscal_period(request):
    if request.is_ajax():
        try:
            company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
            today = datetime.datetime.today().date()
            last_month = datetime.datetime.today().month - 1
            fiscal_period = FiscalCalendar.objects.filter(fiscal_year=today.year, period=last_month,
                                                          company_id=company_id, is_hidden=0).first()
            response_data = {}
            if fiscal_period:
                response_data['period'] = str(fiscal_period.period) if fiscal_period.period else ''
                response_data['start_date'] = str(fiscal_period.start_date) if fiscal_period.start_date else ''
                response_data['end_date'] = str(fiscal_period.end_date) if fiscal_period.end_date else ''
                response_data['year'] = str(fiscal_period.fiscal_year) if fiscal_period.end_date else ''
                return HttpResponse(json.dumps(response_data), content_type="application/json")
        except OSError as e:
            print(e)
            messages.add_message(request, messages.ERROR, e, extra_tags='search_location_code')
    else:
        return HttpResponse(json.dumps({"nothing to see": "this isn't happening"}), content_type="application/json")


@csrf_exempt
@login_required
def inventory_closing(request):
    fiscal_period_id = request.POST['fiscal_period_id']
    if fiscal_period_id != 'None':
        try:
            company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
            year = int(request.POST['years_period'])
            period = int(request.POST['month_period'])
            fiscal_period = FiscalCalendar.objects.filter(fiscal_year=year, period=period, company_id=company_id,
                                                          is_hidden=0).first()
            if fiscal_period:
                # draft_stock_trans = StockTransaction.objects.filter(is_hidden=0, company_id=company_id,
                #                                                     document_date__month=period,
                #                                                     status=dict(ORDER_STATUS)['Sent'])
                draft_stock_trans = 0
                if draft_stock_trans:
                    messages.error(request, IC_DRAFT_CHECK % (
                        fiscal_period.period, fiscal_period.start_date, fiscal_period.end_date,
                        draft_stock_trans.count()))
                else:
                    if not fiscal_period.is_ic_locked:
                        # Perform daily closing
                        company = Company.objects.get(pk=company_id)
                        trx_code = '0'
                        daily_date = company.closing_date + datetime.timedelta(days=1)
                        new_closing_date = datetime.date(year, period, calendar.monthrange(year, period)[1])

                        # reverse to first of month
                        start_closing_date = new_closing_date.replace(year=year, month=period, day=int(1))  # first day of the month
                        stock_trans = StockTransaction.objects.filter(is_hidden=0, company_id=company_id,
                                                                      document_date__range=(start_closing_date, company.closing_date),
                                                                      io_flag__in=(dict(INV_IN_OUT_FLAG)['IN'], dict(INV_IN_OUT_FLAG)['OUT'],
                                                                                   dict(INV_IN_OUT_FLAG)['Transfer'])).order_by('-document_date')

                        is_open = stock_trans.filter(is_closed=0)
                        if is_open:
                            stck_dates = stock_trans.values_list('document_date', flat=True).distinct()
                            for stck_date in stck_dates:
                                res = update_balance_qty(request, company_id, trx_code, stck_date, True)
                                response = calculate_cost_FIFO_reverse(company_id, request, trx_code, stck_date)
                        else:
                            start_closing_date = company.closing_date + timedelta(days=1)

                        stock_trans = StockTransaction.objects.filter(is_hidden=0, company_id=company_id,
                                                                      document_date__range=(start_closing_date, new_closing_date),
                                                                      io_flag__in=(dict(INV_IN_OUT_FLAG)['IN'], dict(INV_IN_OUT_FLAG)['OUT'],
                                                                                   dict(INV_IN_OUT_FLAG)['Transfer'])).order_by('document_date')
                        stck_dates = stock_trans.values_list('document_date', flat=True).distinct()

                        for stck_date in stck_dates:
                            response = calculate_cost_FIFO(company_id, request, trx_code, stck_date)
                            res = update_balance_qty(request, company_id, trx_code, stck_date)

                        company.closing_date = new_closing_date
                        company.current_period_month_ic = str((company.closing_date + datetime.timedelta(days=1)).month)
                        company.current_period_year_ic = str((company.closing_date + datetime.timedelta(days=1)).year)
                        company.save()

                        currenct_ic_period = datetime.datetime.strptime(company.current_period_month_ic + '-' +
                                                                        company.current_period_year_ic, "%m-%Y").strftime("%m-%Y")
                        request.session['currenct_ic_period'] = currenct_ic_period
                        request.session.modified = True

                        # Perform monthly closing
                        fiscal_period.is_ic_locked = True
                        fiscal_period.save()

                        trans_list = StockTransaction.objects.filter(is_hidden=0, company_id=company_id,
                                                                     is_closed=0, document_date__year=year,
                                                                     document_date__month=period)
                        if trans_list:
                            for trans in trans_list:
                                trans.is_closed = 1
                                trans.closing_date = new_closing_date
                                trans.save()

                        incoming_list = Incoming.objects.filter(is_hidden=0, company_id=company_id, balance_qty=0,
                                                                is_history=0)
                        if incoming_list:
                            for incoming in incoming_list:
                                incoming.is_history = 1
                                incoming.save()

                        outgoing_list = Outgoing.objects.filter(is_hidden=0, company_id=company_id,
                                                                ref_no__isnull=False, is_history=0)
                        if outgoing_list:
                            for outgoing in outgoing_list:
                                outgoing.is_history = 1
                                outgoing.save()

                        # next_prd_m,next_prd_y = next_period(period,year)
                        # company = Company.objects.get(pk=company_id, is_hidden=False)
                        # if company:
                        #     company.current_period_month = str(next_prd_m)
                        #     company.current_period_year = str(next_prd_y)
                        #     company.save()

                        messages.info(request, IC_LOCKED_SUCCESS % (
                            fiscal_period.period, fiscal_period.start_date, fiscal_period.end_date))
                    else:
                        messages.error(request, CHECK_IC_LOCKED % (
                            fiscal_period.period, fiscal_period.start_date, fiscal_period.end_date))
            else:
                stored = messages.get_messages(request)
                for mess in stored:
                    del mess
                messages.error(request, PERIOD_LOCKED_FAILED)

        except Exception as e:
            print(EXCEPTION_JOURNAL_ADD % ('Inventory Closing'), e)
            logging.error(traceback.format_exc())

            stored = messages.get_messages(request)
            for mess in stored:
                del mess
            messages.error(request, EXCEPTION_JOURNAL_ADD % ('Inventory Closing'))
    else:
        messages.error(request, PERIOD_LOCKED_FAILED)

    response = {'status': 200, 'messages': 'closing success'}
    return HttpResponse(json.dumps(response), content_type='application/json')


def next_period(month, year):
    next_prd_month = month + 1
    next_prd_year = year
    if int(month) == 12:
        next_prd_month = 1
        next_prd_year = year + 1
    return next_prd_month, next_prd_year


@csrf_exempt
@login_required
def sp_closing(request):
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    company = Company.objects.get(pk=company_id)
    # year = company.current_period_year
    # period = company.current_period_month
    year = int(request.POST['year'])
    period = int(request.POST['month'])
    current_period_sp = calendar.month_name[int(period)].upper() + " " + str(year)
    order_list_all = Order.objects.filter(is_hidden=0, company_id=company_id, document_date__month=period, document_date__year=year)
    fail = False
    ic_is_open = False
    if year and period:
        try:
            draft_doc = 0
            fiscal_period = FiscalCalendar.objects.filter(fiscal_year=year, period=period, company_id=company_id,
                                                          is_hidden=0).first()
            # for locking S&P transaction
            if fiscal_period:
                if company.is_inventory and not fiscal_period.is_ic_locked:
                    ic_is_open = True
                else:
                    # check if there is any Draft Order
                    order_list = order_list_all.filter(status=dict(ORDER_STATUS)['Draft'])
                    draft_so = order_list.filter(order_type=dict(ORDER_TYPE)['SALES ORDER'])
                    draft_po = order_list.filter(order_type=dict(ORDER_TYPE)['PURCHASE ORDER'])
                    draft_gr = order_list.filter(order_type=dict(ORDER_TYPE)['PURCHASE INVOICE'])
                    draft_do = order_list.filter(order_type=dict(ORDER_TYPE)['SALES INVOICE'])
                    draft_sale_notes = order_list.filter((Q(order_type=dict(ORDER_TYPE)['SALES DEBIT NOTE']) |
                                                          Q(order_type=dict(ORDER_TYPE)['SALES CREDIT NOTE'])))
                    draft_purchase_notes = order_list.filter((Q(order_type=dict(ORDER_TYPE)['PURCHASE DEBIT NOTE']) |
                                                              Q(order_type=dict(ORDER_TYPE)['PURCHASE CREDIT NOTE'])))

                    if draft_so:
                        messages.error(request, SO_DRAFT_CHECK % (
                            fiscal_period.period, fiscal_period.start_date, fiscal_period.end_date, draft_so.count()))
                        draft_doc += 1
                    if draft_po:
                        messages.error(request, PO_DRAFT_CHECK % (
                            fiscal_period.period, fiscal_period.start_date, fiscal_period.end_date, draft_po.count()))
                        draft_doc += 1
                    if draft_gr:
                        messages.error(request, GR_DRAFT_CHECK % (
                            fiscal_period.period, fiscal_period.start_date, fiscal_period.end_date, draft_gr.count()))
                        draft_doc += 1
                    if draft_do:
                        messages.error(request, DO_DRAFT_CHECK % (
                            fiscal_period.period, fiscal_period.start_date, fiscal_period.end_date, draft_do.count()))
                        draft_doc += 1
                    if draft_sale_notes:
                        messages.error(request, SALE_NOTES_DRAFT_CHECK % (
                            fiscal_period.period, fiscal_period.start_date, fiscal_period.end_date,
                            draft_sale_notes.count()))
                        draft_doc += 1
                    if draft_purchase_notes:
                        messages.error(request, PURCHASE_NOTES_DRAFT_CHECK % (
                            fiscal_period.period, fiscal_period.start_date, fiscal_period.end_date,
                            draft_purchase_notes.count()))
                        draft_doc += 1

                    if draft_doc == 0:
                        if not fiscal_period.is_sp_locked:
                            fiscal_period.is_sp_locked = True
                            fiscal_period.save()
                            messages.info(request, SP_LOCKED_SUCCESS % (
                                fiscal_period.period, fiscal_period.start_date, fiscal_period.end_date))
                        else:
                            messages.error(request, CHECK_SP_LOCKED % (
                                fiscal_period.period, fiscal_period.start_date, fiscal_period.end_date))
            else:
                fail = True

        except Exception as e:
            print(e)
            logging.error(traceback.format_exc())
            fail = True
    else:
        fail = True

    if ic_is_open:
        response = {'status': 200, 'messages': 'closing failed'}
        messages.error(request, CHECK_IC_LOCKED_FOR_SP % (
            fiscal_period.period, fiscal_period.start_date, fiscal_period.end_date,))
    elif not fail:
        set_next_period(request, year, period, company_id)
        response = {'status': 200, 'messages': 'closing success'}
    else:
        response = {'status': 200, 'messages': 'closing failed'}
        reset_error_msg(request, PERIOD_LOCKED_FAILED2 % current_period_sp)

    return HttpResponse(json.dumps(response), content_type='application/json')


def reset_error_msg(request, error_string):
    stored = messages.get_messages(request)
    for mess in stored:
        del mess
    messages.error(request, error_string)


def set_next_period(request, year, period, company_id):
    next_prd_m, next_prd_y = next_period(int(period), int(year))
    company = Company.objects.get(pk=company_id, is_hidden=False)
    if company:
        company.current_period_month_sp = str(next_prd_m)
        company.current_period_year_sp = str(next_prd_y)
        company.save()
        currenct_sp_period = datetime.datetime.strptime(company.current_period_month_sp + '-' + company.current_period_year_sp, "%m-%Y").strftime("%m-%Y")
        request.session['currenct_sp_period'] = currenct_sp_period
        request.session.modified = True


@login_required
def TaxBySupplier__asJson(request, id_supplier):
    try:
        Supplier_tax = Supplier.objects.get(pk=id_supplier)
        if Supplier_tax:
            if Supplier_tax['tax_id']:
                list_tax = Tax.objects.get(pk=Supplier_tax['tax_id'])

                if list_tax:
                    content = {"id_supplier": int(id_supplier),
                               "tax_code": list_tax['code'],
                               "tax_name": list_tax['name'],
                               "tax_rate": int(list_tax['rate']),
                               "tax_id": list_tax['id'],
                               "tax_distribution_code_id": list_tax['distribution_code_id']
                               }

                    json_content = json.dumps(dict(content))
                    return HttpResponse(json_content, content_type='application/json')
                json_content = json.dumps(dict({"msg": 'not found tax'}))
                return HttpResponse(json_content, content_type='application/json')
            json_content = json.dumps(dict({"msg": 'not found Tax id'}))
            return HttpResponse(json_content, content_type='application/json')

        json_content = json.dumps(dict({"msg": 'not found supplier'}))
        return HttpResponse(json_content, content_type='application/json')
    except Exception as e:
        print(e)
        logger.error(traceback.format_exc())
        return HttpResponseNotFound


@login_required
def TaxByDisctibutor__asJson(request, id_distributor):
    try:
        company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
        list_tax = Tax.objects.filter(is_hidden=0, distribution_code_id=id_distributor,
                                      company_id=company_id).values().first()

        if list_tax:
            content = {"id_distributor": int(id_distributor),
                       "tax_code": list_tax['code'],
                       "tax_name": list_tax['name'],
                       "tax_rate": int(list_tax['rate']),
                       "tax_id": list_tax['id'],
                       "tax_distribution_code_id": list_tax['distribution_code_id']
                       }

            json_content = json.dumps(dict(content))
            return HttpResponse(json_content, content_type='application/json')
        json_content = json.dumps(dict({"msg": 'not found'}))
        return HttpResponse(json_content, content_type='application/json')
    except Exception as e:
        print(e)
        logger.error(traceback.format_exc())
        return HttpResponseNotFound


def get_batches(request, module_type):
    array = []
    obj = {"count": 0, "batches": []}
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    batch = Batch.objects.filter(company_id=company_id, is_hidden=False,
                                 status=int(STATUS_TYPE_DICT['Open'])).order_by('id')
    if module_type == 'AR':
        batch = batch.filter(
            batch_type__in=(dict(TRANSACTION_TYPES)['AR Invoice'], dict(TRANSACTION_TYPES)['AR Receipt']))
    elif module_type == 'AP':
        batch = batch.filter(
            batch_type__in=(dict(TRANSACTION_TYPES)['AP Invoice'], dict(TRANSACTION_TYPES)['AP Payment']))
    else:
        batch = batch.filter(batch_type=dict(TRANSACTION_TYPES)['GL'])
    try:
        batch_type = int(request.POST.get('selected_batch_type'))
        post_type = request.POST.get('selected_post_option')
        batches = Batch.objects.filter(company_id=company_id, is_hidden=False,
                                       status=int(STATUS_TYPE_DICT['Open']),
                                       batch_type=batch_type)
        if int(post_type) == 1:
            batches = batches.order_by('id')
        else:
            first_id = request.POST.get('first_batch')
            last_id = request.POST.get('last_batch')
            batches = batches.filter(id__range=[first_id, last_id]).order_by('id')
        if batches.count():
            obj['count'] = batches.count()
            for btch in batches:
                obj['batches'].append(btch.id)
            array.append(obj)
    except Exception as e:
        print(e)
        array.append(obj)
    json_content = json.dumps(array, ensure_ascii=False)
    return HttpResponse(json_content, content_type='application/json')


@login_required
def post_batch(request, batch_id):
    try:
        company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
        batch = Batch.objects.filter(pk=batch_id, company_id=company_id, is_hidden=False,
                                     status=int(STATUS_TYPE_DICT['Open'])).first()
        if batch.batch_type == dict(TRANSACTION_TYPES)['AR Invoice']:
            send_AR_batch(request, batch.id)
        elif batch.batch_type == dict(TRANSACTION_TYPES)['AP Invoice']:
            send_AP_batch(request, batch.id)
        elif batch.batch_type == dict(TRANSACTION_TYPES)['AR Receipt']:
            send_batch_receipt(request, batch.id)
        elif batch.batch_type == dict(TRANSACTION_TYPES)['AP Payment']:
            send_AP_Payment_batch(request, batch.id)
        else:
            send_GL_batch(request, batch.id, 0)

        result = True
        stored = messages.get_messages(request)
        for mess in stored:
            del mess
    except Exception as e:
        print(e)
        result = False

    json_content = json.dumps(result, ensure_ascii=False)
    return HttpResponse(json_content, content_type='application/json')


# @login_required
def generate_description(company_id, journal, field_type, detail=False, transaction=None, apply_to_docs=''):
    result = ''
    segment_0 = None
    segment_1 = None
    segment_2 = None
    segment_3 = None
    segment_4 = None

    if journal.journal_type == dict(TRANSACTION_TYPES)['AR Invoice'] or journal.journal_type == dict(TRANSACTION_TYPES)['AR Receipt']:
        source_type = 'AR'
    elif journal.journal_type == dict(TRANSACTION_TYPES)['AP Invoice'] or journal.journal_type == dict(TRANSACTION_TYPES)['AP Payment']:
        source_type = 'AP'

    transaction_type = get_transaction_type(journal, field_type, source_type, detail)
    field_type = dict(GL_INTEGRATION_OPTIONS)[field_type]

    if transaction_type != '':
        if source_type == 'AP':
            gl_integration = APGLIntegration.objects.filter(is_hidden=0, company_id=company_id,
                                                            transaction_type=transaction_type,
                                                            transaction_field=field_type)
            if gl_integration:
                gl_integration = gl_integration.last()
                try:
                    detail = APGLIntegrationDetail.objects.get(parent_id=gl_integration.id)
                    if detail.segment_0:
                        segment_0 = AP_TRANSACTION_SEGMENT_TYPES_DICT[detail.segment_0]
                    if detail.segment_1:
                        segment_1 = AP_TRANSACTION_SEGMENT_TYPES_DICT[detail.segment_1]
                    if detail.segment_2:
                        segment_2 = AP_TRANSACTION_SEGMENT_TYPES_DICT[detail.segment_2]
                    if detail.segment_3:
                        segment_3 = AP_TRANSACTION_SEGMENT_TYPES_DICT[detail.segment_3]
                    if detail.segment_4:
                        segment_4 = AP_TRANSACTION_SEGMENT_TYPES_DICT[detail.segment_4]
                except Exception as e:
                    pass
        else:
            gl_integration = ARGLIntegration.objects.filter(is_hidden=0, company_id=company_id,
                                                            transaction_type=transaction_type,
                                                            transaction_field=field_type)
            if gl_integration:
                gl_integration = gl_integration.last()
                try:
                    detail = ARGLIntegrationDetail.objects.get(parent_id=gl_integration.id)
                    if detail.segment_0:
                        segment_0 = AR_TRANSACTION_SEGMENT_TYPES_DICT[detail.segment_0]
                    if detail.segment_1:
                        segment_1 = AR_TRANSACTION_SEGMENT_TYPES_DICT[detail.segment_1]
                    if detail.segment_2:
                        segment_2 = AR_TRANSACTION_SEGMENT_TYPES_DICT[detail.segment_2]
                    if detail.segment_3:
                        segment_3 = AR_TRANSACTION_SEGMENT_TYPES_DICT[detail.segment_3]
                    if detail.segment_4:
                        segment_4 = AR_TRANSACTION_SEGMENT_TYPES_DICT[detail.segment_4]
                except Exception as e:
                    pass

        if segment_0:
            result += get_segment_text(journal, transaction, segment_0, apply_to_docs)
        if segment_1:
            result += get_segment_text(journal, transaction, segment_1, apply_to_docs)
        if segment_2:
            result += get_segment_text(journal, transaction, segment_2, apply_to_docs)
        if segment_3:
            result += get_segment_text(journal, transaction, segment_3, apply_to_docs)
        if segment_4:
            result += get_segment_text(journal, transaction, segment_4, apply_to_docs)

        result = result[:-1]

    return result


def get_segment_text(journal, transaction, segment, apply_to_docs):
    result = ''
    if segment == 'Tax Group':
        if transaction and transaction.tax and transaction.tax.tax_group:
            return transaction.tax.tax_group.code + '-'
    if segment == 'Document Number':
        if journal.document_number:
            return journal.document_number + '-'
    elif segment == 'Apply-To Document Number':
        if len(apply_to_docs):
            apply_to_docs = apply_to_docs[:-1]
            return apply_to_docs + '-'
        elif transaction and transaction.related_invoice:
            return transaction.related_invoice.document_number + '-'
    elif segment == 'Description':
        if journal.name:
            return journal.name + '-'
    elif segment == 'Reference':
        if journal.reference:
            return journal.reference + '-'
    elif segment == 'Comment':
        if transaction and transaction.remark:
            return transaction.remark + '-'
    elif segment == 'Detail Description':
        if transaction and transaction.description:
            return transaction.description + '-'
    elif segment == 'Detail Reference':
        if transaction and transaction.reference:
            return transaction.reference + '-'
    elif segment == 'Distribution Code':
        if transaction and transaction.distribution_code:
            return transaction.distribution_code.code + '-'
    elif segment == 'Entry Number':
        if journal.code:
            return journal.code + '-'
    elif segment == 'Order Number':
        if journal.order_number:
            return journal.order_number + '-'
    elif segment == 'Invoice Number':
        if journal.document_type == DOCUMENT_TYPE_DICT['Miscellaneous Payment'] or\
                journal.document_type == DOCUMENT_TYPE_DICT['Miscellaneous Receipt']:
            if journal.invoice_number:
                return journal.invoice_number + '-'
        else:
            if transaction and transaction.related_invoice:
                return transaction.related_invoice.document_number + '-'
    elif segment == 'Payment Code':
        if journal.payment_code:
            return journal.payment_code.code + '-'
    elif segment == 'Bank Code':
        if journal.bank:
            return journal.bank.code + '-'
    elif segment == 'Batch Number':
        if journal.batch:
            return journal.batch.batch_no + '-'
    elif segment == 'Check Date':
        if journal.payment_check_number:
            if journal.document_number:
                return journal.document_number + '-'
    elif segment == 'Check Number':
        if journal.payment_check_number:
            return journal.payment_check_number + '-'
    elif segment == 'Check/Receipt Number':
        if journal.payment_check_number:
            return journal.payment_check_number + '-'
    elif segment == 'Payer':
        if journal.customer:
            return journal.customer.name + '-'
    elif segment == 'Customer Name':
        if journal.customer:
            return journal.customer.name + '-'
    elif segment == 'Customer Number':
        if journal.customer:
            return journal.customer.code + '-'
    elif segment == 'Customer Short Name':
        if journal.customer:
            return journal.customer.code + '-'
    elif segment == 'Payee':
        if journal.supplier:
            return journal.supplier.name + '-'
    elif segment == 'Vendor Name':
        if journal.supplier:
            return journal.supplier.name + '-'
    elif segment == 'Vendor Number':
        if journal.supplier:
            return journal.supplier.code + '-'
    elif segment == 'Vendor Short Name':
        if journal.supplier:
            return journal.supplier.code + '-'
    elif segment == 'Batch Type':
        if journal.batch:
            return dict(TRANSACTION_TYPES_REVERSED)[journal.batch.batch_type] + '-'
    elif segment == 'Document Type':
        if journal.document_type:
            return dict(DOCUMENT_TYPES)[journal.document_type] + '-'
    elif segment == 'Transaction Type':
        if journal.journal_type == '3' and journal.transaction_type:
            return dict(RECEIPT_TRANSACTION_TYPES)[journal.transaction_type] + '-'
        elif journal.journal_type == '4' and journal.transaction_type:
            return dict(PAYMENT_TRANSACTION_TYPES)[journal.transaction_type] + '-'

    return result


def get_transaction_type(journal, field_type, source_type, detail):
    if source_type == 'AP':
        if journal.document_type == DOCUMENT_TYPE_DICT['Invoice']:
            if not detail:
                return dict(AP_GL_SOURCE_TYPE)['Invoice']
            else:
                return dict(AP_GL_SOURCE_TYPE)['Invoice Detail']
        if journal.document_type == DOCUMENT_TYPE_DICT['Debit Note']:
            if not detail:
                return dict(AP_GL_SOURCE_TYPE)['Debit Note']
            else:
                return dict(AP_GL_SOURCE_TYPE)['Debit Note Detail']
        if journal.document_type == DOCUMENT_TYPE_DICT['Credit Note']:
            if not detail:
                return dict(AP_GL_SOURCE_TYPE)['Credit Note']
            else:
                return dict(AP_GL_SOURCE_TYPE)['Credit Note Detail']
        if journal.document_type == DOCUMENT_TYPE_DICT['Payment']:
            if not detail:
                return dict(AP_GL_SOURCE_TYPE)['Payment']
            else:
                return dict(AP_GL_SOURCE_TYPE)['Payment Detail']
        if journal.document_type == DOCUMENT_TYPE_DICT['Miscellaneous Payment']:
            if not detail:
                return dict(AP_GL_SOURCE_TYPE)['Miscellaneous Payment']
            else:
                return dict(AP_GL_SOURCE_TYPE)['Miscellaneous Payment Detail']
        if journal.document_type == DOCUMENT_TYPE_DICT['Adjustment']:
            if not detail:
                return dict(AP_GL_SOURCE_TYPE)['Adjustment']
            else:
                return dict(AP_GL_SOURCE_TYPE)['Adjustment Detail']
        if journal.document_type == DOCUMENT_TYPE_DICT['Prepayment']:
            return dict(AP_GL_SOURCE_TYPE)['Prepayment']
    else:
        if journal.document_type == DOCUMENT_TYPE_DICT['Invoice']:
            if not detail:
                return dict(AR_GL_SOURCE_TYPE)['Invoice']
            else:
                return dict(AR_GL_SOURCE_TYPE)['Invoice Detail']
        if journal.document_type == DOCUMENT_TYPE_DICT['Debit Note']:
            if not detail:
                return dict(AR_GL_SOURCE_TYPE)['Debit Note']
            else:
                return dict(AR_GL_SOURCE_TYPE)['Debit Note Detail']
        if journal.document_type == DOCUMENT_TYPE_DICT['Credit Note']:
            if not detail:
                return dict(AR_GL_SOURCE_TYPE)['Credit Note']
            else:
                return dict(AR_GL_SOURCE_TYPE)['Credit Note Detail']
        if journal.document_type == DOCUMENT_TYPE_DICT['Receipt']:
            if not detail:
                return dict(AR_GL_SOURCE_TYPE)['Receipt']
            else:
                return dict(AR_GL_SOURCE_TYPE)['Receipt Detail']
        if journal.document_type == DOCUMENT_TYPE_DICT['Unapplied Cash']:
            return dict(AR_GL_SOURCE_TYPE)['Unapplied Cash']
        if journal.document_type == DOCUMENT_TYPE_DICT['Miscellaneous Receipt']:
            if not detail:
                return dict(AR_GL_SOURCE_TYPE)['Miscellaneous Receipt']
            else:
                return dict(AR_GL_SOURCE_TYPE)['Miscellaneous Receipt Detail']
        if journal.document_type == DOCUMENT_TYPE_DICT['Adjustment']:
            return dict(AR_GL_SOURCE_TYPE)['Adjustment']
            if not detail:
                return dict(AR_GL_SOURCE_TYPE)['Adjustment']
            else:
                return dict(AR_GL_SOURCE_TYPE)['Adjustment Detail']
        if journal.document_type == DOCUMENT_TYPE_DICT['Prepayment']:
            return dict(AR_GL_SOURCE_TYPE)['Prepayment']


@login_required
# @check_fiscal
def post_batches(request, module_type):
    try:
        company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
        batch = Batch.objects.filter(company_id=company_id, is_hidden=False,
                                     status=int(STATUS_TYPE_DICT['Open'])).order_by('id')

        if module_type == 'AR':
            batch = batch.filter(
                batch_type__in=(dict(TRANSACTION_TYPES)['AR Invoice'], dict(TRANSACTION_TYPES)['AR Receipt']))
        elif module_type == 'AP':
            batch = batch.filter(
                batch_type__in=(dict(TRANSACTION_TYPES)['AP Invoice'], dict(TRANSACTION_TYPES)['AP Payment']))
        else:
            batch = batch.filter(batch_type=dict(TRANSACTION_TYPES)['GL'])

        if request.method == 'POST':
            post_state = json.loads(request.POST.get('post_state'))
            messages.success(request, '%s batches has been successfully posted. <br />%s failed.' % (
                post_state['success'], post_state['fail']))

        context = {'module_type': module_type, 'batch_list': batch}
        return render(request, 'post_batches.html', context)

    except Exception as e:
        print(EXCEPTION_JOURNAL_POST % ('Batches'), e)
        logging.error(traceback.format_exc())
        messages.error(request, EXCEPTION_JOURNAL_POST % ('Batches'))
        return HttpResponseNotFound


@login_required
def clear_tax_tracking(request, from_date, to_date, type):
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    if type == '1': #sales
        all_transactions = Transaction.objects.filter(company_id=company_id, is_hidden=0, journal__is_hidden=0,
                                                    journal__batch__batch_type__in=(
                                                        dict(TRANSACTION_TYPES)['AR Invoice'],
                                                        dict(TRANSACTION_TYPES)['AR Receipt']),
                                                    journal__transaction_type__in=('0', '', '2'),
                                                    journal__batch__status=int(STATUS_TYPE_DICT['Posted']),
                                                    is_clear_tax=False).order_by('journal__perd_year', 'journal__perd_month')
    else: #purchase
        all_transactions = Transaction.objects.filter(company_id=company_id, is_hidden=0, journal__is_hidden=0,
                                                    journal__batch__batch_type__in=(
                                                        dict(TRANSACTION_TYPES)['AP Invoice'],
                                                        dict(TRANSACTION_TYPES)['AP Payment']),
                                                    journal__transaction_type__in=('0', '', '2'),
                                                    journal__batch__status=int(STATUS_TYPE_DICT['Posted']),
                                                    is_clear_tax=False).order_by('journal__perd_year', 'journal__perd_month')
    if from_date != '0' and to_date != '0':
        from_month = from_date.split('-')[1]
        from_year = from_date.split('-')[0]
        to_month = to_date.split('-')[1]
        to_year = to_date.split('-')[0]

        issue_from = datetime.date(int(from_year), int(from_month), 1)
        issue_to = datetime.date(int(to_year), int(to_month), calendar.monthrange(int(to_year), int(to_month))[1])

        number_of_month = relativedelta(issue_to, issue_from)
        number_of_month = (number_of_month.years * 12) + number_of_month.months

        for month in range(-1, number_of_month):
            current_date = issue_from + relativedelta(months=month + 1)
            curr_year = current_date.year
            current_month = current_date.month

            transactions = all_transactions.filter(journal__perd_year=curr_year, journal__perd_month=current_month)
            for trx in transactions:
                try:
                    if not trx.transaction_date or trx.transaction_date == '0000-00-00':
                        trx.transaction_date = trx.journal.document_date
                    trx.is_clear_tax = True
                    trx.save()
                except Exception as e:
                    print(e)
                    
    else:
        for trx in all_transactions:
            try:
                if not trx.transaction_date or trx.transaction_date == '0000-00-00':
                    trx.transaction_date = trx.journal.document_date
                trx.is_clear_tax = True
                trx.save()
            except Exception as e:
                print(e)

    content = {'result': 'Success'}
    json_content = json.dumps(content, ensure_ascii=False)
    return HttpResponse(json_content, content_type='application/json')


@login_required
def print_tax_tracking_rpt(request):
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    tax_authority = TaxAuthority.objects.filter(company_id=company_id, is_hidden=False)
    all_transactions = Transaction.objects.filter(company_id=company_id, is_hidden=0, journal__is_hidden=0,
                                                  journal__batch__batch_type__in=(
                                                      dict(TRANSACTION_TYPES)['AP Invoice'],
                                                      dict(TRANSACTION_TYPES)['AP Payment'],
                                                      dict(TRANSACTION_TYPES)['AR Invoice'],
                                                      dict(TRANSACTION_TYPES)['AR Receipt']),
                                                  journal__transaction_type__in=('0', '', '2'),
                                                  journal__batch__status=int(STATUS_TYPE_DICT['Posted']),
                                                  is_clear_tax=False).order_by('journal__perd_year', 'journal__perd_month')
    if all_transactions:
        f_year = all_transactions.first().journal.perd_year
        f_month = all_transactions.first().journal.perd_month
        t_year = all_transactions.last().journal.perd_year
        t_month = all_transactions.last().journal.perd_month
    else:
        session_date = request.session['session_date']
        fsc_calendar = FiscalCalendar.objects.filter(company_id=company_id, is_hidden=0, start_date__lte=session_date, end_date__gte=session_date).first()
        fsc_years = FiscalCalendar.objects.filter(company_id=company_id, is_hidden=0).values_list('fiscal_year', flat=True).order_by('fiscal_year').distinct()
        if fsc_calendar:
            f_year = fsc_calendar.fiscal_year
            f_month = fsc_calendar.period
            t_year = fsc_calendar.fiscal_year
            t_month = fsc_calendar.period
            fsc_date = datetime.date(int(f_year), f_month, 1)

    fsc_years = FiscalCalendar.objects.filter(company_id=company_id, is_hidden=0).values_list('fiscal_year', flat=True).order_by('fiscal_year').distinct()

    return render_to_response('tax-tracking-report.html', RequestContext(request, {'date_type': DATE_TYPE,
                                                                                   'document_type': DOCUMENT_TYPES,
                                                                                   'status_type': STATUS_TYPE,
                                                                                   'currency_report_list': CURRENCY_REPORT_LIST,
                                                                                   'tax_authority': tax_authority,
                                                                                   'f_year': f_year,
                                                                                   't_year': t_year,
                                                                                   'f_month': f_month,
                                                                                   't_month': t_month,
                                                                                   'fsc_years': fsc_years}))


@login_required
def batchDetail__asJson(request, batch_id):
    array = []
    obj = {"success": 0, "journals": []}
    try:
        batch = Batch.objects.get(id=batch_id)
        company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
        journal_list = Journal.objects. \
            filter(batch_id=batch.id,
                   status__in=(int(STATUS_TYPE_DICT['Open']),
                               int(STATUS_TYPE_DICT['Posted']),
                               int(STATUS_TYPE_DICT['Prov. Posted']),
                               int(STATUS_TYPE_DICT['Draft'])),
                   company_id=company_id,
                   is_hidden=False). \
            extra(select={'code_number': 'CAST(code AS SIGNED)'}).order_by('code_number'). \
            exclude(journal_type=dict(TRANSACTION_TYPES)['AD']). \
            exclude(journal__reference='REVERSING ENTRY')

        if journal_list.count():
            obj['success'] = 1
            for journal in journal_list:
                source_amt, functional_amt = get_func_source_amt(journal, company_id)
                if int(journal.journal_type) == dict(TRANSACTION_TYPES)['AR Receipt']:
                    document_type_dict = dict(RECEIPT_TRANSACTION_TYPES)
                elif int(journal.journal_type) == dict(TRANSACTION_TYPES)['AP Payment']:
                    document_type_dict = dict(PAYMENT_TRANSACTION_TYPES)
                else:
                    document_type_dict = dict(DOCUMENT_TYPES)
                obj_obj = {}
                obj_obj['code'] = journal.code
                obj_obj['name'] = journal.name
                obj_obj['document_number'] = journal.document_number
                obj_obj['document_date'] = journal.document_date.strftime("%d-%m-%Y")
                if int(journal.journal_type) in (
                        dict(TRANSACTION_TYPES)['AR Receipt'], dict(TRANSACTION_TYPES)['AP Payment']):
                    obj_obj['document_type'] = document_type_dict.get(
                        journal.transaction_type) if journal.transaction_type else ''
                else:
                    obj_obj['document_type'] = document_type_dict.get(
                        journal.document_type) if journal.document_type else ''
                obj_obj['currency'] = journal.currency.code
                obj_obj['invoice_number'] = journal.invoice_number
                obj_obj['reference'] = journal.reference
                obj_obj['account_set'] = journal.account_set.code if journal.account_set else ''
                obj_obj['amount'] = intcomma("%.2f" % round_number(journal.amount))
                obj_obj['tax_amount'] = intcomma("%.2f" % round_number(journal.tax_amount))
                # obj_obj['total_amount'] = intcomma("%.2f" % journal.total_amount)
                if batch.batch_type == dict(TRANSACTION_TYPES)['GL']:
                    obj_obj['total_amount'] = intcomma("%.2f" % round_number(functional_amt))
                else:
                    obj_obj['total_amount'] = intcomma("%.2f" % round_number(source_amt))
                obj_obj['document_amount'] = intcomma("%.2f" % round_number(journal.document_amount))
                obj_obj['exchange_rate'] = intcomma("%.10f" % round_number(journal.exchange_rate, 10))
                obj_obj['source_type'] = journal.source_type
                obj_obj['perd_year'] = journal.perd_year
                obj_obj['perd_month'] = journal.perd_month
                obj_obj['journal_type'] = journal.journal_type
                obj_obj['flag'] = journal.flag
                obj['journals'].append(obj_obj)
            array.append(obj)
    except Exception as e:
        print(e)
        array.append(obj)

    json_content = json.dumps(array, ensure_ascii=False)
    return HttpResponse(json_content, content_type='application/json')


@login_required
def journalDetail__asJson(request, journal_id):
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    company = Company.objects.get(pk=company_id)
    array = []
    obj = {"success": 0, "trx": [], "batch_type": '0'}
    try:
        journal = Journal.objects.get(id=journal_id)
        trx_list = Transaction.objects.filter(is_hidden=0, company_id=company_id, journal__id=journal.id).order_by('id')
        if trx_list.count():
            obj['success'] = 1
            obj['batch_type'] = journal.batch.batch_type
            i = 1
            for trx in trx_list:
                if obj['batch_type'] == dict(TRANSACTION_TYPES)['GL']:
                    total_amount = trx.total_amount
                else:
                    total_amount = trx.amount + trx.tax_amount
                source_debit = total_amount if trx.is_debit_account else 0
                source_credit = total_amount if trx.is_credit_account else 0
                functional_debit = trx.functional_amount if trx.functional_balance_type == BALANCE_TYPE_DICT[
                    'Debit'] else 0
                functional_credit = trx.functional_amount if trx.functional_balance_type == BALANCE_TYPE_DICT[
                    'Credit'] else 0
                obj_obj = {'line': str(i),
                           'reference': trx.reference if trx.reference else '',
                           'description': trx.description if trx.description else '',
                           'account': trx.account.code + ' - ' + trx.account.name if trx.account else '',
                           'currency': trx.currency.code,
                           'source_amount': intcomma("%.2f" % round_number(total_amount)) if trx.currency.is_decimal else intcomma(round_number(total_amount, 0)),
                           'source_debit': intcomma("%.2f" % round_number(source_debit)) if trx.currency.is_decimal else intcomma(round_number(source_debit, 0)),
                           'source_credit': intcomma("%.2f" % round_number(source_credit)) if trx.currency.is_decimal else intcomma(round_number(source_credit, 0)),
                           'exchange_rate': intcomma("%.10f" % round_number(trx.exchange_rate, 10)),
                           'functional_amount': intcomma("%.2f" % round_number(trx.functional_amount)) if company.currency.is_decimal else intcomma(round_number(trx.functional_amount, 0)),
                           'functional_debit': intcomma("%.2f" % round_number(functional_debit)) if company.currency.is_decimal else intcomma(round_number(functional_debit, 0)),
                           'functional_credit': intcomma("%.2f" % round_number(functional_credit)) if company.currency.is_decimal else intcomma(round_number(functional_credit, 0))}
                i += 1
                obj['trx'].append(obj_obj)
            array.append(obj)
    except Exception as e:
        print(e)
        array.append(obj)

    json_content = json.dumps(array, ensure_ascii=False)
    return HttpResponse(json_content, content_type='application/json')


@login_required
def check_batch(request):
    obj = {"result": "0", "status": ""}
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    batch_id = request.POST.get('batch_id')
    try:
        batch = Batch.objects.get(pk=batch_id, company_id=company_id, is_hidden=False)
        if batch:
            journals = Journal.objects.filter(batch_id=batch.id, is_hidden=False)
            if journals:
                for journal in journals:
                    journal.status = int(STATUS_TYPE_DICT['Draft-Checked'])
                    journal.save()
            batch.status = int(STATUS_TYPE_DICT['Draft-Checked'])
            batch.save()
            obj['result'] = "1"
            obj['status'] = dict(STATUS_TYPE).get(str(batch.status))
    except Exception as e:
        print(e)

    json_content = json.dumps(obj, ensure_ascii=False)
    return HttpResponse(json_content, content_type='application/json')


@login_required
def uncheck_batch(request):
    obj = {"result": "0", "status": ""}
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    batch_id = request.POST.get('batch_id')
    try:
        batch = Batch.objects.get(pk=batch_id, company_id=company_id, is_hidden=False)
        if batch:
            journals = Journal.objects.filter(batch_id=batch.id, is_hidden=False)
            if journals:
                for journal in journals:
                    journal.status = int(STATUS_TYPE_DICT['Draft'])
                    journal.save()
            batch.status = int(STATUS_TYPE_DICT['Draft'])
            batch.save()
            obj['result'] = "1"
            obj['status'] = dict(STATUS_TYPE).get(str(batch.status))
    except Exception as e:
        print(e)

    json_content = json.dumps(obj, ensure_ascii=False)
    return HttpResponse(json_content, content_type='application/json')


@login_required
def check_journal(request):
    obj = {"result": "0", "status": "", "uncheck": "1"}
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    journal_id = request.POST.get('journal_id')
    try:
        journal = Journal.objects.get(pk=journal_id, company_id=company_id, is_hidden=False)
        if journal:
            journal.status = int(STATUS_TYPE_DICT['Draft'])
            journal.save()
            uncheck_journal = Journal.objects. \
                filter(batch_id=journal.batch_id, company_id=company_id, is_hidden=False,
                       status=int(STATUS_TYPE_DICT['Draft']))
            if not uncheck_journal:
                obj['uncheck'] = "0"
                batch = Batch.objects.get(pk=journal.batch_id)
                if batch:
                    batch.status = int(STATUS_TYPE_DICT['Draft'])
                    batch.save()
            obj['result'] = "1"
            obj['status'] = dict(STATUS_TYPE).get(str(journal.status))
    except Exception as e:
        print(e)

    json_content = json.dumps(obj, ensure_ascii=False)
    return HttpResponse(json_content, content_type='application/json')


@login_required
def uncheck_journal(request):
    obj = {"result": "0", "status": ""}
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    journal_id = request.POST.get('journal_id')
    try:
        journal = Journal.objects.get(pk=journal_id, company_id=company_id, is_hidden=False)
        if journal:
            journal.status = int(STATUS_TYPE_DICT['Draft'])
            journal.save()
            batch = Batch.objects.get(pk=journal.batch_id)
            if batch:
                batch.status = int(STATUS_TYPE_DICT['Draft'])
                batch.save()
            obj['result'] = "1"
            obj['status'] = dict(STATUS_TYPE).get(str(journal.status))
    except Exception as e:
        print(e)

    json_content = json.dumps(obj, ensure_ascii=False)
    return HttpResponse(json_content, content_type='application/json')


@login_required
def flag_check_journal(request):

    obj = {"result": "0", "status": "", "uncheck": "1"}
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    journal_id = request.POST.get('journal_id')

    try:
        journal = Journal.objects.get(pk=journal_id, company_id=company_id, is_hidden=False)

        if journal:
            journal.flag = FLAG_TYPE_DICT['CHECKED']
            journal.save()

            obj['result'] = "1"
            obj['status'] = dict(FLAG_TYPE)[journal.flag]

    except Exception as e:
        print(e)

    json_content = json.dumps(obj, ensure_ascii=False)

    return HttpResponse(json_content, content_type='application/json')


@login_required
def flag_uncheck_journal(request):
    obj = {"result": "0", "status": ""}
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    journal_id = request.POST.get('journal_id')

    try:
        journal = Journal.objects.get(pk=journal_id, company_id=company_id, is_hidden=False)

        if journal:
            journal.flag = FLAG_TYPE_DICT['UNMARKED']
            journal.save()

            obj['result'] = "1"
            obj['status'] = dict(FLAG_TYPE)[journal.flag]

    except Exception as e:
        print(e)

    json_content = json.dumps(obj, ensure_ascii=False)

    return HttpResponse(json_content, content_type='application/json')


@login_required
def check_fiscal_calendar(request, post_date):
    if post_date:
        post_date = datetime.datetime.strptime(post_date, '%d-%m-%Y')
        company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
        current_month = datetime.datetime.now().month
        current_year = datetime.datetime.now().year
        try:
            p_fsc_calendar = FiscalCalendar.objects.filter(company_id=company_id,
                                                           is_hidden=0, start_date__lte=post_date,
                                                           end_date__gte=post_date).first()
            if p_fsc_calendar:
                post_year = p_fsc_calendar.fiscal_year
                post_month = p_fsc_calendar.period
                fiscal_start_date = p_fsc_calendar.start_date.strftime("%Y-%m-%d")
                fiscal_end_date = p_fsc_calendar.end_date.strftime("%Y-%m-%d")
            else:
                fiscal_start_date = ''
                fiscal_end_date = ''
                post_year = datetime.datetime.now().year
                post_month = datetime.datetime.now().month
        except:
            fiscal_start_date = ''
            fiscal_end_date = ''
            post_year = datetime.datetime.now().year
            post_month = datetime.datetime.now().month

        try:
            c_fsc_calendar = FiscalCalendar.objects.filter(company_id=company_id,
                                                           is_hidden=0, start_date__lte=datetime.datetime.now(),
                                                           end_date__gte=datetime.datetime.now()).first()
            if c_fsc_calendar:
                current_year = c_fsc_calendar.fiscal_year
                current_month = c_fsc_calendar.period
        except Exception as e:
            print(e)

        content = {'fiscal_start_date': fiscal_start_date, 'fiscal_end_date': fiscal_end_date,
                   'fiscal_year': post_year, 'fiscal_month': post_month, 'current_month': current_month,
                   'current_year': current_year}

        json_content = json.dumps(content, ensure_ascii=False)
        return HttpResponse(json_content, content_type='application/json')
    else:
        logger.error(traceback.format_exc())
        return HttpResponseNotFound


@login_required
def fix_journal_year_period(request):
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0

    try:
        open_journals = Journal.objects.filter(company_id=company_id, is_hidden=False, status=STATUS_TYPE_DICT['Open']).exclude(perd_month__in=['14', '15'])
        for journal in open_journals:
            period, year = get_fiscal_year_period(company_id, journal.document_date)
            if period and year:
                journal.perd_month = period
                journal.perd_year = year
                journal.save()
        messages.success(request, 'Journals Fiscal Year-Period update is successfull.')
    except Exception as e:
        print(e)
        messages.error(request, 'ERROR Happend.')
        return render_to_response('page_acc.html', RequestContext(request, {}))

    return render_to_response('page_acc.html', RequestContext(request, {}))



def get_fiscal_year_period(company_id, post_date):
    # post_date = datetime.datetime.strptime(post_date, '%Y-%m-%d')
    try:
        p_fsc_calendar = FiscalCalendar.objects.filter(company_id=company_id,
                                                        is_hidden=0, start_date__lte=post_date,
                                                        end_date__gte=post_date).first()

        post_year = p_fsc_calendar.fiscal_year
        post_month = p_fsc_calendar.period

    except Exception as e:
        print(e)
        post_year = None
        post_month = None

    return post_month, post_year


@csrf_exempt
@login_required
def add_ap_recurring_entry(request, batch_id):
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    try:
        with transactionlib.atomic():
            distribution_code_list = DistributionCode.objects.filter(is_hidden=False, is_active=True,
                                                                     company_id=company_id,
                                                                     type=DIS_CODE_TYPE_DICT['AP Distribution Code'])
            account_list = Account.objects.filter(is_hidden=False, is_active=True, company_id=company_id).order_by('account_segment', 'code')
            tax_list = Tax.objects.filter(is_hidden=False,
                                          company_id=company_id,
                                          tax_group__company_id=company_id,
                                          tax_group__transaction_type=int(TAX_TRX_TYPES_DICT['Purchases']))
            company = Company.objects.get(pk=company_id)

            distribution_code_list_ar = []
            for dist_code_list in distribution_code_list:
                distribution_code_list_obj = {'id': dist_code_list.id,
                                              'code': dist_code_list.code,
                                              'name': dist_code_list.name,
                                              'gl_account_id': dist_code_list.gl_account_id,
                                              'tax_id': None}
                for tax_code in tax_list:
                    if tax_code.distribution_code_id:
                        if tax_code.distribution_code_id == dist_code_list.id:
                            distribution_code_list_obj['tax_id'] = tax_code.id
                            break
                distribution_code_list_ar.append(distribution_code_list_obj)

            entry_list = RecurringEntry.objects.none()
            entry_no = 1
            prev_batch = 0
            next_batch = 0
            prev_journal = 0
            next_journal = 0
            first_journal = 0
            last_journal = 0
            schedule_id = 0
            if batch_id and int(batch_id) > 0:
                Batch_Entry = RecurringBatch.objects.get(pk=batch_id)
                batch_form = RecBatchInfoForm(instance=Batch_Entry)
                entry_list = RecurringEntry.objects.filter(
                    company_id=company_id, is_hidden=0, batch_id=batch_id)
                entry_no = entry_list.count() + 1
                schedule_id = entry_list.first().schedule_id
                prev_journal, next_journal, first_journal, last_journal = get_batch_journals(Batch_Entry.id, None, True)
                prev_batch, next_batch = get_recurring_nearest_batches(company_id, dict(
                    TRANSACTION_TYPES)['AP Invoice'], Batch_Entry.batch_no)
            else:
                Batch_Entry = RecurringBatch()
                batch_form = RecBatchInfoForm()
                prev_batch, next_batch = get_recurring_nearest_batches(company_id, dict(
                    TRANSACTION_TYPES)['AP Invoice'], None)

            if request.method == "POST":
                Batch_Entry = batch_form.save(commit=False)
                if batch_id and int(batch_id) > 0:
                    Batch_Entry.no_entries = entry_list.filter(is_hidden=0).count() + 1
                else:
                    Batch_Entry.batch_no = generate_recurring_batch_number(company_id, dict(TRANSACTION_TYPES)['AP Invoice'])
                    Batch_Entry.status = int(STATUS_TYPE_DICT['Open'])
                    Batch_Entry.company_id = company_id
                    Batch_Entry.description = request.POST.get('description')
                    Batch_Entry.is_hidden = False
                    Batch_Entry.input_type = INPUT_TYPE_DICT['Manual Entry']
                    Batch_Entry.document_type = DOCUMENT_TYPE_DICT['Invoice']
                    Batch_Entry.batch_type = dict(TRANSACTION_TYPES)['AP Invoice']
                    Batch_Entry.no_entries = 1
                    Batch_Entry.batch_amount = 0
                    Batch_Entry.currency_id = company.currency_id
                    Batch_Entry.source_ledger = SOURCE_LEDGER_DICT['Account Payable']
                    Batch_Entry.create_date = datetime.datetime.today()
                Batch_Entry.save()
                batch_id = Batch_Entry.id


                rec_entry = RecurringEntry()
                rec_entry.company_id = company_id
                if request.POST.get('re_code'):
                    rec_entry.code = request.POST.get('re_code')
                else:
                    rec_entry.code = Batch_Entry.no_entries
                rec_entry.re_description = request.POST.get('re_description')
                rec_entry.description = request.POST.get('description')
                rec_entry.name = request.POST.get('name') if request.POST.get('name') else ""
                rec_entry.journal_type = dict(TRANSACTION_TYPES)['AP Invoice']
                rec_entry.posting_date = datetime.datetime.strptime(
                    request.POST.get('posting_date'), '%Y-%m-%d')
                rec_entry.start_date = datetime.datetime.strptime(
                    request.POST.get('start_date'), '%Y-%m-%d')
                # rec_entry.run_date = datetime.date.today() - datetime.timedelta(1)
                rec_entry.run_date = rec_entry.start_date - datetime.timedelta(1)
                rec_entry.maintained_date = datetime.date.today()
                if request.POST.get('is_expire'):
                    rec_entry.is_expire = request.POST.get('is_expire')
                    rec_entry.expire_date = datetime.datetime.strptime(
                        request.POST.get('expire_date'), '%Y-%m-%d')
                else:
                    rec_entry.is_expire = False
                    rec_entry.expire_date = None
                if request.POST.get('is_active'):
                    rec_entry.is_active = request.POST.get('is_active')
                else:
                    rec_entry.is_active = False
                rec_entry.exch_rate_type = 'Current Rate'
                rec_entry.supplier_id = request.POST.get('supplier')
                rec_entry.currency_id = request.POST.get('currency')
                rec_entry.schedule_id = request.POST.get('schedule_id')
                rec_entry.document_type = request.POST.get('document_type')
                rec_entry.document_number = request.POST.get('document_number')
                rec_entry.document_amount = float(request.POST.get('document_amount').replace(',', ''))
                rec_entry.account_set_id = request.POST.get('account_set')
                rec_entry.amount = float(request.POST.get('amount').replace(',', '')) if request.POST.get('amount') else 0.00
                rec_entry.tax_amount = float(request.POST.get('tax_amount').replace(',', '')) if request.POST.get('tax_amount') else 0.00
                rec_entry.total_amount = float(request.POST.get('total_amount').replace(',', '')) if request.POST.get('total_amount') else 0.00
                perd_month, perd_year = get_fiscal_year_period(company_id, rec_entry.run_date)
                if perd_month and perd_year:
                    rec_entry.perd_month = perd_month
                    rec_entry.perd_year = perd_year
                else:
                    rec_entry.perd_month = int(request.POST.get('perd_month'))
                    rec_entry.perd_year = int(request.POST.get('perd_year'))
                if request.POST.get('is_manual_doc'):
                    rec_entry.is_manual_doc = request.POST.get('is_manual_doc')
                else:
                    rec_entry.is_manual_doc = 0
                rec_entry.update_by = request.user.id
                rec_entry.batch_id = Batch_Entry.id
                rec_entry.save()

                if rec_entry.document_type == DOCUMENT_TYPE_DICT['Credit Note']:
                    Batch_Entry.batch_amount = float(Batch_Entry.batch_amount) - float(rec_entry.total_amount)
                else:
                    Batch_Entry.batch_amount = float(Batch_Entry.batch_amount) + float(rec_entry.total_amount)
                Batch_Entry.save()

                # get latest exchange rate
                from_currency = rec_entry.supplier.currency_id
                to_currency = company.currency_id
                if request.POST.get('exchange_rate'):
                    if 'exchange_rate_fk' in request.POST and request.POST.get('exchange_rate_fk'):
                        exchange_rate = ExchangeRate.objects.get(pk=request.POST.get('exchange_rate_fk'))
                        if request.POST.get('exchange_rate') != exchange_rate.rate:
                            rec_entry.exchange_rate = request.POST.get('exchange_rate')
                            rec_entry.exchange_rate_fk_id = None
                            exchange_rate = None
                        else:
                            rec_entry.exchange_rate = exchange_rate.rate
                            rec_entry.exchange_rate_fk_id = exchange_rate.id
                    else:
                        rec_entry.exchange_rate = request.POST.get('exchange_rate')
                        rec_entry.exchange_rate_fk_id = None
                        exchange_rate = None
                else:
                    exchange_rate = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                                from_currency_id=from_currency,
                                                                to_currency_id=to_currency,
                                                                exchange_date__lte=rec_entry.posting_date,
                                                                flag='ACCOUNTING').order_by('exchange_date').last()
                    if not exchange_rate:
                        if from_currency == to_currency:
                            rec_entry.exchange_rate = 1
                            rec_entry.exchange_rate_fk_id = None
                        else:
                            try:
                                transactionlib.rollback()
                            except:
                                pass
                            messages.error(request, NO_EXCHANGE_RATE)
                            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
                    else:
                        rec_entry.exchange_rate = exchange_rate.rate
                        rec_entry.exchange_rate_fk_id = exchange_rate.id
                if 'orig_rate' in request.POST:
                    rec_entry.orig_exch_rate = request.POST.get('orig_rate') if request.POST.get('orig_rate') != '' else rec_entry.exchange_rate
                else:
                    rec_entry.orig_exch_rate = rec_entry.exchange_rate
                rec_entry.save()

                transaction_list = None
                if request.POST['transaction_list_data']:
                    transaction_list = ast.literal_eval(request.POST['transaction_list_data'])
                if transaction_list != None:
                    for transaction in transaction_list:
                        trans = RecurringEntryDetail()
                        trans.rec_entry_id = rec_entry.id
                        trans.description = transaction['description']
                        trans.account_id = transaction['account_id']
                        trans.company_id = company.id
                        trans.distribution_code_id = transaction['distribution_id']
                        trans.currency_id = rec_entry.currency.id
                        if transaction['tax_id'] and transaction['tax_id'] is not '0':
                            trans.tax_id = transaction['tax_id']
                        trans.amount = float(transaction['amount'].replace(',', ''))
                        trans.tax_amount = float(transaction['tax_amount'].replace(',', ''))
                        trans.total_amount = float(transaction['total_amount'].replace(',', ''))
                        trans.is_debit_account = (True, False)[rec_entry.document_type == DOCUMENT_TYPE_DICT['Credit Note']]
                        trans.is_credit_account = (False, True)[rec_entry.document_type == DOCUMENT_TYPE_DICT['Credit Note']]
                        trans.is_tax_include = int(transaction['is_tax_include']) if transaction['is_tax_include'] else 0
                        trans.is_tax_transaction = int(transaction['is_tax_transaction']) if transaction['is_tax_transaction'] else 0
                        trans.is_manual_tax_input = int(transaction['is_manual_tax_input']) if transaction['is_manual_tax_input'] else 0
                        # trans.remark = transaction['description']
                        trans.is_hidden = False
                        trans.create_date = datetime.datetime.today()
                        trans.update_date = datetime.datetime.today()
                        trans.update_by = request.user.id
                        id_invoice_apply = request.POST['id_related_invoice']
                        if id_invoice_apply:
                            id_invoice_apply = int(id_invoice_apply)
                            journal_id_related = Journal.objects.get(pk=id_invoice_apply)
                            trans.related_invoice = journal_id_related
                        if rec_entry.exch_rate:
                            trans.exch_rate_id = rec_entry.exch_rate.id
                            trans.exchange_rate = rec_entry.exch_rate.rate
                            trans.functional_currency_id = company.currency_id
                            trans.exch_rate_date = rec_entry.exch_rate.exchange_date
                            trans.functional_amount = trans.total_amount * float(rec_entry.exch_rate.rate)
                        else:
                            trans.exchange_rate = rec_entry.exchange_rate
                            trans.functional_currency_id = company.currency_id
                            trans.exch_rate_date = rec_entry.posting_date
                            trans.functional_amount = trans.total_amount * float(rec_entry.exchange_rate)
                        trans.functional_balance_type = (BALANCE_TYPE_DICT['Credit'],
                                                         BALANCE_TYPE_DICT['Debit'])[trans.is_debit_account]
                        trans.save()

                messages.success(request, 'AP Invoice Recurring Entry is created')
                return redirect('/accounting/add/AP-RE/' + str(batch_id) + '/')

            form = APInvoiceREForm(company_id=company_id)
            # journal_list = Journal.objects.none()
            if batch_id and int(batch_id) > 0:
                batch = RecurringBatch.objects.get(pk=batch_id)
                batch_form = BatchInfoForm(instance=batch)
                # journal_list = Journal.objects.filter(company_id=company_id, is_hidden=0, batch_id=batch_id)
            else:
                batch = RecurringBatch()
                batch_form = RecBatchInfoForm()
        schedule_list = Schedule.objects.filter(company_id=company_id, is_hidden=False)
        form.initial = {'code': entry_no}
        context = {'form': form, 'batch_form': batch_form, 'distribution_code_list': distribution_code_list_ar,
                   'account_list': account_list, 'tax_list': tax_list, 'batch': batch, 'batch_id': batch_id,
                   'company_currency': company.currency_id, 'is_rec_entry': True, 'schedule_list': schedule_list,
                   'next_journal': next_journal, 'prev_journal': prev_journal, 'first_journal': first_journal, 
                   'last_journal': last_journal, 'next_batch': next_batch, 'prev_batch': prev_batch, 
                   'entry_no': entry_no, 'schedule_id': schedule_id}
        return render(request, 'AP_entry.html', context)
        # end atomic
    # end try
    except Exception as e:
        print(EXCEPTION_JOURNAL_ADD % ('AP RE Invoice'), e)
        logging.error(traceback.format_exc())
        messages.error(request, EXCEPTION_JOURNAL_ADD % ('AP RE Invoice'))
        return redirect('/accounting/rec_batch_list/2/')


@csrf_exempt
@login_required
def edit_ap_recurring_entry(request, id):
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    try:
        with transactionlib.atomic():
            distribution_code_list = DistributionCode.objects.filter(is_hidden=False, is_active=True,
                                                                     company_id=company_id,
                                                                     type=DIS_CODE_TYPE_DICT['AP Distribution Code'])
            account_list = Account.objects.filter(is_hidden=False, is_active=True, company_id=company_id).order_by('account_segment', 'code')
            tax_list = Tax.objects.filter(is_hidden=False,
                                          company_id=company_id,
                                          tax_group__company_id=company_id,
                                          tax_group__transaction_type=int(TAX_TRX_TYPES_DICT['Purchases']))
            company = Company.objects.get(pk=company_id)

            distribution_code_list_ar = []
            for dist_code_list in distribution_code_list:
                distribution_code_list_obj = {'id': dist_code_list.id,
                                              'code': dist_code_list.code,
                                              'name': dist_code_list.name,
                                              'gl_account_id': dist_code_list.gl_account_id,
                                              'tax_id': None}
                for tax_code in tax_list:
                    if tax_code.distribution_code_id:
                        if tax_code.distribution_code_id == dist_code_list.id:
                            distribution_code_list_obj['tax_id'] = tax_code.id
                            break
                distribution_code_list_ar.append(distribution_code_list_obj)
            
            rec_entry = RecurringEntry.objects.get(pk=id)
            batch_id = None
            prev_batch = 0
            next_batch = 0
            prev_journal = 0
            next_journal = 0
            first_journal = 0
            last_journal = 0
            if rec_entry and rec_entry.batch:
                batch_id = rec_entry.batch_id
                batch = RecurringBatch.objects.get(pk=rec_entry.batch_id)
                batch_form = RecBatchInfoForm(instance=batch)
                prev_journal, next_journal, first_journal, last_journal = get_batch_journals(
                    batch.id, rec_entry, True)
                prev_batch, next_batch = get_recurring_nearest_batches(company_id, dict(
                    TRANSACTION_TYPES)['AP Invoice'], batch.batch_no)
            else:
                batch = RecurringBatch()
                batch_form = RecBatchInfoForm()
                prev_batch, next_batch = get_recurring_nearest_batches(company_id, dict(
                    TRANSACTION_TYPES)['AP Invoice'], None)

            if request.method == 'GET':
                transaction_list = RecurringEntryDetail.objects.filter(is_hidden=0, company_id=company_id, rec_entry_id=id)
                id_inv = ''
                inv_name = ''
                for trx in transaction_list:
                    if trx.related_invoice:
                        id_inv = trx.related_invoice.id
                        inv_name = trx.related_invoice.document_number

                rec_entry.start_date = datetime.datetime.strftime(rec_entry.start_date, '%d-%m-%Y') if rec_entry.start_date else ''
                rec_entry.expire_date = datetime.datetime.strftime(rec_entry.expire_date, '%d-%m-%Y') if rec_entry.expire_date else ''
                rec_entry.run_date = datetime.datetime.strftime(rec_entry.run_date, '%d-%m-%Y') if rec_entry.run_date else ''
                rec_entry.maintained_date = datetime.datetime.strftime(rec_entry.maintained_date, '%d-%m-%Y') if rec_entry.maintained_date else ''
                form = APInvoiceREForm(id, instance=rec_entry, company_id=company_id)

                schedule_list = Schedule.objects.filter(company_id=company_id, is_hidden=False)

                context = {
                    'form': form, 'batch_form': batch_form, 'distribution_code_list': distribution_code_list_ar,
                    'account_list': account_list, 'tax_list': tax_list, 'batch': batch, 'batch_id': batch_id,
                    'rec_entry': rec_entry, 'is_rec_entry': True, 'id_inv': id_inv, 'inv_name': inv_name,
                    'company_currency': company.currency_id, 'schedule_list': schedule_list, 'transaction_list': transaction_list,
                    'next_journal': next_journal, 'prev_journal': prev_journal, 'first_journal': first_journal, 
                    'last_journal': last_journal, 'next_batch': next_batch, 'prev_batch': prev_batch
                }
                return render(request, 'AP_entry.html', context)

            elif request.method == "POST":
                rec_entry = RecurringEntry.objects.get(pk=id)
                rec_entry.company_id = company_id
                rec_entry.code = request.POST.get('re_code')
                rec_entry.re_description = request.POST.get('re_description')
                rec_entry.description = request.POST.get('description')
                rec_entry.name = request.POST.get('name') if request.POST.get('name') else ""
                rec_entry.posting_date = datetime.datetime.strptime(
                    request.POST.get('posting_date'), '%Y-%m-%d')
                rec_entry.start_date = datetime.datetime.strptime(
                    request.POST.get('start_date'), '%Y-%m-%d')
                rec_entry.run_date = rec_entry.start_date - datetime.timedelta(1)
                rec_entry.maintained_date = datetime.date.today()
                if request.POST.get('is_expire'):
                    rec_entry.is_expire = request.POST.get('is_expire')
                    rec_entry.expire_date = datetime.datetime.strptime(
                        request.POST.get('expire_date'), '%Y-%m-%d')
                else:
                    rec_entry.is_expire = False
                    rec_entry.expire_date = None
                if request.POST.get('is_active'):
                    rec_entry.is_active = request.POST.get('is_active')
                else:
                    rec_entry.is_active = False
                rec_entry.exch_rate_type = 'Current Rate'
                rec_entry.currency_id = request.POST.get('currency')
                rec_entry.schedule_id = request.POST.get('schedule_id')
                rec_entry.document_type = request.POST.get('document_type')
                rec_entry.document_number = request.POST.get('document_number')
                rec_entry.document_amount = float(request.POST.get('document_amount').replace(',', ''))
                rec_entry.supplier_id = request.POST.get('supplier')
                rec_entry.account_set_id = request.POST.get('account_set')
                rec_entry.amount = float(request.POST.get('amount').replace(',', '')) if request.POST.get('amount') else 0.00
                rec_entry.tax_amount = float(request.POST.get('tax_amount').replace(',', '')) if request.POST.get('tax_amount') else 0.00
                rec_entry.total_amount = float(request.POST.get('total_amount').replace(',', '')) if request.POST.get('total_amount') else 0.00
                perd_month, perd_year = get_fiscal_year_period(company_id, rec_entry.run_date)
                if perd_month and perd_year:
                    rec_entry.perd_month = perd_month
                    rec_entry.perd_year = perd_year
                else:
                    rec_entry.perd_month = int(request.POST.get('perd_month'))
                    rec_entry.perd_year = int(request.POST.get('perd_year'))
                if request.POST.get('is_manual_doc'):
                    rec_entry.is_manual_doc = request.POST.get('is_manual_doc')
                else:
                    rec_entry.is_manual_doc = 0
                rec_entry.update_by = request.user.id
                rec_entry.save()
                # get latest exchange rate
                from_currency = rec_entry.supplier.currency_id
                to_currency = company.currency_id
                if request.POST.get('exchange_rate'):
                    if 'exchange_rate_fk' in request.POST and request.POST.get('exchange_rate_fk'):
                        exchange_rate = ExchangeRate.objects.get(pk=request.POST.get('exchange_rate_fk'))
                        if request.POST.get('exchange_rate') != exchange_rate.rate:
                            rec_entry.exchange_rate = request.POST.get('exchange_rate')
                            rec_entry.exchange_rate_fk_id = None
                            exchange_rate = None
                        else:
                            rec_entry.exchange_rate = exchange_rate.rate
                            rec_entry.exchange_rate_fk_id = exchange_rate.id
                    else:
                        rec_entry.exchange_rate = request.POST.get('exchange_rate')
                        rec_entry.exchange_rate_fk_id = None
                        exchange_rate = None
                else:
                    exchange_rate = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                                from_currency_id=from_currency,
                                                                to_currency_id=to_currency,
                                                                exchange_date__lte=rec_entry.posting_date,
                                                                flag='ACCOUNTING').order_by('exchange_date').last()
                    if not exchange_rate:
                        if from_currency == to_currency:
                            rec_entry.exchange_rate = 1
                            rec_entry.exchange_rate_fk_id = None
                        else:
                            try:
                                transactionlib.rollback()
                            except:
                                pass
                            messages.error(request, NO_EXCHANGE_RATE)
                            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
                    else:
                        rec_entry.exchange_rate = exchange_rate.rate
                        rec_entry.exchange_rate_fk_id = exchange_rate.id
                if 'orig_rate' in request.POST:
                    rec_entry.orig_exch_rate = request.POST.get('orig_rate') if request.POST.get('orig_rate') != '' else rec_entry.exchange_rate
                else:
                    rec_entry.orig_exch_rate = rec_entry.exchange_rate
                rec_entry.save()

                Batch_Entry = batch_form.save(commit=False)
                batch_id = rec_entry.batch_id
                entry_list = RecurringEntry.objects.filter(batch_id=Batch_Entry.id)
                Batch_Entry.batch_amount = 0
                for entry in entry_list:
                    if entry.id != rec_entry.id:
                        entry.schedule_id = rec_entry.schedule_id
                        entry.re_description = rec_entry.re_description
                        entry.is_expire = rec_entry.is_expire
                        entry.expire_date = rec_entry.expire_date
                        entry.maintained_date = rec_entry.maintained_date
                        entry.start_date = rec_entry.start_date
                        entry.is_active = rec_entry.is_active
                        entry.save()
                    if entry.document_type == DOCUMENT_TYPE_DICT['Credit Note']:
                        Batch_Entry.batch_amount = float(Batch_Entry.batch_amount) - float(entry.total_amount)
                    else:
                        Batch_Entry.batch_amount = float(Batch_Entry.batch_amount) + float(entry.total_amount)
                Batch_Entry.save()

                rec_entry_detail_list = RecurringEntryDetail.objects.filter(rec_entry_id=rec_entry.id)
                if rec_entry_detail_list:
                    for row in rec_entry_detail_list:
                        row.delete()

                transaction_list = None
                if request.POST['transaction_list_data']:
                    transaction_list = ast.literal_eval(request.POST['transaction_list_data'])
                if transaction_list != None:
                    for transaction in transaction_list:
                        trans = RecurringEntryDetail()
                        trans.rec_entry_id = rec_entry.id
                        trans.description = transaction['description']
                        trans.account_id = transaction['account_id']
                        trans.company_id = company.id
                        trans.distribution_code_id = transaction['distribution_id']
                        trans.currency_id = rec_entry.currency.id
                        if transaction['tax_id'] and transaction['tax_id'] is not '0':
                            trans.tax_id = transaction['tax_id']
                        trans.amount = float(transaction['amount'].replace(',', ''))
                        trans.tax_amount = float(transaction['tax_amount'].replace(',', ''))
                        trans.total_amount = float(transaction['total_amount'].replace(',', ''))
                        trans.is_debit_account = (True, False)[rec_entry.document_type == DOCUMENT_TYPE_DICT['Credit Note']]
                        trans.is_credit_account = (False, True)[rec_entry.document_type == DOCUMENT_TYPE_DICT['Credit Note']]
                        trans.is_tax_include = int(transaction['is_tax_include']) if transaction['is_tax_include'] else 0
                        trans.is_tax_transaction = int(transaction['is_tax_transaction']) if transaction['is_tax_transaction'] else 0
                        trans.is_manual_tax_input = int(transaction['is_manual_tax_input']) if transaction['is_manual_tax_input'] else 0
                        # trans.remark = transaction['description']
                        trans.is_hidden = False
                        trans.create_date = datetime.datetime.today()
                        trans.update_date = datetime.datetime.today()
                        trans.update_by = request.user.id
                        id_invoice_apply = request.POST['id_related_invoice']
                        if id_invoice_apply:
                            id_invoice_apply = int(id_invoice_apply)
                            journal_id_related = Journal.objects.get(pk=id_invoice_apply)
                            trans.related_invoice = journal_id_related
                        if rec_entry.exch_rate:
                            trans.exch_rate_id = rec_entry.exch_rate.id
                            trans.exchange_rate = rec_entry.exch_rate.rate
                            trans.functional_currency_id = company.currency_id
                            trans.exch_rate_date = rec_entry.exch_rate.exchange_date
                            trans.functional_amount = trans.total_amount * float(rec_entry.exch_rate.rate)
                        else:
                            trans.exchange_rate = rec_entry.exchange_rate
                            trans.functional_currency_id = company.currency_id
                            trans.exch_rate_date = rec_entry.posting_date
                            trans.functional_amount = trans.total_amount * float(rec_entry.exchange_rate)
                        trans.functional_balance_type = (BALANCE_TYPE_DICT['Credit'],
                                                         BALANCE_TYPE_DICT['Debit'])[trans.is_debit_account]
                        trans.save()

                messages.success(request, 'AP Invoice Recurring Entry is updated')
                return redirect('/accounting/rec_batch_list/2/')

            form = APInvoiceInfoForm(company_id=company_id)
            # journal_list = Journal.objects.none()
            # batch_id = None
            # if batch_id and int(batch_id) > 0:
            #     batch = Batch.objects.get(pk=batch_id)
            #     batch_form = BatchInfoForm(instance=batch)
            #     # journal_list = Journal.objects.filter(company_id=company_id, is_hidden=0, batch_id=batch_id)
            # else:
            #     batch = Batch()
            #     batch_form = BatchInfoForm()
        schedule_list = Schedule.objects.filter(company_id=company_id, is_hidden=False)
        context = {'form': form, 'batch_form': batch_form, 'distribution_code_list': distribution_code_list_ar,
                   'account_list': account_list, 'tax_list': tax_list, 'batch': batch, 'batch_id': batch_id,
                   'company_currency': company.currency_id, 'is_rec_entry': True, 'schedule_list': schedule_list,
                   'next_journal': next_journal, 'prev_journal': prev_journal, 'first_journal': first_journal,
                   'last_journal': last_journal, 'next_batch': next_batch, 'prev_batch': prev_batch}
        return render(request, 'AP_entry.html', context)
        # end atomic
    # end try
    except Exception as e:
        print(EXCEPTION_JOURNAL_ADD % ('AP RE Invoice'), e)
        logging.error(traceback.format_exc())
        messages.error(request, EXCEPTION_JOURNAL_ADD % ('AP RE Invoice'))
        return redirect('/accounting/rec_batch_list/2/')


@csrf_exempt
@login_required
def add_ar_recurring_entry(request, batch_id):
    try:
        with transactionlib.atomic():
            company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
            distribution_code_list = DistributionCode.objects.filter(is_hidden=False, is_active=True, company_id=company_id,
                                                                    type=DIS_CODE_TYPE_DICT['AR Distribution Code'])
            account_list = Account.objects.filter(is_hidden=False, is_active=True, company_id=company_id).order_by('account_segment', 'code')
            tax_list = Tax.objects.filter(
                is_hidden=False,
                company_id=company_id,
                tax_group__company_id=company_id,
                tax_group__transaction_type=int(TAX_TRX_TYPES_DICT['Sales'])
            )

            company = Company.objects.get(pk=company_id)
            distribution_code_list_ar = []
            for dist_code_list in distribution_code_list:
                distribution_code_list_obj = {'id': dist_code_list.id,
                                            'code': dist_code_list.code,
                                            'name': dist_code_list.name,
                                            'gl_account_id': dist_code_list.gl_account_id,
                                            'tax_id': None}
                for tax_code in tax_list:
                    if tax_code.distribution_code_id:
                        if tax_code.distribution_code_id == dist_code_list.id:
                            distribution_code_list_obj['tax_id'] = tax_code.id
                            break
                distribution_code_list_ar.append(distribution_code_list_obj)

            form = ARInvoiceREForm(company_id=company_id)
            entry_list = RecurringEntry.objects.none()
            entry_no = 1
            prev_batch = 0
            next_batch = 0
            prev_journal = 0
            next_journal = 0
            first_journal = 0
            last_journal = 0
            schedule_id = 0
            if batch_id and int(batch_id) > 0:
                Batch_Entry = RecurringBatch.objects.get(pk=batch_id)
                batch_form = RecBatchInfoForm(instance=Batch_Entry)
                entry_list = RecurringEntry.objects.filter(
                    company_id=company_id, is_hidden=0, batch_id=batch_id)
                entry_no = entry_list.count() + 1
                schedule_id = entry_list.first().schedule_id
                prev_journal, next_journal, first_journal, last_journal = get_batch_journals(Batch_Entry.id, None, True)
                prev_batch, next_batch = get_recurring_nearest_batches(company_id, dict(
                    TRANSACTION_TYPES)['AR Invoice'], Batch_Entry.batch_no)
            else:
                Batch_Entry = RecurringBatch()
                batch_form = RecBatchInfoForm()
                prev_batch, next_batch = get_recurring_nearest_batches(company_id, dict(
                    TRANSACTION_TYPES)['AR Invoice'], None)

            if request.method == "POST":
                Batch_Entry = batch_form.save(commit=False)
                if batch_id and int(batch_id) > 0:
                    Batch_Entry.no_entries = entry_list.filter(is_hidden=0).count() + 1
                else:
                    Batch_Entry.batch_no = generate_recurring_batch_number(
                        company_id, dict(TRANSACTION_TYPES)['AR Invoice'])
                    Batch_Entry.status = int(STATUS_TYPE_DICT['Open'])
                    Batch_Entry.company_id = company_id
                    Batch_Entry.description = request.POST.get('description')
                    Batch_Entry.is_hidden = False
                    Batch_Entry.input_type = INPUT_TYPE_DICT['Manual Entry']
                    Batch_Entry.document_type = DOCUMENT_TYPE_DICT['Invoice']
                    Batch_Entry.batch_type = dict(TRANSACTION_TYPES)['AR Invoice']
                    Batch_Entry.no_entries = 1
                    Batch_Entry.batch_amount = 0
                    Batch_Entry.currency_id = company.currency_id
                    Batch_Entry.source_ledger = SOURCE_LEDGER_DICT['Account Receivable']
                    Batch_Entry.create_date = datetime.datetime.today()
                Batch_Entry.save()
                batch_id = Batch_Entry.id

                rec_entry = RecurringEntry()
                rec_entry.company_id = company_id
                rec_entry.customer_id = request.POST.get('customer')
                if request.POST.get('re_code'):
                    rec_entry.code = request.POST.get('re_code')
                else:
                    rec_entry.code = Batch_Entry.no_entries
                rec_entry.re_description = request.POST.get('re_description')
                rec_entry.description = request.POST.get('description')
                rec_entry.name = request.POST.get('name') if request.POST.get('name') else ""
                rec_entry.journal_type = dict(TRANSACTION_TYPES)['AR Invoice']
                rec_entry.posting_date = datetime.datetime.strptime(
                    request.POST.get('posting_date'), '%Y-%m-%d')
                rec_entry.start_date = datetime.datetime.strptime(
                    request.POST.get('start_date'), '%Y-%m-%d')
                rec_entry.run_date = rec_entry.start_date - datetime.timedelta(1)
                rec_entry.maintained_date = datetime.date.today()
                if request.POST.get('is_expire'):
                    rec_entry.is_expire = request.POST.get('is_expire')
                    rec_entry.expire_date = datetime.datetime.strptime(
                        request.POST.get('expire_date'), '%Y-%m-%d')
                else:
                    rec_entry.is_expire = False
                    rec_entry.expire_date = None
                if request.POST.get('is_active'):
                    rec_entry.is_active = request.POST.get('is_active')
                else:
                    rec_entry.is_active = False
                rec_entry.exch_rate_type = 'Current Rate'
                from_currency = rec_entry.customer.currency_id
                to_currency = company.currency_id
                if request.POST.get('exchange_rate'):
                    if 'exchange_rate_fk' in request.POST and request.POST.get('exchange_rate_fk'):
                        exchange_rate = ExchangeRate.objects.get(pk=request.POST.get('exchange_rate_fk'))
                        if request.POST.get('exchange_rate') != exchange_rate.rate:
                            rec_entry.exchange_rate = request.POST.get('exchange_rate')
                            rec_entry.exchange_rate_fk_id = None
                            exchange_rate = None
                        else:
                            rec_entry.exchange_rate = exchange_rate.rate
                            rec_entry.exchange_rate_fk_id = exchange_rate.id
                    else:
                        rec_entry.exchange_rate = request.POST.get('exchange_rate')
                        rec_entry.exchange_rate_fk_id = None
                        exchange_rate = None
                else:
                    exchange_rate = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                                from_currency_id=from_currency,
                                                                to_currency_id=to_currency,
                                                                exchange_date__lte=rec_entry.posting_date,
                                                                flag='ACCOUNTING').order_by('exchange_date').last()
                    if not exchange_rate:
                        if from_currency == to_currency:
                            rec_entry.exchange_rate = 1
                            rec_entry.exchange_rate_fk_id = None
                        else:
                            try:
                                transactionlib.rollback()
                            except:
                                pass
                            messages.error(request, NO_EXCHANGE_RATE)
                            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
                    else:
                        rec_entry.exchange_rate = exchange_rate.rate
                        rec_entry.exchange_rate_fk_id = exchange_rate.id
                rec_entry.orig_exch_rate = request.POST.get('orig_rate') if request.POST.get('orig_rate') != '' else rec_entry.exchange_rate
                rec_entry.orig_exch_rate_fk_id = request.POST.get('orig_rate_pk') \
                    if request.POST.get('orig_rate_pk') != '' else request.POST.get('exchange_rate_fk')
                rec_entry.currency_id = request.POST.get('currency')
                rec_entry.schedule_id = request.POST.get('schedule_id')
                rec_entry.document_type = request.POST.get('document_type')
                rec_entry.document_number = request.POST.get('document_number')
                rec_entry.document_amount = float(request.POST.get('document_amount').replace(',', ''))
                rec_entry.account_set_id = request.POST.get('account_set')
                rec_entry.amount = float(request.POST.get('amount').replace(',', '')) if request.POST.get('amount') else 0.00
                rec_entry.tax_amount = float(request.POST.get('tax_amount').replace(',', '')) if request.POST.get('tax_amount') else 0.00
                rec_entry.total_amount = float(request.POST.get('total_amount').replace(',', '')) if request.POST.get('total_amount') else 0.00
                perd_month, perd_year = get_fiscal_year_period(company_id, rec_entry.run_date)
                if perd_month and perd_year:
                    rec_entry.perd_month = perd_month
                    rec_entry.perd_year = perd_year
                else:
                    rec_entry.perd_month = int(request.POST.get('perd_month'))
                    rec_entry.perd_year = int(request.POST.get('perd_year'))
                if request.POST.get('is_manual_doc'):
                    rec_entry.is_manual_doc = request.POST.get('is_manual_doc')
                else:
                    rec_entry.is_manual_doc = 0
                rec_entry.update_by = request.user.id
                rec_entry.batch = Batch_Entry
                rec_entry.save()

                if rec_entry.document_type == DOCUMENT_TYPE_DICT['Credit Note']:
                    Batch_Entry.batch_amount = float(Batch_Entry.batch_amount) - float(rec_entry.total_amount)
                else:
                    Batch_Entry.batch_amount = float(Batch_Entry.batch_amount) + float(rec_entry.total_amount)
                Batch_Entry.save()

                transaction_list = None
                if request.POST['transaction_list_data']:
                    transaction_list = ast.literal_eval(request.POST['transaction_list_data'])
                if transaction_list != None:
                    for transaction in transaction_list:
                        trans = RecurringEntryDetail()
                        trans.rec_entry_id = rec_entry.id
                        trans.description = transaction['description']
                        trans.account_id = transaction['account_id']
                        trans.company_id = company.id
                        trans.distribution_code_id = transaction['distribution_id']
                        trans.currency_id = rec_entry.currency.id
                        if transaction['tax_id'] and transaction['tax_id'] is not '0':
                            trans.tax_id = transaction['tax_id']
                        trans.amount = float(transaction['amount'].replace(',', ''))
                        trans.tax_amount = float(transaction['tax_amount'].replace(',', ''))
                        trans.total_amount = float(transaction['total_amount'].replace(',', ''))
                        trans.is_debit_account = (True, False)[rec_entry.document_type == DOCUMENT_TYPE_DICT['Credit Note']]
                        trans.is_credit_account = (False, True)[rec_entry.document_type == DOCUMENT_TYPE_DICT['Credit Note']]
                        trans.is_tax_include = int(transaction['is_tax_included']) if transaction['is_tax_included'] else 0
                        trans.is_tax_transaction = int(transaction['is_tax_transaction']) if transaction['is_tax_transaction'] else 0
                        trans.is_manual_tax_input = int(transaction['is_manual_tax_input']) if transaction['is_manual_tax_input'] else 0
                        # trans.remark = transaction['description']
                        trans.is_hidden = False
                        trans.create_date = datetime.datetime.today()
                        trans.update_date = datetime.datetime.today()
                        trans.update_by = request.user.id
                        id_invoice_apply = request.POST['id_related_invoice']
                        if id_invoice_apply:
                            id_invoice_apply = int(id_invoice_apply)
                            journal_id_related = Journal.objects.get(pk=id_invoice_apply)
                            trans.related_invoice = journal_id_related
                        trans.exchange_rate = rec_entry.exchange_rate
                        trans.functional_currency_id = company.currency_id
                        trans.functional_amount = float(trans.total_amount) * float(rec_entry.exchange_rate)
                        if exchange_rate:
                            trans.exch_rate_date = exchange_rate.exchange_date
                        else:
                            trans.exch_rate_date = rec_entry.posting_date
                        trans.transaction_date = rec_entry.posting_date
                        trans.functional_balance_type = (BALANCE_TYPE_DICT['Credit'],
                                                        BALANCE_TYPE_DICT['Debit'])[trans.is_debit_account]
                        trans.save()

                messages.success(request, 'AR Invoice Recurring Entry is created')
                return redirect('/accounting/add/AR-RE/' + str(batch_id) + '/')

            if batch_id and int(batch_id) > 0:
                batch = RecurringBatch.objects.get(pk=batch_id)
                if not batch.currency.is_decimal:
                    batch.batch_amount = round_number(batch.batch_amount)
                batch_form = RecBatchInfoForm(instance=batch)
            else:
                batch = RecurringBatch()
                batch_form = RecBatchInfoForm()
            schedule_list = Schedule.objects.filter(company_id=company_id, is_hidden=False)
            form.initial = {'code': entry_no}
            context = {'form': form, 'batch_form': batch_form, 'distribution_code_list': distribution_code_list_ar,
                    'account_list': account_list, 'tax_list': tax_list, 'batch': batch, 'batch_id': batch_id,
                    'company_currency': company.currency_id, 'is_rec_entry': True, 'schedule_list': schedule_list,
                    'next_journal': next_journal, 'prev_journal': prev_journal, 'first_journal': first_journal, 
                    'last_journal': last_journal, 'next_batch': next_batch, 'prev_batch': prev_batch, 
                       'entry_no': entry_no, 'schedule_id': schedule_id}
            return render(request, 'AR_entry.html', context)
    # end try
    except Exception as e:
        print(EXCEPTION_JOURNAL_ADD % ('AR RE Invoice'), e)
        logging.error(traceback.format_exc())
        messages.error(request, EXCEPTION_JOURNAL_ADD % ('AR RE Invoice'))
        return redirect('/accounting/rec_batch_list/1/')


@csrf_exempt
@login_required
def edit_ar_recurring_entry(request, id):
    try:
        with transactionlib.atomic():
            company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
            distribution_code_list = DistributionCode.objects.filter(is_hidden=False, is_active=True, company_id=company_id,
                                                                    type=DIS_CODE_TYPE_DICT['AR Distribution Code'])
            account_list = Account.objects.filter(is_hidden=False, is_active=True, company_id=company_id).order_by('account_segment', 'code')
            tax_list = Tax.objects.filter(
                is_hidden=False,
                company_id=company_id,
                tax_group__company_id=company_id,
                tax_group__transaction_type=int(TAX_TRX_TYPES_DICT['Sales'])
            )

            company = Company.objects.get(pk=company_id)
            distribution_code_list_ar = []
            for dist_code_list in distribution_code_list:
                distribution_code_list_obj = {'id': dist_code_list.id,
                                            'code': dist_code_list.code,
                                            'name': dist_code_list.name,
                                            'gl_account_id': dist_code_list.gl_account_id,
                                            'tax_id': None}
                for tax_code in tax_list:
                    if tax_code.distribution_code_id:
                        if tax_code.distribution_code_id == dist_code_list.id:
                            distribution_code_list_obj['tax_id'] = tax_code.id
                            break
                distribution_code_list_ar.append(distribution_code_list_obj)

            rec_entry = RecurringEntry.objects.get(pk=id)
            batch_id = None
            prev_batch = 0
            next_batch = 0
            prev_journal = 0
            next_journal = 0
            first_journal = 0
            last_journal = 0
            if rec_entry and rec_entry.batch:
                batch_id = rec_entry.batch_id
                batch = RecurringBatch.objects.get(pk=rec_entry.batch_id)
                batch_form = RecBatchInfoForm(instance=batch)
                prev_journal, next_journal, first_journal, last_journal = get_batch_journals(
                    batch.id, rec_entry, True)
                prev_batch, next_batch = get_recurring_nearest_batches(company_id, dict(
                    TRANSACTION_TYPES)['AR Invoice'], batch.batch_no)
            else:
                batch = RecurringBatch()
                batch_form = RecBatchInfoForm()
                prev_batch, next_batch = get_recurring_nearest_batches(company_id, dict(
                    TRANSACTION_TYPES)['AR Invoice'], None)

            if request.method == 'GET':
                transaction_list = RecurringEntryDetail.objects.filter(is_hidden=0, company_id=company_id, rec_entry_id=id)
                id_inv = ''
                inv_name = ''
                for trx in transaction_list:
                    if trx.related_invoice:
                        id_inv = trx.related_invoice.id
                        inv_name = trx.related_invoice.document_number

                rec_entry.start_date = datetime.datetime.strftime(rec_entry.start_date, '%d-%m-%Y') if rec_entry.start_date else ''
                rec_entry.expire_date = datetime.datetime.strftime(rec_entry.expire_date, '%d-%m-%Y') if rec_entry.expire_date else ''
                rec_entry.run_date = datetime.datetime.strftime(rec_entry.run_date, '%d-%m-%Y') if rec_entry.run_date else ''
                rec_entry.maintained_date = datetime.datetime.strftime(rec_entry.maintained_date, '%d-%m-%Y') if rec_entry.maintained_date else ''
                form = ARInvoiceREForm(id, instance=rec_entry, company_id=company_id)

                schedule_list = Schedule.objects.filter(company_id=company_id, is_hidden=False)

                context = {
                    'form': form, 'batch_form': batch_form, 'distribution_code_list': distribution_code_list_ar,
                    'account_list': account_list, 'tax_list': tax_list, 'batch': batch, 'batch_id': batch_id,
                    'rec_entry': rec_entry, 'is_rec_entry': True, 'id_inv': id_inv, 'inv_name': inv_name,
                    'company_currency': company.currency_id, 'schedule_list': schedule_list, 'transactions': transaction_list,
                    'next_journal': next_journal, 'prev_journal': prev_journal, 'first_journal': first_journal, 
                    'last_journal': last_journal, 'next_batch': next_batch, 'prev_batch': prev_batch
                }
                return render(request, 'AR_entry.html', context)

            elif request.method == "POST":
                rec_entry = RecurringEntry.objects.get(pk=id)
                rec_entry.company_id = company_id
                rec_entry.customer_id = request.POST.get('customer')
                rec_entry.code = request.POST.get('re_code')
                rec_entry.re_description = request.POST.get('re_description')
                rec_entry.description = request.POST.get('description')
                rec_entry.name = request.POST.get('name') if request.POST.get('name') else ""
                rec_entry.posting_date = datetime.datetime.strptime(
                    request.POST.get('posting_date'), '%Y-%m-%d')
                rec_entry.start_date = datetime.datetime.strptime(
                    request.POST.get('start_date'), '%Y-%m-%d')
                rec_entry.run_date = rec_entry.start_date - datetime.timedelta(1)
                rec_entry.maintained_date = datetime.date.today()
                if request.POST.get('is_expire'):
                    rec_entry.is_expire = request.POST.get('is_expire')
                    rec_entry.expire_date = datetime.datetime.strptime(
                        request.POST.get('expire_date'), '%Y-%m-%d')
                else:
                    rec_entry.is_expire = False
                    rec_entry.expire_date = None
                if request.POST.get('is_active'):
                    rec_entry.is_active = request.POST.get('is_active')
                else:
                    rec_entry.is_active = False
                rec_entry.exch_rate_type = 'Current Rate'
                from_currency = rec_entry.customer.currency_id
                to_currency = company.currency_id
                if request.POST.get('exchange_rate'):
                    if 'exchange_rate_fk' in request.POST and request.POST.get('exchange_rate_fk'):
                        exchange_rate = ExchangeRate.objects.get(pk=request.POST.get('exchange_rate_fk'))
                        if request.POST.get('exchange_rate') != exchange_rate.rate:
                            rec_entry.exchange_rate = request.POST.get('exchange_rate')
                            rec_entry.exchange_rate_fk_id = None
                            exchange_rate = None
                        else:
                            rec_entry.exchange_rate = exchange_rate.rate
                            rec_entry.exchange_rate_fk_id = exchange_rate.id
                    else:
                        rec_entry.exchange_rate = request.POST.get('exchange_rate')
                        rec_entry.exchange_rate_fk_id = None
                        exchange_rate = None
                else:
                    exchange_rate = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                                from_currency_id=from_currency,
                                                                to_currency_id=to_currency,
                                                                exchange_date__lte=rec_entry.posting_date,
                                                                flag='ACCOUNTING').order_by('exchange_date').last()
                    if not exchange_rate:
                        if from_currency == to_currency:
                            rec_entry.exchange_rate = 1
                            rec_entry.exchange_rate_fk_id = None
                        else:
                            try:
                                transactionlib.rollback()
                            except:
                                pass
                            messages.error(request, NO_EXCHANGE_RATE)
                            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
                    else:
                        rec_entry.exchange_rate = exchange_rate.rate
                        rec_entry.exchange_rate_fk_id = exchange_rate.id
                rec_entry.orig_exch_rate = request.POST.get('orig_rate') if request.POST.get('orig_rate') != '' else rec_entry.exchange_rate
                rec_entry.orig_exch_rate_fk_id = request.POST.get('orig_rate_pk') \
                    if request.POST.get('orig_rate_pk') != '' else request.POST.get('exchange_rate_fk')
                rec_entry.currency_id = request.POST.get('currency')
                rec_entry.schedule_id = request.POST.get('schedule_id')
                rec_entry.document_type = request.POST.get('document_type')
                rec_entry.document_number = request.POST.get('document_number')
                rec_entry.document_amount = float(request.POST.get('document_amount').replace(',', ''))
                rec_entry.account_set_id = request.POST.get('account_set')
                rec_entry.amount = float(request.POST.get('amount').replace(',', '')) if request.POST.get('amount') else 0.00
                rec_entry.tax_amount = float(request.POST.get('tax_amount').replace(',', '')) if request.POST.get('tax_amount') else 0.00
                rec_entry.total_amount = float(request.POST.get('total_amount').replace(',', '')) if request.POST.get('total_amount') else 0.00
                perd_month, perd_year = get_fiscal_year_period(company_id, rec_entry.run_date)
                if perd_month and perd_year:
                    rec_entry.perd_month = perd_month
                    rec_entry.perd_year = perd_year
                else:
                    rec_entry.perd_month = int(request.POST.get('perd_month'))
                    rec_entry.perd_year = int(request.POST.get('perd_year'))
                if request.POST.get('is_manual_doc'):
                    rec_entry.is_manual_doc = request.POST.get('is_manual_doc')
                else:
                    rec_entry.is_manual_doc = 0
                rec_entry.update_by = request.user.id
                rec_entry.save()

                Batch_Entry = batch_form.save(commit=False)
                batch_id = rec_entry.batch_id
                entry_list = RecurringEntry.objects.filter(batch_id=Batch_Entry.id)
                Batch_Entry.batch_amount = 0
                for entry in entry_list:
                    if entry.id != rec_entry.id:
                        entry.schedule_id = rec_entry.schedule_id
                        entry.re_description = rec_entry.re_description
                        entry.is_expire = rec_entry.is_expire
                        entry.expire_date = rec_entry.expire_date
                        entry.maintained_date = rec_entry.maintained_date
                        entry.start_date = rec_entry.start_date
                        entry.is_active = rec_entry.is_active
                        entry.save()
                    if entry.document_type == DOCUMENT_TYPE_DICT['Credit Note']:
                        Batch_Entry.batch_amount = float(Batch_Entry.batch_amount) - float(entry.total_amount)
                    else:
                        Batch_Entry.batch_amount = float(Batch_Entry.batch_amount) + float(entry.total_amount)
                Batch_Entry.save()

                rec_entry_detail_list = RecurringEntryDetail.objects.filter(rec_entry_id=rec_entry.id)
                if rec_entry_detail_list:
                    for row in rec_entry_detail_list:
                        row.delete()

                transaction_list = None
                if request.POST['transaction_list_data']:
                    transaction_list = ast.literal_eval(request.POST['transaction_list_data'])
                if transaction_list != None:
                    for transaction in transaction_list:
                        trans = RecurringEntryDetail()
                        trans.rec_entry_id = rec_entry.id
                        trans.description = transaction['description']
                        trans.account_id = transaction['account_id']
                        trans.company_id = company.id
                        trans.distribution_code_id = transaction['distribution_id']
                        trans.currency_id = rec_entry.currency.id
                        if transaction['tax_id'] and transaction['tax_id'] is not '0':
                            trans.tax_id = transaction['tax_id']
                        trans.amount = float(transaction['amount'].replace(',', ''))
                        trans.tax_amount = float(transaction['tax_amount'].replace(',', ''))
                        trans.total_amount = float(transaction['total_amount'].replace(',', ''))
                        trans.is_debit_account = (True, False)[rec_entry.document_type == DOCUMENT_TYPE_DICT['Credit Note']]
                        trans.is_credit_account = (False, True)[rec_entry.document_type == DOCUMENT_TYPE_DICT['Credit Note']]
                        trans.is_tax_include = int(transaction['is_tax_included']) if transaction['is_tax_included'] else 0
                        trans.is_tax_transaction = int(transaction['is_tax_transaction']) if transaction['is_tax_transaction'] else 0
                        trans.is_manual_tax_input = int(transaction['is_manual_tax_input']) if transaction['is_manual_tax_input'] else 0
                        # trans.remark = transaction['description']
                        trans.is_hidden = False
                        trans.create_date = datetime.datetime.today()
                        trans.update_date = datetime.datetime.today()
                        trans.update_by = request.user.id
                        id_invoice_apply = request.POST['id_related_invoice']
                        if id_invoice_apply:
                            id_invoice_apply = int(id_invoice_apply)
                            journal_id_related = Journal.objects.get(pk=id_invoice_apply)
                            trans.related_invoice = journal_id_related
                        trans.exchange_rate = rec_entry.exchange_rate
                        trans.functional_currency_id = company.currency_id
                        trans.functional_amount = float(trans.total_amount) * float(rec_entry.exchange_rate)
                        if exchange_rate:
                            trans.exch_rate_date = exchange_rate.exchange_date
                        else:
                            trans.exch_rate_date = rec_entry.posting_date
                        trans.transaction_date = rec_entry.posting_date
                        trans.functional_balance_type = (BALANCE_TYPE_DICT['Credit'],
                                                        BALANCE_TYPE_DICT['Debit'])[trans.is_debit_account]
                        trans.save()

                messages.success(request, 'AR Invoice Recurring Entry is updated')
                return redirect('/accounting/rec_batch_list/1/')

            # batch_id = None
            # batch_form = None
            # if batch_id and int(batch_id) > 0:
            #     batch = Batch.objects.get(pk=batch_id)
            #     if not batch.currency.is_decimal:
            #         batch.batch_amount = round_number(batch.batch_amount)
            #     batch_form = BatchInfoForm(instance=batch)
            # schedule_list = Schedule.objects.filter(company_id=company_id, is_hidden=False)
            # context = {'form': form, 'batch_form': batch_form, 'distribution_code_list': distribution_code_list_ar,
            #         'account_list': account_list, 'tax_list': tax_list, 'batch': batch, 'batch_id': batch_id,
            #         'company_currency': company.currency_id, 'is_rec_entry': True, 'schedule_list': schedule_list}
            # return render(request, 'AR_entry.html', context)
    # end try
    except Exception as e:
        print(EXCEPTION_JOURNAL_ADD % ('AR RE Invoice'), e)
        logging.error(traceback.format_exc())
        messages.error(request, EXCEPTION_JOURNAL_ADD % ('AR RE Invoice'))
        return redirect('/accounting/rec_batch_list/1/')


@csrf_exempt
@login_required
def add_appayment_recurring_entry(request, batch_id):
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    form = APPaymentREForm(company_id=company_id)
    try:
        with transactionlib.atomic():
            # if batch_id = 0, mean this is newly created batch
            context = {}
            entry_no = 1
            p_batch = 0
            n_batch = 0
            prev_batch = 0
            next_batch = 0
            prev_journal = 0
            next_journal = 0
            first_journal = 0
            last_journal = 0
            schedule_id = 0
            if batch_id != '0':
                batch = RecurringBatch.objects.get(pk=batch_id)
                entry_list = RecurringEntry.objects.filter(batch_id=batch_id, company_id=company_id, is_hidden=0)
                entry_no = entry_list.count() + 1
                schedule_id = entry_list.first().schedule_id
                batch_form = RecBatchInfoForm(instance=batch)
                related_journal = RecurringEntry.objects.filter(
                    batch_id=batch.id, company_id=company_id, is_hidden=0).first()
                if related_journal:
                    context['bank_id'] = related_journal.bank_id
                prev_journal, next_journal, first_journal, last_journal = get_batch_journals(batch.id, None, True)
                prev_batch, next_batch = get_recurring_nearest_batches(
                    company_id, dict(TRANSACTION_TYPES)['AP Payment'], batch.batch_no)
            else:
                batch = RecurringBatch()
                batch.batch_type = dict(TRANSACTION_TYPES)['AP Payment']
                batch_form = RecBatchInfoForm()
                prev_batch, next_batch = get_recurring_nearest_batches(
                    company_id, dict(TRANSACTION_TYPES)['AP Payment'], None)
            if prev_batch:
                p_batch = RecurringEntry.objects.get(pk=prev_batch).batch_id
            if next_batch:
                n_batch = RecurringEntry.objects.get(pk=next_batch).batch_id
            company = Company.objects.get(pk=company_id)
            doc_number = AR_AP_generate_document_number(
                    company.id,
                    dict(TRANSACTION_TYPES)['AP Payment'])
            form.initial = {'document_number': doc_number}
            distribution_code_list = DistributionCode.objects.filter(is_hidden=False, is_active=True,
                                                                     company_id=company_id,
                                                                     type=DIS_CODE_TYPE_DICT['AP Distribution Code'])
            account_list = Account.objects.filter(is_hidden=False, is_active=True, company_id=company_id).order_by('account_segment', 'code')
            tax_list = Tax.objects.filter(is_hidden=False,
                                          company_id=company_id,
                                          tax_group__company_id=company_id,
                                          tax_group__transaction_type=int(TAX_TRX_TYPES_DICT['Purchases']))
            total_func_debit = 0.0
            total_func_credit = 0.0
            distribution_code_list_ap = []
            for dist_code_list in distribution_code_list:
                distribution_code_list_obj = {}
                distribution_code_list_obj['id'] = dist_code_list.id
                distribution_code_list_obj['code'] = dist_code_list.code
                distribution_code_list_obj['name'] = dist_code_list.name
                distribution_code_list_obj['gl_account_id'] = dist_code_list.gl_account_id
                distribution_code_list_obj['tax_id'] = None
                for tax_code in tax_list:
                    if tax_code.distribution_code_id:
                        if tax_code.distribution_code_id == dist_code_list.id:
                            distribution_code_list_obj['tax_id'] = tax_code.id
                            break
                distribution_code_list_ap.append(distribution_code_list_obj)

        if request.method == "POST":
            Batch_entry = batch_form.save(commit=False)
            Batch_entry.no_entries += 1
            Batch_entry.description = request.POST.get('description')
            Batch_entry.source_ledger = SOURCE_LEDGER_DICT['Account Payable']
            Batch_entry.batch_type = dict(TRANSACTION_TYPES)['AP Payment']
            Batch_entry.batch_date = datetime.datetime.today()
            Batch_entry.create_date = datetime.datetime.today()
            Batch_entry.save()
            batch_id = Batch_entry.id


            rec_entry = RecurringEntry()
            rec_entry.batch_id = Batch_entry.id
            rec_entry.company_id = company_id
            if request.POST.get('re_code'):
                rec_entry.code = request.POST.get('re_code')
            else:
                rec_entry.code = Batch_entry.no_entries
            rec_entry.re_description = request.POST.get('re_description')
            rec_entry.description = request.POST.get('re_description')
            rec_entry.name = request.POST.get('name') if request.POST.get('name') else ""
            rec_entry.journal_type = dict(TRANSACTION_TYPES)['AP Payment']
            rec_entry.posting_date = datetime.datetime.strptime(
                request.POST.get('posting_date'), '%Y-%m-%d')
            rec_entry.start_date = datetime.datetime.strptime(
                request.POST.get('start_date'), '%Y-%m-%d')
            rec_entry.run_date = rec_entry.start_date - datetime.timedelta(1)
            rec_entry.maintained_date = datetime.date.today()
            if request.POST.get('is_expire'):
                rec_entry.is_expire = request.POST.get('is_expire')
                rec_entry.expire_date = datetime.datetime.strptime(
                    request.POST.get('expire_date'), '%Y-%m-%d')
            else:
                rec_entry.is_expire = False
                rec_entry.expire_date = None
            if request.POST.get('is_active'):
                rec_entry.is_active = request.POST.get('is_active')
            else:
                rec_entry.is_active = False
            rec_entry.exch_rate_type = 'Current Rate'
            rec_entry.bank_id = request.POST.get('bank')
            rec_entry.currency_id = request.POST.get('currency')
            rec_entry.payment_code_id = request.POST.get('payment_code')
            rec_entry.payment_check_number = request.POST.get('payment_check_number')
            rec_entry.reference = request.POST.get('reference')
            rec_entry.transaction_type = request.POST.get('transaction_type')
            rec_entry.schedule_id = request.POST.get('schedule_id')
            rec_entry.document_number = AR_AP_generate_document_number(
                company.id,
                dict(TRANSACTION_TYPES)['AP Payment'])
            rec_entry.invoice_number = request.POST.get('invoice_number')
            rec_entry.supplier_id = request.POST.get('supplier')
            rec_entry.account_set_id = request.POST.get('account_set')
            rec_entry.amount = float(request.POST.get('amount').replace(',', '')) if request.POST.get('amount') else 0.00
            rec_entry.tax_amount = float(request.POST.get('tax_amount').replace(',', '')) if request.POST.get('tax_amount') else 0.00
            rec_entry.total_amount = float(request.POST.get('total_amount').replace(',', '')) if request.POST.get('total_amount') else 0.00
            perd_month, perd_year = get_fiscal_year_period(company_id, rec_entry.posting_date)
            if perd_month and perd_year:
                rec_entry.perd_month = perd_month
                rec_entry.perd_year = perd_year
            else:
                rec_entry.perd_month = int(request.POST.get('perd_month'))
                rec_entry.perd_year = int(request.POST.get('perd_year'))
            if request.POST.get('is_manual_doc'):
                rec_entry.is_manual_doc = request.POST.get('is_manual_doc')
            else:
                rec_entry.is_manual_doc = 0
            rec_entry.update_by = request.user.id
            if request.POST['transaction_type'] == '1':
                rec_entry.document_type = DOCUMENT_TYPE_DICT['Payment']
                rec_entry.original_currency_id = rec_entry.supplier.currency.id
                rec_entry.payment_currency_id = rec_entry.bank.currency.id
            elif request.POST['transaction_type'] == '2':
                rec_entry.document_type = DOCUMENT_TYPE_DICT['Miscellaneous Payment']
            exchange_rate = None
            if 'exchange_rate' in request.POST and request.POST['exchange_rate']:
                rec_entry.exchange_rate = request.POST['exchange_rate']
            if 'exchange_rate_fk' in request.POST and request.POST['exchange_rate_fk']:
                exchange_rate = ExchangeRate.objects.get(pk=request.POST['exchange_rate_fk'])
            if not rec_entry.exchange_rate:
                # get latest exchange rate
                from_currency = rec_entry.bank.currency_id
                to_currency = company.currency_id
                exchange_rate = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                            from_currency_id=from_currency,
                                                            to_currency_id=to_currency,
                                                            flag='ACCOUNTING', exchange_date=str(rec_entry.posting_date.year) + '-' + str(rec_entry.posting_date.month) + '-01').first()
                if not exchange_rate:
                    exchange_rate = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                                from_currency_id=from_currency,
                                                                to_currency_id=to_currency,
                                                                exchange_date__lte=rec_entry.posting_date,
                                                                flag='ACCOUNTING').order_by('exchange_date').last()
                if not exchange_rate:
                    if from_currency == to_currency:
                        rec_entry.exchange_rate = 1
                        rec_entry.exchange_rate_fk_id = None
                        exchange_rate = None
                    else:
                        try:
                            transactionlib.rollback()
                        except:
                            pass
                        messages.error(request, NO_EXCHANGE_RATE)
                        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
                else:
                    rec_entry.exchange_rate = exchange_rate.rate
                    rec_entry.exchange_rate_fk_id = exchange_rate.id
            if 'orig_rate' in request.POST:
                rec_entry.orig_exch_rate = request.POST['orig_rate']
            else:
                rec_entry.orig_exch_rate = rec_entry.exchange_rate
            rec_entry.save()

            transaction_list = None
            if request.POST['transaction_list_data']:
                transaction_list = ast.literal_eval(request.POST['transaction_list_data'])
            if transaction_list != None:
                if rec_entry.transaction_type == PAYMENT_TRANSACTION_TYPES_DICT['Misc Payment']:  # Misc transaction
                    for transaction in transaction_list:
                        trans = RecurringEntryDetail()
                        trans.rec_entry_id = rec_entry.id
                        trans.description = transaction['description']
                        trans.account_id = transaction['account_id']
                        trans.company_id = company.id
                        trans.distribution_code_id = transaction['distribution_id']
                        trans.currency_id = rec_entry.currency.id
                        if transaction['tax_id'] and transaction['tax_id'] is not '0':
                            trans.tax_id = transaction['tax_id']
                        trans.amount = float(transaction['amount'].replace(',', ''))
                        trans.tax_amount = float(transaction['tax_amount'].replace(',', ''))
                        trans.total_amount = float(transaction['total_amount'].replace(',', ''))
                        trans.is_debit_account = True
                        trans.is_credit_account = False
                        trans.is_tax_include = int(transaction['is_tax_included']) if transaction['is_tax_included'] else 0
                        trans.is_tax_transaction = int(transaction['is_tax_transaction']) if transaction['is_tax_transaction'] else 0
                        trans.is_manual_tax_input = int(transaction['is_manual_tax_input']) if transaction['is_manual_tax_input'] else 0
                        # trans.remark = transaction['description']
                        trans.is_hidden = False
                        trans.create_date = datetime.datetime.today()
                        trans.update_date = datetime.datetime.today()
                        trans.update_by = request.user.id
                        trans.functional_balance_type = (BALANCE_TYPE_DICT['Credit'],
                                                         BALANCE_TYPE_DICT['Debit'])[trans.is_debit_account]
                        if rec_entry.original_currency_id:
                            trans.currency_id = rec_entry.original_currency_id
                        else:
                            trans.currency_id = rec_entry.currency_id
                        if trans.currency_id == rec_entry.currency_id:
                            trans.exchange_rate = rec_entry.exchange_rate
                        elif trans.currency_id == company.currency_id:
                            trans.exchange_rate = 1.0
                        elif trans.currency_id != company.currency_id and\
                            'orig_exch_rate' in request.POST and request.POST['orig_exch_rate'] and\
                                request.POST['orig_exch_rate'] != 1.0:
                            trans.exchange_rate = request.POST['orig_exch_rate']
                        if not trans.exchange_rate:
                            if trans.currency_id != rec_entry.currency_id:
                                from_currency = trans.currency_id
                                to_currency = company.currency_id

                                exchange_rate = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                                            from_currency_id=from_currency,
                                                                            to_currency_id=to_currency,
                                                                            flag='ACCOUNTING', exchange_date=str(rec_entry.posting_date.year) + '-' + str(rec_entry.posting_date.month) + '-01').first()
                                if not exchange_rate:
                                    exchange_rate = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                                                from_currency_id=from_currency,
                                                                                to_currency_id=to_currency,
                                                                                exchange_date__lte=rec_entry.posting_date,
                                                                                flag='ACCOUNTING').order_by('exchange_date').last()
                                if exchange_rate:
                                    trans.exchange_rate = exchange_rate.rate
                                else:
                                    trans.exchange_rate = 1.0
                            else:
                                trans.exchange_rate = rec_entry.exchange_rate
                        trans.functional_currency_id = company.currency_id
                        if exchange_rate:
                            trans.exch_rate_date = exchange_rate.exchange_date
                        else:
                            trans.exch_rate_date = rec_entry.posting_date
                        trans.save()
                else:  # Normal transaction
                    for transaction in transaction_list:
                        trans = RecurringEntryDetail()
                        trans.rec_entry_id = rec_entry.id
                        trans.company_id = company.id
                        trans.is_debit_account = True
                        trans.is_credit_account = False
                        trans.currency_id = rec_entry.currency.id
                        trans.document_number = transaction['document_number']
                        trans.document_type = transaction['document_type']
                        trans.payment_number = transaction['payment_number']
                        trans.pending_balance = float(transaction['pending_balance'].replace(',', ''))
                        trans.applied_amount = float(transaction['applied_amount'].replace(',', ''))
                        trans.net_balance = float(transaction['net_balance'].replace(',', ''))
                        trans.original_amount = float(transaction['original_amount'].replace(',', ''))
                        trans.discount_amount = transaction['discount_amount'].replace(",", "")
                        trans.document_date = transaction['document_date']
                        trans.due_date = transaction['due_date']
                        trans.related_invoice_id = transaction['invoice_id']
                        # trans.adjustments = transaction.adjustments
                        trans.is_hidden = False
                        trans.create_date = datetime.datetime.today()
                        trans.update_date = datetime.datetime.today()
                        trans.update_by = request.user.id
                        trans.functional_balance_type = (BALANCE_TYPE_DICT['Credit'],
                                                         BALANCE_TYPE_DICT['Debit'])[trans.is_debit_account]
                        if rec_entry.original_currency_id:
                            trans.currency_id = rec_entry.original_currency_id
                        else:
                            trans.currency_id = rec_entry.currency_id
                        if trans.currency_id == rec_entry.currency_id:
                            trans.exchange_rate = rec_entry.exchange_rate
                        elif trans.currency_id == company.currency_id:
                            trans.exchange_rate = 1.0
                        elif trans.currency_id != company.currency_id and\
                            'orig_exch_rate' in request.POST and request.POST['orig_exch_rate'] and\
                                request.POST['orig_exch_rate'] != 1.0:
                            trans.exchange_rate = request.POST['orig_exch_rate']
                        if not trans.exchange_rate:
                            if trans.currency_id != rec_entry.currency_id:
                                from_currency = trans.currency_id
                                to_currency = company.currency_id

                                exchange_rate = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                                            from_currency_id=from_currency,
                                                                            to_currency_id=to_currency,
                                                                            flag='ACCOUNTING', exchange_date=str(rec_entry.posting_date.year) + '-' + str(rec_entry.posting_date.month) + '-01').first()
                                if not exchange_rate:
                                    exchange_rate = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                                                from_currency_id=from_currency,
                                                                                to_currency_id=to_currency,
                                                                                exchange_date__lte=rec_entry.posting_date,
                                                                                flag='ACCOUNTING').order_by('exchange_date').last()
                                if exchange_rate:
                                    trans.exchange_rate = exchange_rate.rate
                                else:
                                    trans.exchange_rate = 1.0
                            else:
                                trans.exchange_rate = rec_entry.exchange_rate
                        trans.functional_currency_id = company.currency_id
                        if exchange_rate:
                            trans.exch_rate_date = exchange_rate.exchange_date
                        else:
                            trans.exch_rate_date = rec_entry.posting_date
                        trans.save()

            # calculate and import Batch data
            batch_amount = RecurringEntry.objects.filter(batch_id=Batch_entry.id, company_id=company_id, is_hidden=0) \
                .aggregate(batch_amount=Sum('total_amount'))
            Batch_entry.batch_amount = batch_amount.get('batch_amount', Decimal(0.000000))
            Batch_entry.company_id = company.id
            Batch_entry.input_type = int(INPUT_TYPE_DICT['Manual Entry'])
            Batch_entry.currency_id = request.POST['currency']
            Batch_entry.status = int(STATUS_TYPE_DICT['Open'])
            if not Batch_entry.batch_no:
                Batch_entry.batch_no = generate_recurring_batch_number(company.id, Batch_entry.batch_type)
            Batch_entry.save()
            
            messages.success(request, 'AP Payment Recurring Entry is created')
            return redirect('/accounting/add/APPayment-RE/' + str(batch_id) + '/')

        schedule_list = Schedule.objects.filter(company_id=company_id, is_hidden=False)
        context.update({'form': form, 'batch_form': batch_form, 'distribution_code_list': distribution_code_list_ap,
                        'account_list': account_list, 'tax_list': tax_list, 'batch': batch, 'entry_no': entry_no,
                        'is_rec_entry': True, 'schedule_list': schedule_list, 'next_journal': next_journal, 
                        'prev_journal': prev_journal, 'first_journal': first_journal, 'batch_id': batch_id,
                        'last_journal': last_journal, 'next_batch': next_batch, 'prev_batch': prev_batch,
                        'n_batch': n_batch, 'p_batch': p_batch, 'schedule_id': schedule_id})

        return render(request, 'AP_payment_entry.html', context)
    except Exception as e:
        print(EXCEPTION_JOURNAL_ADD % ('AP Payment RE'), e)
        logging.error(traceback.format_exc())
        messages.error(request, EXCEPTION_JOURNAL_ADD % ('AP Payment RE'))
        return redirect('/accounting/rec_batch_list/4/')


@csrf_exempt
@login_required
def edit_appayment_recurring_entry(request, id):
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    try:
        with transactionlib.atomic():
            # if batch_id = 0, mean this is newly created batch
            context = {}
            entry_no = 1
            p_batch = 0
            n_batch = 0
            prev_batch = 0
            next_batch = 0
            prev_journal = 0
            next_journal = 0
            first_journal = 0
            last_journal = 0
            rec_entry = RecurringEntry.objects.get(pk=id)
            batch_id = rec_entry.batch_id
            if batch_id != '0':
                batch = RecurringBatch.objects.get(pk=batch_id)
                entry_no = RecurringEntry.objects.filter(batch_id=batch_id, company_id=company_id, is_hidden=0).count() + 1
                batch_form = RecBatchInfoForm(instance=batch)
                related_journal = RecurringEntry.objects.filter(batch_id=batch.id, company_id=company_id, is_hidden=0).first()
                if related_journal:
                    context['bank_id'] = related_journal.bank_id
                prev_journal, next_journal, first_journal, last_journal = get_batch_journals(
                    batch.id, rec_entry, True)
                prev_batch, next_batch = get_recurring_nearest_batches(
                    company_id, dict(TRANSACTION_TYPES)['AP Payment'], batch.batch_no)
            else:
                batch = RecurringBatch()
                batch.batch_type = dict(TRANSACTION_TYPES)['AP Payment']
                batch_form = RecBatchInfoForm()
                prev_batch, next_batch = get_recurring_nearest_batches(
                    company_id, dict(TRANSACTION_TYPES)['AP Payment'], None)
            
            if prev_batch:
                p_batch = RecurringEntry.objects.get(pk=prev_batch).batch_id
            if next_batch:
                n_batch = RecurringEntry.objects.get(pk=next_batch).batch_id
            company = Company.objects.get(pk=company_id)
            distribution_code_list = DistributionCode.objects.filter(is_hidden=False, is_active=True,
                                                                     company_id=company_id,
                                                                     type=DIS_CODE_TYPE_DICT['AP Distribution Code'])
            account_list = Account.objects.filter(is_hidden=False, is_active=True, company_id=company_id).order_by('account_segment', 'code')
            tax_list = Tax.objects.filter(is_hidden=False,
                                          company_id=company_id,
                                          tax_group__company_id=company_id,
                                          tax_group__transaction_type=int(TAX_TRX_TYPES_DICT['Purchases']))
            total_func_debit = 0.0
            total_func_credit = 0.0
            distribution_code_list_ap = []
            for dist_code_list in distribution_code_list:
                distribution_code_list_obj = {}
                distribution_code_list_obj['id'] = dist_code_list.id
                distribution_code_list_obj['code'] = dist_code_list.code
                distribution_code_list_obj['name'] = dist_code_list.name
                distribution_code_list_obj['gl_account_id'] = dist_code_list.gl_account_id
                distribution_code_list_obj['tax_id'] = None
                for tax_code in tax_list:
                    if tax_code.distribution_code_id:
                        if tax_code.distribution_code_id == dist_code_list.id:
                            distribution_code_list_obj['tax_id'] = tax_code.id
                            break
                distribution_code_list_ap.append(distribution_code_list_obj)

        if request.method == "POST":
            Batch_entry = batch_form.save(commit=False)
            Batch_entry.source_ledger = SOURCE_LEDGER_DICT['Account Payable']
            Batch_entry.description = request.POST.get('description')
            Batch_entry.save()

            rec_entry = RecurringEntry.objects.get(pk=id)
            rec_entry.company_id = company_id
            # rec_entry.code = request.POST.get('re_code')
            rec_entry.re_description = request.POST.get('re_description')
            rec_entry.description = request.POST.get('re_description')
            rec_entry.name = request.POST.get('name') if request.POST.get('name') else ""
            rec_entry.journal_type = dict(TRANSACTION_TYPES)['AP Payment']
            rec_entry.posting_date = datetime.datetime.strptime(
                request.POST.get('posting_date'), '%Y-%m-%d')
            rec_entry.start_date = datetime.datetime.strptime(
                request.POST.get('start_date'), '%Y-%m-%d')
            rec_entry.run_date = rec_entry.start_date - datetime.timedelta(1)
            rec_entry.maintained_date = datetime.date.today()
            if request.POST.get('is_expire'):
                rec_entry.is_expire = request.POST.get('is_expire')
                rec_entry.expire_date = datetime.datetime.strptime(
                    request.POST.get('expire_date'), '%Y-%m-%d')
            else:
                rec_entry.is_expire = False
                rec_entry.expire_date = None
            if request.POST.get('is_active'):
                rec_entry.is_active = request.POST.get('is_active')
            else:
                rec_entry.is_active = False
            rec_entry.exch_rate_type = 'Current Rate'
            rec_entry.bank_id = request.POST.get('bank')
            rec_entry.currency_id = request.POST.get('currency')
            rec_entry.payment_code_id = request.POST.get('payment_code')
            rec_entry.payment_check_number = request.POST.get('payment_check_number')
            rec_entry.reference = request.POST.get('reference')
            rec_entry.transaction_type = request.POST.get('transaction_type')
            rec_entry.schedule_id = request.POST.get('schedule_id')
            rec_entry.document_number = request.POST.get('document_number')
            rec_entry.invoice_number = request.POST.get('invoice_number')
            rec_entry.supplier_id = request.POST.get('supplier')
            rec_entry.account_set_id = request.POST.get('account_set')
            rec_entry.amount = float(request.POST.get('amount').replace(',', '')) if request.POST.get('amount') else 0.00
            rec_entry.tax_amount = float(request.POST.get('tax_amount').replace(',', '')) if request.POST.get('tax_amount') else 0.00
            rec_entry.total_amount = float(request.POST.get('total_amount').replace(',', '')) if request.POST.get('total_amount') else 0.00
            perd_month, perd_year = get_fiscal_year_period(company_id, rec_entry.posting_date)
            if perd_month and perd_year:
                rec_entry.perd_month = perd_month
                rec_entry.perd_year = perd_year
            else:
                rec_entry.perd_month = int(request.POST.get('perd_month'))
                rec_entry.perd_year = int(request.POST.get('perd_year'))
            if request.POST.get('is_manual_doc'):
                rec_entry.is_manual_doc = request.POST.get('is_manual_doc')
            else:
                rec_entry.is_manual_doc = 0
            rec_entry.update_by = request.user.id
            if request.POST['transaction_type'] == '1':
                rec_entry.document_type = DOCUMENT_TYPE_DICT['Payment']
                rec_entry.original_currency_id = rec_entry.supplier.currency.id
                rec_entry.payment_currency_id = rec_entry.bank.currency.id
            elif request.POST['transaction_type'] == '2':
                rec_entry.document_type = DOCUMENT_TYPE_DICT['Miscellaneous Payment']
            exchange_rate = None
            if 'exchange_rate' in request.POST and request.POST['exchange_rate']:
                rec_entry.exchange_rate = request.POST['exchange_rate']
            if 'exchange_rate_fk' in request.POST and request.POST['exchange_rate_fk']:
                exchange_rate = ExchangeRate.objects.get(pk=request.POST['exchange_rate_fk'])
            if not rec_entry.exchange_rate:
                # get latest exchange rate
                from_currency = rec_entry.bank.currency_id
                to_currency = company.currency_id
                exchange_rate = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                            from_currency_id=from_currency,
                                                            to_currency_id=to_currency,
                                                            flag='ACCOUNTING', exchange_date=str(rec_entry.posting_date.year) + '-' + str(rec_entry.posting_date.month) + '-01').first()
                if not exchange_rate:
                    exchange_rate = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                                from_currency_id=from_currency,
                                                                to_currency_id=to_currency,
                                                                exchange_date__lte=rec_entry.posting_date,
                                                                flag='ACCOUNTING').order_by('exchange_date').last()
                if not exchange_rate:
                    if from_currency == to_currency:
                        rec_entry.exchange_rate = 1
                        rec_entry.exchange_rate_fk_id = None
                        exchange_rate = None
                    else:
                        try:
                            transactionlib.rollback()
                        except:
                            pass
                        messages.error(request, NO_EXCHANGE_RATE)
                        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
                else:
                    rec_entry.exchange_rate = exchange_rate.rate
                    rec_entry.exchange_rate_fk_id = exchange_rate.id
            if 'orig_rate' in request.POST:
                rec_entry.orig_exch_rate = request.POST['orig_rate']
            else:
                rec_entry.orig_exch_rate = rec_entry.exchange_rate
            rec_entry.save()

            transaction_list = RecurringEntryDetail.objects.filter(rec_entry_id=id)
            if transaction_list:
                for trx in transaction_list:
                    trx.delete()

            transaction_list = None
            if request.POST['transaction_list_data']:
                transaction_list = ast.literal_eval(request.POST['transaction_list_data'])
            if transaction_list != None:
                if rec_entry.transaction_type == PAYMENT_TRANSACTION_TYPES_DICT['Misc Payment']:  # Misc transaction
                    for transaction in transaction_list:
                        trans = RecurringEntryDetail()
                        trans.rec_entry_id = rec_entry.id
                        trans.description = transaction['description']
                        trans.account_id = transaction['account_id']
                        trans.company_id = company.id
                        trans.distribution_code_id = transaction['distribution_id']
                        trans.currency_id = rec_entry.currency.id
                        if transaction['tax_id'] and transaction['tax_id'] is not '0':
                            trans.tax_id = transaction['tax_id']
                        trans.amount = float(transaction['amount'].replace(',', ''))
                        trans.tax_amount = float(transaction['tax_amount'].replace(',', ''))
                        trans.total_amount = float(transaction['total_amount'].replace(',', ''))
                        trans.is_debit_account = True
                        trans.is_credit_account = False
                        trans.is_tax_include = int(transaction['is_tax_included']) if transaction['is_tax_included'] else 0
                        trans.is_tax_transaction = int(transaction['is_tax_transaction']) if transaction['is_tax_transaction'] else 0
                        trans.is_manual_tax_input = int(transaction['is_manual_tax_input']) if transaction['is_manual_tax_input'] else 0
                        # trans.remark = transaction['description']
                        trans.is_hidden = False
                        trans.create_date = datetime.datetime.today()
                        trans.update_date = datetime.datetime.today()
                        trans.update_by = request.user.id
                        trans.functional_balance_type = (BALANCE_TYPE_DICT['Credit'],
                                                         BALANCE_TYPE_DICT['Debit'])[trans.is_debit_account]
                        if rec_entry.original_currency_id:
                            trans.currency_id = rec_entry.original_currency_id
                        else:
                            trans.currency_id = rec_entry.currency_id
                        if trans.currency_id == rec_entry.currency_id:
                            trans.exchange_rate = rec_entry.exchange_rate
                        elif trans.currency_id == company.currency_id:
                            trans.exchange_rate = 1.0
                        elif trans.currency_id != company.currency_id and\
                            'orig_exch_rate' in request.POST and request.POST['orig_exch_rate'] and\
                                request.POST['orig_exch_rate'] != 1.0:
                            trans.exchange_rate = request.POST['orig_exch_rate']
                        if not trans.exchange_rate:
                            if trans.currency_id != rec_entry.currency_id:
                                from_currency = trans.currency_id
                                to_currency = company.currency_id

                                exchange_rate = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                                            from_currency_id=from_currency,
                                                                            to_currency_id=to_currency,
                                                                            flag='ACCOUNTING', exchange_date=str(rec_entry.posting_date.year) + '-' + str(rec_entry.posting_date.month) + '-01').first()
                                if not exchange_rate:
                                    exchange_rate = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                                                from_currency_id=from_currency,
                                                                                to_currency_id=to_currency,
                                                                                exchange_date__lte=rec_entry.posting_date,
                                                                                flag='ACCOUNTING').order_by('exchange_date').last()
                                if exchange_rate:
                                    trans.exchange_rate = exchange_rate.rate
                                else:
                                    trans.exchange_rate = 1.0
                            else:
                                trans.exchange_rate = rec_entry.exchange_rate
                        trans.functional_currency_id = company.currency_id
                        if exchange_rate:
                            trans.exch_rate_date = exchange_rate.exchange_date
                        else:
                            trans.exch_rate_date = rec_entry.posting_date
                        trans.save()
                else:  # Normal transaction
                    for transaction in transaction_list:
                        trans = RecurringEntryDetail()
                        trans.rec_entry_id = rec_entry.id
                        trans.company_id = company.id
                        trans.is_debit_account = True
                        trans.is_credit_account = False
                        trans.currency_id = rec_entry.currency.id
                        trans.document_number = transaction['document_number']
                        trans.document_type = transaction['document_type']
                        trans.payment_number = transaction['payment_number']
                        trans.pending_balance = float(transaction['pending_balance'].replace(',', ''))
                        trans.applied_amount = float(transaction['applied_amount'].replace(',', ''))
                        trans.net_balance = float(transaction['net_balance'].replace(',', ''))
                        trans.original_amount = float(transaction['original_amount'].replace(',', ''))
                        trans.discount_amount = transaction['discount_amount'].replace(",", "")
                        trans.document_date = transaction['document_date']
                        trans.due_date = transaction['due_date']
                        trans.related_invoice_id = transaction['invoice_id']
                        # trans.adjustments = transaction.adjustments
                        trans.is_hidden = False
                        trans.create_date = datetime.datetime.today()
                        trans.update_date = datetime.datetime.today()
                        trans.update_by = request.user.id
                        trans.functional_balance_type = (BALANCE_TYPE_DICT['Credit'],
                                                         BALANCE_TYPE_DICT['Debit'])[trans.is_debit_account]
                        if rec_entry.original_currency_id:
                            trans.currency_id = rec_entry.original_currency_id
                        else:
                            trans.currency_id = rec_entry.currency_id
                        if trans.currency_id == rec_entry.currency_id:
                            trans.exchange_rate = rec_entry.exchange_rate
                        elif trans.currency_id == company.currency_id:
                            trans.exchange_rate = 1.0
                        elif trans.currency_id != company.currency_id and\
                            'orig_exch_rate' in request.POST and request.POST['orig_exch_rate'] and\
                                request.POST['orig_exch_rate'] != 1.0:
                            trans.exchange_rate = request.POST['orig_exch_rate']
                        if not trans.exchange_rate:
                            if trans.currency_id != rec_entry.currency_id:
                                from_currency = trans.currency_id
                                to_currency = company.currency_id

                                exchange_rate = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                                            from_currency_id=from_currency,
                                                                            to_currency_id=to_currency,
                                                                            flag='ACCOUNTING', exchange_date=str(rec_entry.posting_date.year) + '-' + str(rec_entry.posting_date.month) + '-01').first()
                                if not exchange_rate:
                                    exchange_rate = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                                                from_currency_id=from_currency,
                                                                                to_currency_id=to_currency,
                                                                                exchange_date__lte=rec_entry.posting_date,
                                                                                flag='ACCOUNTING').order_by('exchange_date').last()
                                if exchange_rate:
                                    trans.exchange_rate = exchange_rate.rate
                                else:
                                    trans.exchange_rate = 1.0
                            else:
                                trans.exchange_rate = rec_entry.exchange_rate
                        trans.functional_currency_id = company.currency_id
                        if exchange_rate:
                            trans.exch_rate_date = exchange_rate.exchange_date
                        else:
                            trans.exch_rate_date = rec_entry.posting_date
                        trans.save()

            batch_amount = RecurringEntry.objects.filter(batch_id=Batch_entry.id, company_id=company_id, is_hidden=0) \
                .aggregate(batch_amount=Sum('total_amount'))
            Batch_entry.batch_amount = batch_amount.get('batch_amount', Decimal(0.000000))
            Batch_entry.company_id = company.id
            Batch_entry.input_type = int(INPUT_TYPE_DICT['Manual Entry'])
            Batch_entry.currency_id = request.POST['currency']
            Batch_entry.status = int(STATUS_TYPE_DICT['Open'])
            if not Batch_entry.batch_no:
                Batch_entry.batch_no = generate_recurring_batch_number(company.id, Batch_entry.batch_type)
            Batch_entry.save()

            entry_list = RecurringEntry.objects.filter(batch_id=Batch_entry.id)
            for entry in entry_list:
                if entry.id != rec_entry.id:
                    entry.schedule_id = rec_entry.schedule_id
                    entry.re_description = rec_entry.re_description
                    entry.is_expire = rec_entry.is_expire
                    entry.expire_date = rec_entry.expire_date
                    entry.maintained_date = rec_entry.maintained_date
                    entry.start_date = rec_entry.start_date
                    entry.is_active = rec_entry.is_active
                    entry.save()

            messages.success(request, 'AP Payment Recurring Entry is update')
            return redirect('/accounting/rec_batch_list/4/')

        rec_entry.start_date = datetime.datetime.strftime(rec_entry.start_date, '%d-%m-%Y') if rec_entry.start_date else ''
        rec_entry.expire_date = datetime.datetime.strftime(rec_entry.expire_date, '%d-%m-%Y') if rec_entry.expire_date else ''
        rec_entry.run_date = datetime.datetime.strftime(rec_entry.run_date, '%d-%m-%Y') if rec_entry.run_date else ''
        rec_entry.maintained_date = datetime.datetime.strftime(rec_entry.maintained_date, '%d-%m-%Y') if rec_entry.maintained_date else ''

        form = APPaymentREForm(company_id=company_id, instance=rec_entry)

        # batch_form.initial['description'] = rec_entry.description
        # batch_form.initial['batch_amount'] = rec_entry.total_amount
        # batch_form.initial['no_entries'] = 1
        schedule_list = Schedule.objects.filter(company_id=company_id, is_hidden=False)
        transaction_list = RecurringEntryDetail.objects.filter(rec_entry_id=id)

        context.update({'form': form, 'batch_form': batch_form, 'distribution_code_list': distribution_code_list_ap,
                        'account_list': account_list, 'tax_list': tax_list, 'batch': batch, 'entry_no': entry_no,
                        'is_rec_entry': True, 'schedule_list': schedule_list, 'rec_entry': rec_entry,
                        'transactions': transaction_list, 'next_journal': next_journal, 
                        'prev_journal': prev_journal, 'first_journal': first_journal,
                        'last_journal': last_journal, 'next_batch': next_batch, 'prev_batch': prev_batch,
                        'n_batch': n_batch, 'p_batch': p_batch, 'is_decimal': rec_entry.currency.is_decimal})

        return render(request, 'AP_payment_entry.html', context)
    except Exception as e:
        print(EXCEPTION_JOURNAL_ADD % ('AP Payment RE'), e)
        logging.error(traceback.format_exc())
        messages.error(request, EXCEPTION_JOURNAL_ADD % ('AP Payment RE'))
        return redirect('/accounting/rec_batch_list/4/')


@csrf_exempt
@login_required
@check_fiscal
def add_arreceipt_recurring_entry(request, batch_id):
    try:
        with transactionlib.atomic():
            company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
            company = Company.objects.get(pk=company_id)
            schedule_id = 0
            entry_no = 1
            prev_batch = 0
            next_batch = 0
            prev_journal = 0
            next_journal = 0
            first_journal = 0
            last_journal = 0
            batch = RecurringBatch.objects.none()
            batch_form = RecBatchInfoForm()
            if int(batch_id) != 0:
                batch = RecurringBatch.objects.get(pk=batch_id)
                batch_form = RecBatchInfoForm(instance=batch)

            form = ARReceiptREForm(company_id=company_id)
            bank_id = None
            distribution_code_list = DistributionCode.objects.filter(is_hidden=False, is_active=True,
                                                                     company_id=company_id,
                                                                     type=DIS_CODE_TYPE_DICT['AR Distribution Code'])
            account_list = Account.objects.filter(is_hidden=False, is_active=True, company_id=company_id).order_by('account_segment', 'code')

            tax_list = Tax.objects.filter(is_hidden=False,
                                          company_id=company_id,
                                          tax_group__company_id=company_id,
                                          tax_group__transaction_type=int(TAX_TRX_TYPES_DICT['Sales']))

            distribution_code_list_ar = []
            for dist_code_list in distribution_code_list:
                distribution_code_list_obj = {'id': dist_code_list.id,
                                              'code': dist_code_list.code,
                                              'name': dist_code_list.name,
                                              'gl_account_id': dist_code_list.gl_account_id, 'tax_id': None}
                for tax_code in tax_list:
                    if tax_code.distribution_code_id:
                        if tax_code.distribution_code_id == dist_code_list.id:
                            distribution_code_list_obj['tax_id'] = tax_code.id
                            break
                distribution_code_list_ar.append(distribution_code_list_obj)
            if request.method == 'GET':
                if int(batch_id) != 0:
                    batch_form = RecBatchInfoForm(instance=batch)
                    journal_list = RecurringEntry.objects.filter(batch_id=batch_id, company_id=company_id, is_hidden=False)
                    no_entries = journal_list.count()
                    schedule_id = journal_list.first().schedule_id
                    entry_no = no_entries + 1
                    last_entry = journal_list.last()
                    if last_entry:
                        bank_id = last_entry.bank_id
                        form.initial = {'bank': bank_id, 'currency': last_entry.bank.currency_id,
                                        'code': entry_no}
                    pay_type = PaymentCode.objects.filter(is_hidden=False).values()
                    batch_form.initial = {'no_entries': no_entries}
                    if no_entries > 0:
                        default_bank = RecurringEntry.objects.filter(batch_id=batch_id, company_id=company_id,
                                                              is_hidden=False).first().bank
                        form.initial = {'bank': default_bank.id, 'currency': default_bank.currency_id,
                                        'code': int(last_entry.code) + 1}
                    else:
                        form.initial = {'code': no_entries + 1}
                    prev_journal, next_journal, first_journal, last_journal = get_batch_journals(batch.id, None, True)
                    prev_batch, next_batch = get_recurring_nearest_batches(company_id, dict(TRANSACTION_TYPES)['AR Receipt'], batch.batch_no)
                else:
                    batch_form.initial = {'no_entries': 0}
                    form.initial = {'code': 1}
                    prev_batch, next_batch = get_recurring_nearest_batches(company_id, dict(TRANSACTION_TYPES)['AR Receipt'], None)

                form.fields['payment_code'].widget.attrs['data-dis-code'] = []
                doc_number = AR_AP_generate_document_number(
                    company.id,
                    dict(TRANSACTION_TYPES)['AR Receipt'])
                form.initial = {'document_number': doc_number}

                for i, optionSelect in enumerate(form.fields['payment_code'].widget.choices.queryset):
                    if optionSelect.id:
                        form.fields['payment_code'].widget.attrs['data-dis-code'].append(
                            {'id': optionSelect.id, 'payment_type': optionSelect.payment_type,
                             'code': optionSelect.code})
                form.fields['payment_code'].widget.attrs['data-dis-code'] = json.dumps(
                    form.fields['payment_code'].widget.attrs['data-dis-code'])

                schedule_list = Schedule.objects.filter(company_id=company_id, is_hidden=False)
                return render(request, 'AR_receipt_form.html',
                              {'form': form, 'batch_form': batch_form, "batch": batch,
                               'distribution_code_list': distribution_code_list_ar, 'schedule_id': schedule_id,
                               'account_list': account_list, 'tax_list': tax_list, 'batch_type': 3,
                               'batch_id': int(batch_id), 'journal_type': dict(TRANSACTION_TYPES)['AR Receipt'],
                               'journal_id': 0, 'bank_id': bank_id, 'is_rec_entry': True, 'schedule_list': schedule_list,
                               'next_journal': next_journal, 'prev_journal': prev_journal, 'first_journal': first_journal, 
                               'last_journal': last_journal, 'next_batch': next_batch, 'prev_batch': prev_batch, 'entry_no': entry_no})

            if request.method == "POST":
                batch_entry = batch_form.save(commit=False)
                
                if int(batch_id) == 0:
                    batch_entry.company_id = company_id
                    batch_entry.description = request.POST.get('description')
                    batch_entry.status = int(STATUS_TYPE_DICT['Open'])
                    batch_entry.input_type = int(INPUT_TYPE_DICT['Manual Entry'])
                    batch_entry.batch_type = dict(TRANSACTION_TYPES)['AR Receipt']
                    batch_entry.currency_id = request.POST['currency']
                    batch_entry.source_ledger = SOURCE_LEDGER_DICT['Account Receivable']
                    batch_entry.batch_no = generate_recurring_batch_number(company_id, dict(TRANSACTION_TYPES)['AR Receipt'])
                    batch_entry.batch_date = datetime.datetime.today()
                    batch_entry.create_date = datetime.datetime.now()
                batch_entry.update_date = datetime.datetime.now()
                batch_entry.update_by = request.user.id
                batch_entry.no_entries += 1
                batch_entry.save()

                rec_entry = RecurringEntry()
                rec_entry.batch_id = batch_entry.id
                rec_entry.company_id = company_id
                if request.POST.get('re_code'):
                    rec_entry.code = request.POST.get('re_code')
                else:
                    rec_entry.code = batch_entry.no_entries
                rec_entry.re_description = request.POST.get('re_description')
                rec_entry.description = request.POST.get('re_description')
                rec_entry.name = request.POST.get('name') if request.POST.get('name') else ""
                rec_entry.journal_type = dict(TRANSACTION_TYPES)['AR Receipt']
                rec_entry.posting_date = datetime.datetime.strptime(
                    request.POST.get('posting_date'), '%Y-%m-%d')
                rec_entry.start_date = datetime.datetime.strptime(
                    request.POST.get('start_date'), '%Y-%m-%d')
                rec_entry.run_date = rec_entry.start_date - datetime.timedelta(1)
                rec_entry.maintained_date = datetime.date.today()
                if request.POST.get('is_expire'):
                    rec_entry.is_expire = request.POST.get('is_expire')
                    rec_entry.expire_date = datetime.datetime.strptime(
                        request.POST.get('expire_date'), '%Y-%m-%d')
                else:
                    rec_entry.is_expire = False
                    rec_entry.expire_date = None
                if request.POST.get('is_active'):
                    rec_entry.is_active = request.POST.get('is_active')
                else:
                    rec_entry.is_active = False
                rec_entry.exch_rate_type = 'Current Rate'
                rec_entry.bank_id = request.POST.get('bank')
                rec_entry.currency_id = request.POST.get('currency')
                rec_entry.payment_code_id = request.POST.get('payment_code')
                rec_entry.payment_check_number = request.POST.get('payment_check_number')
                rec_entry.reference = request.POST.get('reference')
                rec_entry.transaction_type = request.POST.get('transaction_type')
                rec_entry.schedule_id = request.POST.get('schedule_id')
                rec_entry.document_number = AR_AP_generate_document_number(
                        company.id,
                        dict(TRANSACTION_TYPES)['AR Receipt'])
                rec_entry.invoice_number = request.POST.get('invoice_number')
                rec_entry.customer_id = request.POST.get('customer')
                rec_entry.account_set_id = request.POST.get('account_set')
                rec_entry.amount = float(request.POST.get('amount').replace(
                    ',', '')) if request.POST.get('amount') else 0.00
                rec_entry.tax_amount = float(request.POST.get('tax_amount').replace(
                    ',', '')) if request.POST.get('tax_amount') else 0.00
                rec_entry.total_amount = float(request.POST.get('total_amount').replace(
                    ',', '')) if request.POST.get('total_amount') else 0.00
                perd_month, perd_year = get_fiscal_year_period(company_id, rec_entry.posting_date)
                if perd_month and perd_year:
                    rec_entry.perd_month = perd_month
                    rec_entry.perd_year = perd_year
                else:
                    rec_entry.perd_month = int(request.POST.get('perd_month'))
                    rec_entry.perd_year = int(request.POST.get('perd_year'))
                if request.POST.get('is_manual_doc'):
                    rec_entry.is_manual_doc = request.POST.get('is_manual_doc')
                else:
                    rec_entry.is_manual_doc = 0
                rec_entry.update_by = request.user.id
                # get latest exchange rate
                if 'exchange_rate' in request.POST and request.POST['exchange_rate']:
                    rec_entry.exchange_rate = request.POST['exchange_rate']
                if 'exchange_rate_fk' in request.POST and request.POST['exchange_rate_fk']:
                    exchange_rate = ExchangeRate.objects.get(pk=request.POST['exchange_rate_fk'])
                if not rec_entry.exchange_rate:
                    from_currency = rec_entry.bank.currency_id
                    to_currency = company.currency_id
                    exchange_rate = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                                from_currency_id=from_currency,
                                                                to_currency_id=to_currency,
                                                                flag='ACCOUNTING', exchange_date=str(rec_entry.posting_date.year) + '-' + str(rec_entry.posting_date.month) + '-01').first()
                    if not exchange_rate:
                        exchange_rate = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                                    from_currency_id=from_currency,
                                                                    to_currency_id=to_currency,
                                                                    exchange_date__lte=rec_entry.posting_date,
                                                                    flag='ACCOUNTING').order_by('exchange_date').last()
                    if not exchange_rate:
                        if from_currency == to_currency:
                            rec_entry.exchange_rate = 1
                            rec_entry.exchange_rate_fk_id = None
                            exchange_rate = None
                        else:
                            try:
                                transactionlib.rollback()
                            except:
                                pass
                            messages.error(request, NO_EXCHANGE_RATE)
                            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
                    else:
                        rec_entry.exchange_rate = exchange_rate.rate
                        rec_entry.exchange_rate_fk_id = exchange_rate.id
                else:
                    exchange_rate = None
                if 'orig_rate' in request.POST:
                    rec_entry.orig_exch_rate = request.POST['orig_rate'] if request.POST['orig_rate'] != '' else exchange_rate.rate
                else:
                    rec_entry.orig_exch_rate = rec_entry.exchange_rate
                rec_entry.save()

                if int(batch_id) != 0:
                    batch_entry.batch_amount = float(batch_entry.batch_amount) + float(rec_entry.total_amount)
                batch_entry.save()

                if rec_entry.transaction_type == RECEIPT_TRANSACTION_TYPES_DICT['Misc Receipt']:  # Misc transaction
                    rec_entry.amount = request.POST['amount'].replace(",", "")
                    rec_entry.tax_amount = request.POST['tax_amount'].replace(",", "")
                    rec_entry.total_amount = request.POST['total_amount'].replace(",", "")
                    rec_entry.document_type = DOCUMENT_TYPE_DICT['Miscellaneous Receipt']
                    rec_entry.save()
                elif rec_entry.transaction_type == RECEIPT_TRANSACTION_TYPES_DICT['Unapplied Cash']:  # Misc transaction
                    rec_entry.document_type = DOCUMENT_TYPE_DICT['Unapplied Cash']
                    rec_entry.amount = request.POST['payment_amount'].replace(",", "")
                    rec_entry.total_amount = request.POST['payment_amount'].replace(",", "")
                    rec_entry.document_amount = request.POST['payment_amount'].replace(",", "")
                    rec_entry.payment_amount = request.POST['payment_amount'].replace(",", "")
                    rec_entry.original_amount = request.POST['original_amount'].replace(",", "")
                    rec_entry.receipt_unapplied = request.POST['receipt_unapplied'].replace(",", "")
                    rec_entry.customer_unapplied = request.POST['customer_unapplied'].replace(",", "")
                    rec_entry.original_currency_id = rec_entry.customer.currency.id
                    rec_entry.payment_currency_id = rec_entry.bank.currency.id
                    rec_entry.orig_exch_rate = request.POST['orig_exch_rate'] if request.POST['orig_exch_rate'] else rec_entry.exchange_rate
                    rec_entry.save()
                else:  # Normal transaction
                    rec_entry.document_type = DOCUMENT_TYPE_DICT['Receipt']
                    rec_entry.amount = request.POST['payment_amount'].replace(",", "")
                    rec_entry.total_amount = request.POST['payment_amount'].replace(",", "")
                    rec_entry.original_amount = request.POST['original_amount'].replace(",", "")
                    rec_entry.receipt_unapplied = request.POST['receipt_unapplied'].replace(",", "")
                    rec_entry.customer_unapplied = request.POST['customer_unapplied'].replace(",", "")
                    rec_entry.original_currency_id = rec_entry.customer.currency.id
                    rec_entry.payment_currency_id = rec_entry.bank.currency.id
                    rec_entry.orig_exch_rate = request.POST['orig_exch_rate'] if request.POST['orig_exch_rate'] else rec_entry.exchange_rate
                    rec_entry.save()

                transaction_list = None
                if request.POST['listTrans']:
                    transaction_list = ast.literal_eval(request.POST['listTrans'])
                if transaction_list != None:
                    if rec_entry.transaction_type == RECEIPT_TRANSACTION_TYPES_DICT['Misc Receipt']:  # Misc transaction
                        for transaction in transaction_list:
                            trans = RecurringEntryDetail()
                            trans.rec_entry_id = rec_entry.id
                            trans.description = transaction['description']
                            trans.account_id = transaction['account_id']
                            trans.company_id = company.id
                            trans.distribution_code_id = transaction['distribution_id']
                            trans.currency_id = rec_entry.currency.id
                            if transaction['tax_id'] and transaction['tax_id'] is not '0':
                                trans.tax_id = transaction['tax_id']
                            trans.amount = float(transaction['amount'].replace(',', ''))
                            trans.tax_amount = float(transaction['tax_amount'].replace(',', ''))
                            trans.total_amount = float(transaction['total_amount'].replace(',', ''))
                            trans.is_credit_account = True
                            trans.is_debit_account = False
                            trans.is_tax_include = int(transaction['is_tax_included']) if transaction['is_tax_included'] else 0
                            trans.is_tax_transaction = int(transaction['is_tax_transaction']) if transaction['is_tax_transaction'] else 0
                            trans.is_manual_tax_input = int(transaction['is_manual_tax_input']) if transaction['is_manual_tax_input'] else 0
                            # trans.remark = transaction['description']
                            trans.is_hidden = False
                            trans.create_date = datetime.datetime.today()
                            trans.update_date = datetime.datetime.today()
                            trans.update_by = request.user.id
                            trans.transaction_date = rec_entry.posting_date
                            trans.reference = rec_entry.reference
                            trans.exchange_rate = rec_entry.exchange_rate
                            trans.functional_currency_id = company.currency_id
                            trans.functional_balance_type = (BALANCE_TYPE_DICT['Credit'],
                                                             BALANCE_TYPE_DICT['Debit'])[trans.is_debit_account]
                            trans.save()
                    elif rec_entry.transaction_type == RECEIPT_TRANSACTION_TYPES_DICT['Unapplied Cash']:  # Misc transaction
                        account_set_item = AccountSet.objects.get(pk=request.POST['account_set'])
                        for transaction in transaction_list:
                            trans = RecurringEntryDetail()
                            trans.rec_entry_id = rec_entry.id
                            trans.description = transaction['description']
                            trans.account_id = transaction['account_id']
                            trans.company_id = company.id
                            trans.distribution_code_id = transaction['distribution_id']
                            if rec_entry.original_currency_id:
                                trans.currency_id = rec_entry.original_currency_id
                            else:
                                trans.currency_id = rec_entry.currency_id
                            if trans.currency_id == rec_entry.currency_id:
                                trans.exchange_rate = rec_entry.exchange_rate
                            elif trans.currency_id == company.currency_id:
                                trans.exchange_rate = 1.0
                            elif trans.currency_id != company.currency_id and\
                                'orig_exch_rate' in request.POST and request.POST['orig_exch_rate'] and\
                                    request.POST['orig_exch_rate'] != 1.0:
                                trans.exchange_rate = request.POST['orig_exch_rate']
                            if not trans.exchange_rate:
                                if trans.currency_id != rec_entry.currency_id:
                                    from_currency = trans.currency_id
                                    to_currency = company.currency_id

                                    exchange_rate = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                                                from_currency_id=from_currency,
                                                                                to_currency_id=to_currency,
                                                                                flag='ACCOUNTING', exchange_date=str(rec_entry.posting_date.year) + '-' + str(rec_entry.posting_date.month) + '-01').first()
                                    if not exchange_rate:
                                        exchange_rate = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                                                    from_currency_id=from_currency,
                                                                                    to_currency_id=to_currency,
                                                                                    exchange_date__lte=rec_entry.posting_date,
                                                                                    flag='ACCOUNTING').order_by('exchange_date').last()
                                    if exchange_rate:
                                        trans.exchange_rate = exchange_rate.rate
                                    else:
                                        trans.exchange_rate = 1.0
                                else:
                                    trans.exchange_rate = rec_entry.exchange_rate
                            trans.amount = rec_entry.total_amount
                            trans.tax_amount = 0
                            trans.total_amount = rec_entry.total_amount
                            trans.account_id = account_set_item.control_account_id if account_set_item.control_account else rec_entry.account_set.control_account_id
                            trans.remark = ''
                            trans.is_tax_include = False
                            trans.is_tax_transaction = False
                            trans.is_manual_tax_input = False
                            trans.is_credit_account = True
                            trans.is_debit_account = False
                            # trans.remark = transaction['description']
                            trans.is_hidden = False
                            trans.create_date = datetime.datetime.today()
                            trans.update_date = datetime.datetime.today()
                            trans.update_by = request.user.id
                            trans.transaction_date = rec_entry.posting_date
                            trans.reference = rec_entry.reference
                            trans.exchange_rate = rec_entry.exchange_rate
                            trans.functional_currency_id = company.currency_id
                            if exchange_rate:
                                trans.exch_rate_date = exchange_rate.exchange_date
                            else:
                                trans.exch_rate_date = rec_entry.posting_date
                            trans.functional_balance_type = (BALANCE_TYPE_DICT['Credit'],
                                                             BALANCE_TYPE_DICT['Debit'])[trans.is_debit_account]
                            trans.save()

                    else:  # Normal transaction
                        account_set_item = AccountSet.objects.get(pk=request.POST['account_set'])
                        for transaction in transaction_list:
                            trans = RecurringEntryDetail()
                            trans.rec_entry_id = rec_entry.id
                            trans.company_id = company.id
                            trans.is_credit_account = True
                            trans.is_debit_account = False
                            trans.currency_id = rec_entry.currency.id
                            trans.document_number = transaction['document_number']
                            trans.document_type = transaction['document_type']
                            trans.payment_number = transaction['payment_number']
                            trans.pending_balance = float(
                                transaction['pending_balance'].replace(',', ''))
                            trans.applied_amount = float(
                                transaction['applied_amount'].replace(',', ''))
                            trans.discount_amount = float(
                                transaction['discount_amount'].replace(',', ''))
                            trans.net_balance = float(
                                transaction['net_balance'].replace(',', ''))
                            trans.original_amount = float(
                                transaction['original_amount'].replace(',', ''))
                            trans.document_date = transaction['document_date']
                            trans.due_date = transaction['due_date']
                            if rec_entry.original_currency_id:
                                trans.currency_id = rec_entry.original_currency_id
                            else:
                                trans.currency_id = rec_entry.currency_id
                            if trans.currency_id == rec_entry.currency_id:
                                trans.exchange_rate = rec_entry.exchange_rate
                            elif trans.currency_id == company.currency_id:
                                trans.exchange_rate = 1.0
                            elif trans.currency_id != company.currency_id and\
                                'orig_exch_rate' in request.POST and request.POST['orig_exch_rate'] and\
                                    request.POST['orig_exch_rate'] != 1.0:
                                trans.exchange_rate = request.POST['orig_exch_rate']
                            if not trans.exchange_rate:
                                if trans.currency_id != rec_entry.currency_id:
                                    from_currency = trans.currency_id
                                    to_currency = company.currency_id

                                    exchange_rate = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                                                from_currency_id=from_currency,
                                                                                to_currency_id=to_currency,
                                                                                flag='ACCOUNTING', exchange_date=str(rec_entry.posting_date.year) + '-' + str(rec_entry.posting_date.month) + '-01').first()
                                    if not exchange_rate:
                                        exchange_rate = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                                                    from_currency_id=from_currency,
                                                                                    to_currency_id=to_currency,
                                                                                    exchange_date__lte=rec_entry.posting_date,
                                                                                    flag='ACCOUNTING').order_by('exchange_date').last()
                                    if exchange_rate:
                                        trans.exchange_rate = exchange_rate.rate
                                    else:
                                        trans.exchange_rate = 1.0
                                else:
                                    trans.exchange_rate = rec_entry.exchange_rate
                            trans.related_invoice_id = transaction['invoice_id']
                            trans.is_hidden = False
                            trans.create_date = datetime.datetime.today()
                            trans.update_date = datetime.datetime.today()
                            trans.update_by = request.user.id
                            trans.reference = rec_entry.reference
                            trans.functional_currency_id = company.currency_id
                            if exchange_rate:
                                trans.exch_rate_date = exchange_rate.exchange_date
                            else:
                                trans.exch_rate_date = rec_entry.posting_date
                            trans.functional_balance_type = (BALANCE_TYPE_DICT['Credit'],
                                                             BALANCE_TYPE_DICT['Debit'])[trans.is_debit_account]
                            trans.save()

                batch_amount = RecurringEntry.objects.filter(batch_id=batch_entry.id, company_id=company_id, is_hidden=0) \
                    .aggregate(batch_amount=Sum('total_amount'))
                batch_entry.batch_amount = batch_amount.get('batch_amount', Decimal(0.000000))
                batch_entry.save()

                messages.success(request, 'AR Receipt Recurring Entry is created')
                return redirect('/accounting/add/ARReceipt-RE/' + str(batch_entry.id) + '/')

            else:
                schedule_list = Schedule.objects.filter(company_id=company_id, is_hidden=False)
                return render(request, 'AR_receipt_form.html',
                              {'form': form, 'distribution_code_list': distribution_code_list_ar, 'schedule_id': schedule_id,
                               'account_list': account_list, 'tax_list': tax_list, 'is_rec_entry': True,
                               'schedule_list': schedule_list, 'next_journal': next_journal, "batch_id": int(batch_id),
                               'prev_journal': prev_journal, 'first_journal': first_journal, 'last_journal': last_journal,
                               'next_batch': next_batch, 'prev_batch': prev_batch, 'entry_no': entry_no})
    except OSError as e:
        print(EXCEPTION_JOURNAL_ADD % ('AR Receipt RE'), e)
        logging.error(traceback.format_exc())
        messages.error(request, EXCEPTION_JOURNAL_ADD % ('AR Receipt RE'))
        return redirect('/accounting/rec_batch_list/3/')


@csrf_exempt
@login_required
@check_fiscal
def edit_arreceipt_recurring_entry(request, id):
    try:
        with transactionlib.atomic():
            company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
            company = Company.objects.get(pk=company_id)

            prev_batch = 0
            next_batch = 0
            prev_journal = 0
            next_journal = 0
            first_journal = 0
            last_journal = 0
            rec_entry = RecurringEntry.objects.get(pk=id)
            batch = RecurringBatch.objects.get(pk=rec_entry.batch_id)
            batch_id = batch.id
            if batch:
                prev_journal, next_journal, first_journal, last_journal = get_batch_journals(batch.id, rec_entry, True)
                prev_batch, next_batch = get_recurring_nearest_batches(company_id, dict(TRANSACTION_TYPES)['AR Receipt'], batch.batch_no)
            else:
                prev_batch, next_batch = get_recurring_nearest_batches(
                    company_id, dict(TRANSACTION_TYPES)['AR Receipt'], None)

            batch_form = RecBatchInfoForm(instance=batch)
            bank_id = rec_entry.bank_id
            distribution_code_list = DistributionCode.objects.filter(is_hidden=False, is_active=True,
                                                                     company_id=company_id,
                                                                     type=DIS_CODE_TYPE_DICT['AR Distribution Code'])
            account_list = Account.objects.filter(is_hidden=False, is_active=True, company_id=company_id).order_by('account_segment', 'code')

            tax_list = Tax.objects.filter(is_hidden=False,
                                          company_id=company_id,
                                          tax_group__company_id=company_id,
                                          tax_group__transaction_type=int(TAX_TRX_TYPES_DICT['Sales']))

            distribution_code_list_ar = []
            for dist_code_list in distribution_code_list:
                distribution_code_list_obj = {'id': dist_code_list.id,
                                              'code': dist_code_list.code,
                                              'name': dist_code_list.name,
                                              'gl_account_id': dist_code_list.gl_account_id, 'tax_id': None}
                for tax_code in tax_list:
                    if tax_code.distribution_code_id:
                        if tax_code.distribution_code_id == dist_code_list.id:
                            distribution_code_list_obj['tax_id'] = tax_code.id
                            break
                distribution_code_list_ar.append(distribution_code_list_obj)
            
            rec_entry.start_date = datetime.datetime.strftime(rec_entry.start_date, '%d-%m-%Y') if rec_entry.start_date else ''
            rec_entry.expire_date = datetime.datetime.strftime(rec_entry.expire_date, '%d-%m-%Y') if rec_entry.expire_date else ''
            rec_entry.run_date = datetime.datetime.strftime(rec_entry.run_date, '%d-%m-%Y') if rec_entry.run_date else ''
            rec_entry.maintained_date = datetime.datetime.strftime(rec_entry.maintained_date, '%d-%m-%Y') if rec_entry.maintained_date else ''
            form = ARReceiptREForm(company_id=company_id, instance=rec_entry)


            form.fields['payment_code'].widget.attrs['data-dis-code'] = []

            for i, optionSelect in enumerate(form.fields['payment_code'].widget.choices.queryset):
                if optionSelect.id:
                    form.fields['payment_code'].widget.attrs['data-dis-code'].append(
                        {'id': optionSelect.id, 'payment_type': optionSelect.payment_type,
                            'code': optionSelect.code})
            form.fields['payment_code'].widget.attrs['data-dis-code'] = json.dumps(
                form.fields['payment_code'].widget.attrs['data-dis-code'])

            if request.method == "POST":
                rec_entry = RecurringEntry.objects.get(pk=id)
                rec_entry.company_id = company_id
                rec_entry.code = request.POST.get('re_code')
                rec_entry.re_description = request.POST.get('re_description')
                rec_entry.description = request.POST.get('description')
                rec_entry.name = request.POST.get('name') if request.POST.get('name') else ""
                rec_entry.journal_type = dict(TRANSACTION_TYPES)['AR Receipt']
                rec_entry.posting_date = datetime.datetime.strptime(
                    request.POST.get('posting_date'), '%Y-%m-%d')
                rec_entry.start_date = datetime.datetime.strptime(
                    request.POST.get('start_date'), '%Y-%m-%d')
                rec_entry.run_date = rec_entry.start_date - datetime.timedelta(1)
                rec_entry.maintained_date = datetime.date.today()
                if request.POST.get('is_expire'):
                    rec_entry.is_expire = request.POST.get('is_expire')
                    rec_entry.expire_date = datetime.datetime.strptime(
                        request.POST.get('expire_date'), '%Y-%m-%d')
                else:
                    rec_entry.is_expire = False
                    rec_entry.expire_date = None
                if request.POST.get('is_active'):
                    rec_entry.is_active = request.POST.get('is_active')
                else:
                    rec_entry.is_active = False
                rec_entry.exch_rate_type = 'Current Rate'
                rec_entry.bank_id = request.POST.get('bank')
                rec_entry.currency_id = request.POST.get('currency')
                rec_entry.payment_code_id = request.POST.get('payment_code')
                rec_entry.payment_check_number = request.POST.get('payment_check_number')
                rec_entry.reference = request.POST.get('reference')
                rec_entry.transaction_type = request.POST.get('transaction_type')
                rec_entry.schedule_id = request.POST.get('schedule_id')
                rec_entry.document_number = request.POST.get('document_number')
                rec_entry.invoice_number = request.POST.get('invoice_number')
                rec_entry.customer_id = request.POST.get('customer')
                rec_entry.account_set_id = request.POST.get('account_set')
                rec_entry.amount = float(request.POST.get('amount').replace(',', '')) if request.POST.get('amount') else 0.00
                rec_entry.tax_amount = float(request.POST.get('tax_amount').replace(',', '')) if request.POST.get('tax_amount') else 0.00
                rec_entry.total_amount = float(request.POST.get('total_amount').replace(',', '')) if request.POST.get('total_amount') else 0.00
                perd_month, perd_year = get_fiscal_year_period(company_id, rec_entry.posting_date)
                if perd_month and perd_year:
                    rec_entry.perd_month = perd_month
                    rec_entry.perd_year = perd_year
                else:
                    rec_entry.perd_month = int(request.POST.get('perd_month'))
                    rec_entry.perd_year = int(request.POST.get('perd_year'))
                if request.POST.get('is_manual_doc'):
                    rec_entry.is_manual_doc = request.POST.get('is_manual_doc')
                else:
                    rec_entry.is_manual_doc = 0
                rec_entry.update_by = request.user.id
                # get latest exchange rate
                if 'exchange_rate' in request.POST and request.POST['exchange_rate']:
                    rec_entry.exchange_rate = request.POST['exchange_rate']
                if 'exchange_rate_fk' in request.POST and request.POST['exchange_rate_fk']:
                    exchange_rate = ExchangeRate.objects.get(pk=request.POST['exchange_rate_fk'])
                if not rec_entry.exchange_rate:
                    from_currency = rec_entry.bank.currency_id
                    to_currency = company.currency_id
                    exchange_rate = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                                from_currency_id=from_currency,
                                                                to_currency_id=to_currency,
                                                                flag='ACCOUNTING', exchange_date=str(rec_entry.posting_date.year) + '-' + str(rec_entry.posting_date.month) + '-01').first()
                    if not exchange_rate:
                        exchange_rate = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                                    from_currency_id=from_currency,
                                                                    to_currency_id=to_currency,
                                                                    exchange_date__lte=rec_entry.posting_date,
                                                                    flag='ACCOUNTING').order_by('exchange_date').last()
                    if not exchange_rate:
                        if from_currency == to_currency:
                            rec_entry.exchange_rate = 1
                            rec_entry.exchange_rate_fk_id = None
                            exchange_rate = None
                        else:
                            try:
                                transactionlib.rollback()
                            except:
                                pass
                            messages.error(request, NO_EXCHANGE_RATE)
                            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
                    else:
                        rec_entry.exchange_rate = exchange_rate.rate
                        rec_entry.exchange_rate_fk_id = exchange_rate.id
                else:
                    exchange_rate = None
                if 'orig_rate' in request.POST:
                    rec_entry.orig_exch_rate = request.POST['orig_rate'] if request.POST['orig_rate'] != '' else exchange_rate.rate
                else:
                    rec_entry.orig_exch_rate = rec_entry.exchange_rate
                rec_entry.save()

                if rec_entry.transaction_type == RECEIPT_TRANSACTION_TYPES_DICT['Misc Receipt']:  # Misc transaction
                    rec_entry.amount = request.POST['amount'].replace(",", "")
                    rec_entry.tax_amount = request.POST['tax_amount'].replace(",", "")
                    rec_entry.total_amount = request.POST['total_amount'].replace(",", "")
                    rec_entry.document_type = DOCUMENT_TYPE_DICT['Miscellaneous Receipt']
                    rec_entry.save()
                elif rec_entry.transaction_type == RECEIPT_TRANSACTION_TYPES_DICT['Unapplied Cash']:  # Misc transaction
                    rec_entry.document_type = DOCUMENT_TYPE_DICT['Unapplied Cash']
                    rec_entry.amount = request.POST['payment_amount'].replace(",", "")
                    rec_entry.total_amount = request.POST['payment_amount'].replace(",", "")
                    rec_entry.document_amount = request.POST['payment_amount'].replace(",", "")
                    rec_entry.payment_amount = request.POST['payment_amount'].replace(",", "")
                    rec_entry.original_amount = request.POST['original_amount'].replace(",", "")
                    rec_entry.receipt_unapplied = request.POST['receipt_unapplied'].replace(",", "")
                    rec_entry.customer_unapplied = request.POST['customer_unapplied'].replace(",", "")
                    rec_entry.original_currency_id = rec_entry.customer.currency.id
                    rec_entry.payment_currency_id = rec_entry.bank.currency.id
                    rec_entry.orig_exch_rate = request.POST['orig_exch_rate'] if request.POST['orig_exch_rate'] else rec_entry.exchange_rate
                    rec_entry.save()
                else:  # Normal transaction
                    rec_entry.document_type = DOCUMENT_TYPE_DICT['Receipt']
                    rec_entry.amount = request.POST['payment_amount'].replace(",", "")
                    rec_entry.total_amount = request.POST['payment_amount'].replace(",", "")
                    rec_entry.original_amount = request.POST['original_amount'].replace(",", "")
                    rec_entry.receipt_unapplied = request.POST['receipt_unapplied'].replace(",", "")
                    rec_entry.customer_unapplied = request.POST['customer_unapplied'].replace(",", "")
                    rec_entry.original_currency_id = rec_entry.customer.currency.id
                    rec_entry.payment_currency_id = rec_entry.bank.currency.id
                    rec_entry.orig_exch_rate = request.POST['orig_exch_rate'] if request.POST['orig_exch_rate'] else rec_entry.exchange_rate
                    rec_entry.save()

                transaction_list = RecurringEntryDetail.objects.filter(rec_entry_id=id)
                if transaction_list:
                    for trx in transaction_list:
                        trx.delete()

                transaction_list = None
                if request.POST['listTrans']:
                    transaction_list = ast.literal_eval(request.POST['listTrans'])
                if transaction_list != None:
                    if rec_entry.transaction_type == RECEIPT_TRANSACTION_TYPES_DICT['Misc Receipt']:  # Misc transaction
                        # rec_entry.amount = request.POST['amount'].replace(",", "")
                        # rec_entry.tax_amount = request.POST['tax_amount'].replace(",", "")
                        # rec_entry.total_amount = request.POST['total_amount'].replace(",", "")
                        # rec_entry.document_type = DOCUMENT_TYPE_DICT['Miscellaneous Receipt']
                        # rec_entry.save()
                        for transaction in transaction_list:
                            trans = RecurringEntryDetail()
                            trans.rec_entry_id = rec_entry.id
                            trans.description = transaction['description']
                            trans.account_id = transaction['account_id']
                            trans.company_id = company.id
                            trans.distribution_code_id = transaction['distribution_id']
                            trans.currency_id = rec_entry.currency.id
                            if transaction['tax_id'] and transaction['tax_id'] is not '0':
                                trans.tax_id = transaction['tax_id']
                            trans.amount = float(transaction['amount'].replace(',', ''))
                            trans.tax_amount = float(transaction['tax_amount'].replace(',', ''))
                            trans.total_amount = float(transaction['total_amount'].replace(',', ''))
                            trans.is_credit_account = True
                            trans.is_debit_account = False
                            trans.is_tax_include = int(transaction['is_tax_included']) if transaction['is_tax_included'] else 0
                            trans.is_tax_transaction = int(transaction['is_tax_transaction']) if transaction['is_tax_transaction'] else 0
                            trans.is_manual_tax_input = int(transaction['is_manual_tax_input']) if transaction['is_manual_tax_input'] else 0
                            # trans.remark = transaction['description']
                            trans.is_hidden = False
                            trans.create_date = datetime.datetime.today()
                            trans.update_date = datetime.datetime.today()
                            trans.update_by = request.user.id
                            trans.transaction_date = rec_entry.posting_date
                            trans.reference = rec_entry.reference
                            trans.exchange_rate = rec_entry.exchange_rate
                            trans.functional_currency_id = company.currency_id
                            trans.functional_balance_type = (BALANCE_TYPE_DICT['Credit'],
                                                             BALANCE_TYPE_DICT['Debit'])[trans.is_debit_account]
                            trans.save()
                    elif rec_entry.transaction_type == RECEIPT_TRANSACTION_TYPES_DICT['Unapplied Cash']:  # Misc transaction
                        # rec_entry.document_type = DOCUMENT_TYPE_DICT['Unapplied Cash']
                        # rec_entry.amount = request.POST['payment_amount'].replace(",", "")
                        # rec_entry.total_amount = request.POST['payment_amount'].replace(",", "")
                        # rec_entry.payment_amount = request.POST['payment_amount'].replace(",", "")
                        # rec_entry.document_amount = request.POST['payment_amount'].replace(",", "")
                        # rec_entry.original_amount = request.POST['original_amount'].replace(",", "")
                        # rec_entry.receipt_unapplied = request.POST['receipt_unapplied'].replace(",", "")
                        # rec_entry.customer_unapplied = request.POST['customer_unapplied'].replace(",", "")
                        # rec_entry.original_currency_id = rec_entry.customer.currency.id
                        # rec_entry.payment_currency_id = rec_entry.bank.currency.id
                        # rec_entry.orig_exch_rate = request.POST['orig_exch_rate'] if request.POST['orig_exch_rate'] else rec_entry.exchange_rate
                        # rec_entry.save()
                        account_set_item = AccountSet.objects.get(pk=request.POST['account_set'])
                        for transaction in transaction_list:
                            trans = RecurringEntryDetail()
                            trans.rec_entry_id = rec_entry.id
                            trans.description = transaction['description']
                            trans.account_id = transaction['account_id']
                            trans.company_id = company.id
                            trans.distribution_code_id = transaction['distribution_id']
                            if rec_entry.original_currency_id:
                                trans.currency_id = rec_entry.original_currency_id
                            else:
                                trans.currency_id = rec_entry.currency_id
                            if trans.currency_id == rec_entry.currency_id:
                                trans.exchange_rate = rec_entry.exchange_rate
                            elif trans.currency_id == company.currency_id:
                                trans.exchange_rate = 1.0
                            elif trans.currency_id != company.currency_id and\
                                'orig_exch_rate' in request.POST and request.POST['orig_exch_rate'] and\
                                    request.POST['orig_exch_rate'] != 1.0:
                                trans.exchange_rate = request.POST['orig_exch_rate']
                            if not trans.exchange_rate:
                                if trans.currency_id != rec_entry.currency_id:
                                    from_currency = trans.currency_id
                                    to_currency = company.currency_id

                                    exchange_rate = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                                                from_currency_id=from_currency,
                                                                                to_currency_id=to_currency,
                                                                                flag='ACCOUNTING', exchange_date=str(rec_entry.posting_date.year) + '-' + str(rec_entry.posting_date.month) + '-01').first()
                                    if not exchange_rate:
                                        exchange_rate = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                                                    from_currency_id=from_currency,
                                                                                    to_currency_id=to_currency,
                                                                                    exchange_date__lte=rec_entry.posting_date,
                                                                                    flag='ACCOUNTING').order_by('exchange_date').last()
                                    if exchange_rate:
                                        trans.exchange_rate = exchange_rate.rate
                                    else:
                                        trans.exchange_rate = 1.0
                                else:
                                    trans.exchange_rate = rec_entry.exchange_rate
                            trans.amount = rec_entry.total_amount
                            trans.tax_amount = 0
                            trans.total_amount = rec_entry.total_amount
                            trans.account_id = account_set_item.control_account_id if account_set_item.control_account else rec_entry.account_set.control_account_id
                            trans.remark = ''
                            trans.is_tax_include = False
                            trans.is_tax_transaction = False
                            trans.is_manual_tax_input = False
                            trans.is_credit_account = True
                            trans.is_debit_account = False
                            # trans.remark = transaction['description']
                            trans.is_hidden = False
                            trans.create_date = datetime.datetime.today()
                            trans.update_date = datetime.datetime.today()
                            trans.update_by = request.user.id
                            trans.transaction_date = rec_entry.posting_date
                            trans.reference = rec_entry.reference
                            trans.exchange_rate = rec_entry.exchange_rate
                            trans.functional_currency_id = company.currency_id
                            if exchange_rate:
                                trans.exch_rate_date = exchange_rate.exchange_date
                            else:
                                trans.exch_rate_date = rec_entry.posting_date
                            trans.functional_balance_type = (BALANCE_TYPE_DICT['Credit'],
                                                             BALANCE_TYPE_DICT['Debit'])[trans.is_debit_account]
                            trans.save()
                    else:  # Normal transaction
                        # rec_entry.document_type = DOCUMENT_TYPE_DICT['Receipt']
                        # rec_entry.amount = request.POST['payment_amount'].replace(",", "")
                        # rec_entry.total_amount = request.POST['payment_amount'].replace(",", "")
                        # rec_entry.original_amount = request.POST['original_amount'].replace(",", "")
                        # rec_entry.receipt_unapplied = request.POST['receipt_unapplied'].replace(",", "")
                        # rec_entry.customer_unapplied = request.POST['customer_unapplied'].replace(",", "")
                        # rec_entry.original_currency_id = rec_entry.customer.currency.id
                        # rec_entry.payment_currency_id = rec_entry.bank.currency.id
                        # rec_entry.orig_exch_rate = request.POST['orig_exch_rate'] if request.POST['orig_exch_rate'] else rec_entry.exchange_rate
                        # rec_entry.save()
                        account_set_item = AccountSet.objects.get(pk=request.POST['account_set'])
                        for transaction in transaction_list:
                            trans = RecurringEntryDetail()
                            trans.rec_entry_id = rec_entry.id
                            trans.company_id = company.id
                            trans.is_credit_account = True
                            trans.is_debit_account = False
                            trans.currency_id = rec_entry.currency.id
                            trans.document_number = transaction['document_number']
                            trans.document_type = transaction['document_type']
                            trans.payment_number = transaction['payment_number']
                            trans.pending_balance = float(
                                transaction['pending_balance'].replace(',', ''))
                            trans.applied_amount = float(
                                transaction['applied_amount'].replace(',', ''))
                            trans.discount_amount = float(
                                transaction['discount_amount'].replace(',', ''))
                            trans.net_balance = float(
                                transaction['net_balance'].replace(',', ''))
                            trans.original_amount = float(
                                transaction['original_amount'].replace(',', ''))
                            trans.document_date = transaction['document_date']
                            trans.due_date = transaction['due_date']
                            if rec_entry.original_currency_id:
                                trans.currency_id = rec_entry.original_currency_id
                            else:
                                trans.currency_id = rec_entry.currency_id
                            if trans.currency_id == rec_entry.currency_id:
                                trans.exchange_rate = rec_entry.exchange_rate
                            elif trans.currency_id == company.currency_id:
                                trans.exchange_rate = 1.0
                            elif trans.currency_id != company.currency_id and\
                                'orig_exch_rate' in request.POST and request.POST['orig_exch_rate'] and\
                                    request.POST['orig_exch_rate'] != 1.0:
                                trans.exchange_rate = request.POST['orig_exch_rate']
                            if not trans.exchange_rate:
                                if trans.currency_id != rec_entry.currency_id:
                                    from_currency = trans.currency_id
                                    to_currency = company.currency_id

                                    exchange_rate = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                                                from_currency_id=from_currency,
                                                                                to_currency_id=to_currency,
                                                                                flag='ACCOUNTING', exchange_date=str(rec_entry.posting_date.year) + '-' + str(rec_entry.posting_date.month) + '-01').first()
                                    if not exchange_rate:
                                        exchange_rate = ExchangeRate.objects.filter(is_hidden=False, company_id=company_id,
                                                                                    from_currency_id=from_currency,
                                                                                    to_currency_id=to_currency,
                                                                                    exchange_date__lte=rec_entry.posting_date,
                                                                                    flag='ACCOUNTING').order_by('exchange_date').last()
                                    if exchange_rate:
                                        trans.exchange_rate = exchange_rate.rate
                                    else:
                                        trans.exchange_rate = 1.0
                                else:
                                    trans.exchange_rate = rec_entry.exchange_rate
                            trans.related_invoice_id = transaction['invoice_id']
                            trans.is_hidden = False
                            trans.create_date = datetime.datetime.today()
                            trans.update_date = datetime.datetime.today()
                            trans.update_by = request.user.id
                            trans.reference = rec_entry.reference
                            trans.functional_currency_id = company.currency_id
                            if exchange_rate:
                                trans.exch_rate_date = exchange_rate.exchange_date
                            else:
                                trans.exch_rate_date = rec_entry.posting_date
                            trans.functional_balance_type = (BALANCE_TYPE_DICT['Credit'],
                                                             BALANCE_TYPE_DICT['Debit'])[trans.is_debit_account]
                            trans.save()

                batch_amount = RecurringEntry.objects.filter(batch_id=batch.id, company_id=company_id, is_hidden=0) \
                    .aggregate(batch_amount=Sum('total_amount'))
                batch.batch_amount = batch_amount.get(
                    'batch_amount', Decimal(0.000000))
                batch.save()

                entry_list = RecurringEntry.objects.filter(batch_id=batch.id)
                for entry in entry_list:
                    if entry.id != rec_entry.id:
                        entry.schedule_id = rec_entry.schedule_id
                        entry.re_description = rec_entry.re_description
                        entry.is_expire = rec_entry.is_expire
                        entry.expire_date = rec_entry.expire_date
                        entry.maintained_date = rec_entry.maintained_date
                        entry.start_date = rec_entry.start_date
                        entry.is_active = rec_entry.is_active
                        entry.save()

                messages.success(request, 'AR Receipt Recurring Entry is updated')
                return redirect('/accounting/rec_batch_list/3/')

            else:
                schedule_list = Schedule.objects.filter(company_id=company_id, is_hidden=False)
                transaction_list = RecurringEntryDetail.objects.filter(rec_entry_id=id)
                if rec_entry.transaction_type == RECEIPT_TRANSACTION_TYPES_DICT['Receipt']:
                    return render(request, 'AR_receipt_form.html',
                                  {'form': form, 'batch_form': batch_form,
                                   'distribution_code_list': distribution_code_list_ar,
                                   'account_list': account_list, 'tax_list': tax_list, 'batch_type': 3,
                                   'batch_id': int(batch.id), 'journal_type': dict(TRANSACTION_TYPES)['AR Receipt'],
                                   'journal_id': 0, 'bank_id': bank_id, 'is_rec_entry': True, 'schedule_list': schedule_list,
                                   'rec_entry': rec_entry, 'transactions': transaction_list, 'next_journal': next_journal,
                                    'prev_journal': prev_journal, 'first_journal': first_journal, 'last_journal': last_journal,
                                    'next_batch': next_batch, 'prev_batch': prev_batch, 'batch': batch, 'is_decimal': rec_entry.currency.is_decimal,
                                    'is_ven_decimal': rec_entry.original_currency.is_decimal if rec_entry.original_currency else True})
                else:
                    return render(request, 'AR_receipt_form.html',
                                  {'form': form, 'batch_form': batch_form,
                                   'distribution_code_list': distribution_code_list_ar,
                                   'account_list': account_list, 'tax_list': tax_list, 'batch_type': 3,
                                   'batch_id': int(batch.id), 'journal_type': dict(TRANSACTION_TYPES)['AR Receipt'],
                                   'journal_id': 0, 'bank_id': bank_id, 'is_rec_entry': True, 'schedule_list': schedule_list,
                                   'rec_entry': rec_entry, 'misc_transactions': transaction_list, 'next_journal': next_journal,
                                    'prev_journal': prev_journal, 'first_journal': first_journal, 'last_journal': last_journal,
                                    'next_batch': next_batch, 'prev_batch': prev_batch, 'batch': batch, 'is_decimal': rec_entry.currency.is_decimal,
                                    'is_ven_decimal': rec_entry.original_currency.is_decimal if rec_entry.original_currency else True})

    except OSError as e:
        print(EXCEPTION_JOURNAL_ADD % ('AR Receipt RE'), e)
        logging.error(traceback.format_exc())
        messages.error(request, EXCEPTION_JOURNAL_ADD % ('AR Receipt RE'))
        return redirect('/accounting/rec_batch_list/3/')


@csrf_exempt
@login_required
def add_recurring_entry(request, batch_id):
    data_anu = {'journal_count': 0, 'total_debit': 0, 'total_credit': 0, 'unbalance_amount': 0,
                'input_state': '1', 'from_currency': 0, 'to_currency': 0}
    try:
        with transactionlib.atomic():
            company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
            currency_list = Currency.objects.filter(is_hidden=0)
            account_list = Account.objects.filter(
                is_hidden=False, is_active=True, company_id=company_id).order_by('account_segment', 'code')
            company = Company.objects.get(pk=company_id)

            batch = RecurringBatch()
            batch_form = RecBatchInfoForm()
            entry_list = RecurringEntry.objects.none()
            journal_type = dict(TRANSACTION_TYPES)['GL']
            src_code_list = SOURCE_TYPES_GL
            form = RecurringEntryForm(company_id=company_id)
            form.initial['code'] = len(entry_list) + 1

            prev_batch = 0
            next_batch = 0
            prev_journal = 0
            next_journal = 0
            first_journal = 0
            last_journal = 0
            schedule_id = 0
            batch_no = generate_recurring_batch_number(company_id, dict(TRANSACTION_TYPES)['GL'])
            if batch_id and int(batch_id) > 0:
                batch = RecurringBatch.objects.get(pk=batch_id)
                batch_form = RecBatchInfoForm(instance=batch)
                entry_list = RecurringEntry.objects.filter(batch_id=batch_id, company_id=company_id, is_hidden=False).order_by('id')
                schedule_id = entry_list.first().schedule_id
                prev_journal, next_journal, first_journal, last_journal = get_batch_journals(batch.id, None, True)
                prev_batch, next_batch = get_recurring_nearest_batches(company_id, dict(
                    TRANSACTION_TYPES)['GL'], batch.batch_no)

                data_anu['journal_count'] = entry_list.count()
                batch_no = batch.batch_no
                j_list = sorted(entry_list, key=lambda RecurringEntry: int(RecurringEntry.code))
                last_entry = j_list[-1].code
                entry_no = int(last_entry) + 1
                form.initial['code'] = entry_no
            else:
                prev_batch, next_batch = get_recurring_nearest_batches(company_id, dict(
                    TRANSACTION_TYPES)['GL'], None)
            batch_form.initial['batch_no'] = batch_no
            data_anu['to_currency'] = company.currency_id

            if request.method == "POST":
                # batch_form = RecBatchInfoForm(data=request.POST, instance=batch)
                # if batch_id and int(batch_id) > 0:
                #     Batch_Entry = batch_form
                # else:
                Batch_Entry = batch_form.save(commit=False)

                Batch_Entry.update_by = request.user.id
                if batch_id and int(batch_id) > 0:
                    Batch_Entry.no_entries = entry_list.count() + 1
                    Batch_Entry.update_date = datetime.datetime.today()
                else:
                    Batch_Entry.batch_no = generate_recurring_batch_number(company_id, dict(TRANSACTION_TYPES)['GL'])
                    Batch_Entry.description = request.POST.get('description')
                    Batch_Entry.status = int(STATUS_TYPE_DICT['Open'])
                    Batch_Entry.posting_sequence = 0
                    Batch_Entry.company_id = company_id
                    Batch_Entry.is_hidden = False
                    Batch_Entry.input_type = INPUT_TYPE_DICT['Manual Entry']
                    Batch_Entry.document_type = DOCUMENT_TYPE_DICT['Undefined']  # investigate later
                    Batch_Entry.batch_type = dict(TRANSACTION_TYPES)['GL']  # gl batch type
                    Batch_Entry.no_entries = 1  # count of journal entries in this batch
                    Batch_Entry.source_ledger = SOURCE_LEDGER_DICT['General Ledger']
                    Batch_Entry.currency_id = company.currency_id
                    Batch_Entry.create_date = datetime.datetime.today()
                    Batch_Entry.batch_date = datetime.datetime.today()
                Batch_Entry.save()
                batch_id = Batch_Entry.id

                rec_entry = RecurringEntry()
                rec_entry.company_id = company_id
                rec_entry.currency_id = company.currency_id
                rec_entry.code = request.POST.get('code')
                rec_entry.name = request.POST.get('name') if request.POST.get('name') else ""
                rec_entry.description = request.POST.get('name') if request.POST.get('name') else ""
                rec_entry.journal_type = dict(TRANSACTION_TYPES)['GL']
                rec_entry.start_date = datetime.datetime.strptime(request.POST.get('start_date'), '%Y-%m-%d')
                rec_entry.run_date = rec_entry.start_date - datetime.timedelta(1)
                rec_entry.maintained_date = datetime.date.today()
                if request.POST.get('is_expire'):
                    rec_entry.is_expire = request.POST.get('is_expire')
                    rec_entry.expire_date = datetime.datetime.strptime(request.POST.get('expire_date'), '%Y-%m-%d')
                else:
                    rec_entry.is_expire = False
                    rec_entry.expire_date = None
                if request.POST.get('is_active'):
                    rec_entry.is_active = request.POST.get('is_active')
                else:
                    rec_entry.is_active = False
                rec_entry.exch_rate_type = 'Current Rate'
                if request.POST.get('txtexcrateid') and request.POST.get('txtexcrateid') != 'None':
                    rec_entry.exch_rate_id = request.POST.get('txtexcrateid')
                rec_entry.schedule_id = request.POST.get('schedule_id')
                rec_entry.source_type = request.POST.get('source_type')
                rec_entry.rounding_acc = request.POST.get('rounding_acc')
                rec_entry.debit = float(request.POST.get('txttrxdebits').replace(',', ''))
                rec_entry.credit = float(request.POST.get('txttrxcredits').replace(',', ''))
                rec_entry.balance = float(request.POST.get('txtunbalance').replace(',', ''))
                if request.POST.get('is_auto_reverse'):
                    rec_entry.is_auto_reverse = request.POST.get('is_auto_reverse')
                    rec_entry.reverse_to_period = request.POST.get('rv_period_opt')
                    period_val = (request.POST.get('rv_period')).split('-')
                    rec_entry.reverse_to_period_val = period_val[1] + '-' + period_val[0] + '-01'
                else:
                    rec_entry.is_auto_reverse = False
                    rec_entry.reverse_to_period = None
                    rec_entry.reverse_to_period_val = None
                perd_month, perd_year = get_fiscal_year_period(company_id, rec_entry.run_date)
                if perd_month and perd_year:
                    rec_entry.perd_month = perd_month
                    rec_entry.perd_year = perd_year
                else:
                    rec_entry.perd_month = rec_entry.run_date.month
                    rec_entry.perd_year = rec_entry.run_date.year
                rec_entry.update_by = request.user.id
                rec_entry.batch = Batch_Entry
                rec_entry.save()

                # Save Recurring Entry details
                journal_total = 0
                transaction_list = None
                if request.POST['transaction_list_data']:
                    transaction_list = ast.literal_eval(request.POST['transaction_list_data'])
                if transaction_list != None:
                    for transaction in transaction_list:
                        trans = RecurringEntryDetail()
                        trans.rec_entry_id = rec_entry.id
                        trans.source_type = rec_entry.source_type
                        trans.reference = transaction['reference']
                        trans.description = transaction['description']
                        trans.account_id = transaction['account_id']
                        trans.currency_id = transaction['currency_id']
                        trans.company_id = company.id
                        trans.is_debit_account = transaction['is_debit_account']
                        trans.is_credit_account = transaction['is_credit_account']
                        trans.is_auto_exch = transaction['is_auto_exch']
                        if transaction['is_debit_account'] == 1:
                            trans.source_debit = transaction['srcdebit']
                            trans.func_debit = transaction['funcdebit']
                            journal_total += float(trans.func_debit)
                        else:
                            trans.source_credit = transaction['srccredit']
                            trans.func_credit = transaction['funccredit']
                        if transaction['exchange_rate'] and transaction['exchange_rate'] != 'None'\
                             and transaction['exchange_rate'] != 'NaN':
                            trans.exchange_rate = transaction['exchange_rate']
                        trans.functional_balance_type = (BALANCE_TYPE_DICT['Credit'],
                                                             BALANCE_TYPE_DICT['Debit'])[trans.is_debit_account]
                        trans.comment = transaction['comment']
                        trans.is_hidden = False
                        trans.create_date = datetime.datetime.today()
                        trans.update_date = datetime.datetime.today()
                        trans.update_by = request.user.id
                        trans.save()

                    rec_entry.total_amount = journal_total
                    rec_entry.amount = journal_total
                    rec_entry.save()

                entry_list_amount = RecurringEntry.objects.filter(
                    batch_id=Batch_Entry.id).aggregate(Sum('total_amount'))
                Batch_Entry.batch_amount = entry_list_amount.get('total_amount__sum', 0)
                Batch_Entry.save()

                messages.success(request, 'GL Recurring Entry is created')
                return redirect('/accounting/add/RE/' + str(batch_id) + '/')

            schedule_list = Schedule.objects.filter(company_id=company_id, is_hidden=False)

            data_anu['to_currency'] = company.currency_id

            context = {'form': form, 'batch_form': batch_form, 'currency_list': currency_list, 'account_list': account_list,
                    'source_type_list': src_code_list, 'batch': batch, 'batch_id': batch_id, 'data_anu': data_anu, 
                    'journal_type': journal_type, 'schedule_list': schedule_list, 'company_is_decimal': company.currency.is_decimal,
                    'next_journal': next_journal, 'prev_journal': prev_journal, 'first_journal': first_journal,
                       'last_journal': last_journal, 'next_batch': next_batch, 'prev_batch': prev_batch, 'schedule_id': schedule_id}
            return render(request, 'RE_entry.html', context)

    except OSError as e:
        print(e)
        messages.add_message(request, messages.ERROR, e, extra_tags='add_recurring_entry')
        return redirect('/accounting/rec_batch_list/5/')


@csrf_exempt
@login_required
def edit_recurring_entry(request, id):
    data_anu = {'journal_count': 1, 'total_debit': 0, 'total_credit': 0, 'unbalance_amount': 0,
                'input_state': '2', 'from_currency': 0, 'to_currency': 0, 'source_type_name': 'NULL'}
    try:
        with transactionlib.atomic():
            company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
            company = Company.objects.get(pk=company_id)
            currency_list = Currency.objects.filter(is_hidden=0)
            account_list = Account.objects.filter(
                is_hidden=False, is_active=True, company_id=company_id).order_by('account_segment', 'code')
            prev_batch = 0
            next_batch = 0
            prev_journal = 0
            next_journal = 0
            first_journal = 0
            last_journal = 0
            rec_entry = RecurringEntry.objects.get(pk=id)
            batch = RecurringBatch.objects.get(pk=rec_entry.batch_id)
            batch_id = batch.id
            prev_journal, next_journal, first_journal, last_journal = get_batch_journals(batch.id, rec_entry, True)
            prev_batch, next_batch = get_recurring_nearest_batches(company_id, dict(
                TRANSACTION_TYPES)['GL'], batch.batch_no)
            journal_type = dict(TRANSACTION_TYPES)['GL']
            if request.method == 'GET':
                transaction_list = RecurringEntryDetail.objects.filter(is_hidden=0, company_id=company_id, rec_entry_id=id)
                trx_debit = trx_credit = 0
                for trx in transaction_list:
                    description = trx.description
                    reference = trx.reference
                    data_anu['exch_rate_id'] = trx.exch_rate_id
                    data_anu['exch_rate_date'] = trx.exch_rate_date
                    if trx.is_debit_account:
                        trx_debit += trx.func_debit
                    else:
                        trx_credit += trx.func_credit

                # rec_entry = RecurringEntry.objects.get(pk=id)
                batch_form = RecBatchInfoForm(instance=batch)
                batch_form.initial['batch_amount'] = '{0:,.2f}'.format(batch.batch_amount)
                form = RecurringEntryForm(company_id=company_id, instance=rec_entry)

                src_code_list = SOURCE_TYPES_GL

                for src_type_list in src_code_list:
                    if form.initial['source_type'] == src_type_list[0]:
                        data_anu['source_type_name'] = src_type_list[1]
                data_anu['total_debit'] = '{0:,.2f}'.format(trx_debit)
                data_anu['total_credit'] = '{0:,.2f}'.format(trx_credit)
                data_anu['unbalance_amount'] = '{0:,.2f}'.format(abs(trx_debit - trx_credit))
                data_anu['to_currency'] = company.currency_id

                schedule_list = Schedule.objects.filter(company_id=company_id, is_hidden=False)

                context = {
                    'rec_entry': rec_entry,
                    'form': form,
                    'batch_form': batch_form,
                    'batch': batch, 
                    'batch_id': batch_id,
                    'currency_list': currency_list,
                    'account_list': account_list,
                    'source_type_list': src_code_list,
                    'transactions': transaction_list,
                    'data_anu': data_anu,
                    'schedule_list': schedule_list,
                    'journal_type': journal_type,
                    'reference': reference, 
                    'description': description,
                    'company_is_decimal': company.currency.is_decimal,
                    'next_journal': next_journal, 'prev_journal': prev_journal, 
                    'first_journal': first_journal, 'last_journal': last_journal, 
                    'next_batch': next_batch, 'prev_batch': prev_batch
                }
                return render(request, 'RE_entry.html', context)
            else:
                batch_form = RecurringBatch.objects.get(pk=batch.id)
                Batch_Entry = batch_form
                Batch_Entry.update_by = request.user.id
                Batch_Entry.update_date = datetime.datetime.today()
                Batch_Entry.save()

                rec_entry = RecurringEntry.objects.get(pk=id)
                rec_entry.company_id = company_id
                rec_entry.currency_id = company.currency_id
                rec_entry.code = request.POST.get('code')
                rec_entry.name = request.POST.get('name') if request.POST.get('name') else ""
                rec_entry.description = request.POST.get('description')
                rec_entry.start_date = datetime.datetime.strptime(request.POST.get('start_date'), '%Y-%m-%d')
                rec_entry.run_date = rec_entry.start_date - datetime.timedelta(1)
                rec_entry.maintained_date = datetime.datetime.today().strftime('%Y-%m-%d')
                if request.POST.get('is_expire'):
                    rec_entry.is_expire = request.POST.get('is_expire')
                    rec_entry.expire_date = datetime.datetime.strptime(request.POST.get('expire_date'), '%Y-%m-%d')
                else:
                    rec_entry.is_expire = False
                    rec_entry.expire_date = None
                if request.POST.get('is_active'):
                    rec_entry.is_active = request.POST.get('is_active')
                else:
                    rec_entry.is_active = False
                rec_entry.exch_rate_type = 'Current Rate'
                if request.POST.get('txtexcrateid') and request.POST.get('txtexcrateid') != 'None':
                    rec_entry.exch_rate_id = request.POST.get('txtexcrateid')
                rec_entry.schedule_id = request.POST.get('schedule_id')
                rec_entry.source_type = request.POST.get('source_type')
                rec_entry.rounding_acc = request.POST.get('rounding_acc')
                rec_entry.debit = float(request.POST.get('txttrxdebits').replace(',', ''))
                rec_entry.credit = float(request.POST.get('txttrxcredits').replace(',', ''))
                rec_entry.balance = float(request.POST.get('txtunbalance').replace(',', ''))
                if request.POST.get('is_auto_reverse'):
                    rec_entry.is_auto_reverse = request.POST.get('is_auto_reverse')
                    rec_entry.reverse_to_period = request.POST.get('rv_period_opt')
                    period_val = (request.POST.get('rv_period')).split('-')
                    rec_entry.reverse_to_period_val = period_val[1] + '-' + period_val[0] + '-01'
                else:
                    rec_entry.is_auto_reverse = False
                    rec_entry.reverse_to_period = None
                    rec_entry.reverse_to_period_val = None
                perd_month, perd_year = get_fiscal_year_period(company_id, rec_entry.run_date)
                if perd_month and perd_year:
                    rec_entry.perd_month = perd_month
                    rec_entry.perd_year = perd_year
                else:
                    rec_entry.perd_month = rec_entry.run_date.month
                    rec_entry.perd_year = rec_entry.run_date.year
                rec_entry.update_by = request.user.id
                rec_entry.save()

                # Save Recurring Entry details
                rec_entry_detail_list = RecurringEntryDetail.objects.filter(rec_entry_id=rec_entry.id)
                if rec_entry_detail_list:
                    for row in rec_entry_detail_list:
                        row.delete()

                journal_total = 0
                transaction_list = None
                if request.POST['transaction_list_data']:
                    transaction_list = ast.literal_eval(request.POST['transaction_list_data'])
                if transaction_list != None:
                    for transaction in transaction_list:
                        trans = RecurringEntryDetail()
                        trans.rec_entry_id = rec_entry.id
                        trans.source_type = rec_entry.source_type
                        trans.reference = transaction['reference']
                        trans.description = transaction['description']
                        trans.account_id = transaction['account_id']
                        trans.currency_id = transaction['currency_id']
                        trans.company_id = company.id
                        trans.is_debit_account = transaction['is_debit_account']
                        trans.is_credit_account = transaction['is_credit_account']
                        trans.is_auto_exch = transaction['is_auto_exch']
                        if transaction['is_debit_account'] == 1:
                            trans.source_debit = transaction['srcdebit']
                            trans.func_debit = transaction['funcdebit']
                            journal_total += float(trans.func_debit)
                        else:
                            trans.source_credit = transaction['srccredit']
                            trans.func_credit = transaction['funccredit']
                        if transaction['exchange_rate'] and transaction['exchange_rate'] != 'None'\
                                and transaction['exchange_rate'] != 'NaN':
                            trans.exchange_rate = transaction['exchange_rate']
                        trans.functional_balance_type = (BALANCE_TYPE_DICT['Credit'],
                                                             BALANCE_TYPE_DICT['Debit'])[trans.is_debit_account]
                        trans.comment = transaction['comment']
                        trans.is_hidden = False
                        trans.create_date = datetime.datetime.today()
                        trans.update_date = datetime.datetime.today()
                        trans.update_by = request.user.id
                        trans.save()

                    rec_entry.total_amount = journal_total
                    rec_entry.amount = journal_total
                    rec_entry.save()

                entry_list_amount = RecurringEntry.objects.filter(
                    batch_id=Batch_Entry.id).aggregate(Sum('total_amount'))
                Batch_Entry.batch_amount = entry_list_amount.get('total_amount__sum', 0)
                Batch_Entry.save()

                entry_list = RecurringEntry.objects.filter(batch_id=Batch_Entry.id)
                for entry in entry_list:
                    if entry.id != rec_entry.id:
                        entry.schedule_id = rec_entry.schedule_id
                        entry.is_expire = rec_entry.is_expire
                        entry.expire_date = rec_entry.expire_date
                        entry.maintained_date = rec_entry.maintained_date
                        entry.start_date = rec_entry.start_date
                        entry.is_active = rec_entry.is_active
                        entry.save()

                messages.success(request, 'GL Recurring Entry is updated')
                return redirect('/accounting/rec_batch_list/5/')

    except OSError as e:
        print(e)
        messages.add_message(request, messages.ERROR, e, extra_tags='edit_recurring_entry')
        return redirect('/accounting/rec_batch_list/5/')


@login_required
def delete_re_transaction(request, id):
    try:
        rec_entry = RecurringEntry.objects.get(id=id)
        rec_entry_detail_list = RecurringEntryDetail.objects.filter(rec_entry_id=id)
        for entry in rec_entry_detail_list:
            entry.is_hidden = 1
            entry.save()

        rec_entry.is_hidden = 1
        rec_entry.save()

        batch = RecurringBatch.objects.get(id=rec_entry.batch_id)
        batch.no_entries = int(batch.no_entries) - 1
        batch.save()

        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
    except:
        messages_error = "Can't load transaction"
        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))


@login_required
def delete_schedule_entry(request):
    if request.method == 'POST':
        try:
            schedule_id = request.POST.get('schedule_id')
            schedule = Schedule.objects.get(id=schedule_id)
            schedule.is_hidden = 1
            schedule.save()

            json_content = json.dumps('data', ensure_ascii=False)
            return HttpResponse(json_content, content_type='application/json')
        except ObjectDoesNotExist:
            messages_error = "Can't load transaction"
            return render_to_response('404.html', RequestContext(request, {'messages_error': messages_error}))


@login_required
def get_re_detail_transaction(request):
    if request.method == 'POST':
        try:
            amount = func_amount = 0
            transaction_id = request.POST.get('transaction_id')
            transaction = RecurringEntryDetail.objects.get(id=transaction_id)
            if transaction.rec_entry.journal_type == dict(TRANSACTION_TYPES)['GL']:
                if transaction.is_debit_account:
                    amount = transaction.source_debit
                    func_amount = transaction.func_debit
                elif transaction.is_credit_account:
                    amount = transaction.source_credit
                    func_amount = transaction.func_credit
            else:
                amount = transaction.amount
            data = {
                "reference": transaction.reference,
                "description": transaction.description,
                "account_id": transaction.account_id,
                "account_id_trs": transaction.account_id,
                "account_code": transaction.account.code if transaction.account else '',
                "account_name": transaction.account.name if transaction.account else '',
                "distribution_id": transaction.distribution_code_id,
                "distribution_code": transaction.distribution_code.code if transaction.distribution_code else '',
                "distribution_name": transaction.distribution_code.name if transaction.distribution_code else '',
                "currency_id": transaction.currency_id,
                "currency_code": transaction.currency.code if transaction.currency else '',
                "currency_name": transaction.currency.name if transaction.currency else '',
                "tax_id": transaction.tax_id,
                "is_tax_include": transaction.is_tax_include,
                "is_tax_transaction": transaction.is_tax_transaction,
                "is_auto_exch": transaction.is_auto_exch,
                "is_decimal": transaction.currency.is_decimal,
                "amount": str(amount),
                "tax_amount": str(transaction.tax_amount),
                "total_amount": str(transaction.total_amount),
                "exchange_rate": str(transaction.exch_rate.rate) if transaction.exch_rate \
                    else str(transaction.exchange_rate) if transaction.exchange_rate else '1',
                "functional_amount": str(func_amount),
                "remark": transaction.comment,
                "is_debit_account": transaction.is_debit_account,
                "functional_balance_type": transaction.is_debit_account
            }
            array = []
            array.append(data)
            json_content = json.dumps(array, ensure_ascii=False)
            return HttpResponse(json_content, content_type='application/json')
        except ObjectDoesNotExist:
            messages_error = "Can't load transaction"
            return render_to_response('404.html', RequestContext(request, {'messages_error': messages_error}))


@login_required
def recurring_batch_list(request, batch_type):
    try:
        company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
        status_list = [STATUS_TYPE_DICT['Open'],
                       STATUS_TYPE_DICT['Posted'],
                       STATUS_TYPE_DICT['Prov. Posted']]
        order_list = RecurringBatch.objects.filter(is_hidden=0, company_id=company_id, batch_type=int(batch_type), status__in=status_list).order_by('-id')


        return render_to_response('batch_list_rec.html', RequestContext(request, {'batch_type': batch_type, 'order_list': order_list}))
    except ObjectDoesNotExist:
        messages_error = "Company and Staff information of Current User does not exist." \
                         "\nPlease input Company and Staff of Current User!"
        return render_to_response('404.html', RequestContext(request, {'messages_error': messages_error}))


@login_required
def list_recurring_entries(request, journal_type, batch_id):
    try:
        company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
        company = Company.objects.get(pk=company_id)
        batch = RecurringBatch.objects.get(pk=batch_id)
        order_list = RecurringEntry.objects.filter(batch__id=batch.id, is_hidden=0, company_id=company_id) \
            .select_related('batch')
        journal_count = len(order_list)
        source_amount = functional_amount = 0
        for field in order_list:
            source_amt, functional_amt = get_rec_func_source_amt(
                field, company_id)
            source_amount += source_amt
            functional_amount += functional_amt

        if int(batch.batch_type) in [dict(TRANSACTION_TYPES)['AR Invoice'], dict(TRANSACTION_TYPES)['AP Invoice']]:
            source_amount = float(round_number(source_amount, 2))
        else:
            if batch.currency.is_decimal:
                source_amount = float(round_number(source_amount, 2))
            else:
                source_amount = float(round_number(source_amount))
        if company.currency.is_decimal:
            functional_amount = float(round_number(functional_amount, 2))
        else:
            functional_amount = float(round_number(functional_amount, 0))
        return render_to_response('journal_list_rec.html', RequestContext(request, {'journal_type': journal_type,
                                                                                'journal_count': journal_count,
                                                                                'batch_id': batch_id, 'batch': batch,
                                                                                'status': int(batch.status),
                                                                                'batch_date': batch.batch_date.strftime(
                                                                                    "%d-%m-%Y"),
                                                                                'functional_amount': functional_amount,
                                                                                'source_amount': source_amount}))
    except ObjectDoesNotExist:
        messages_error = "Company and Staff information of Current User does not exist." \
                         "\nPlease input Company and Staff of Current User!"
        return render_to_response('404.html', RequestContext(request, {'messages_error': messages_error}))
    except Exception as e:
        print(e)
        messages_error = "Unexpected error in load_list. please contact your Administrator"
        return render_to_response('404.html', RequestContext(request, {'messages_error': messages_error}))


@login_required
def rec_entries_as_Json(request, journal_type, batch_id):
    draw = request.GET['draw']
    start = request.GET['start']
    length = request.GET['length']
    search = request.GET['search[value]']
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0

    company = Company.objects.get(pk=company_id)
    company_currency = Company.objects.filter(pk=company_id).values('currency', 'currency__code').first()

    if batch_id and batch_id != 'None':
        batch = RecurringBatch.objects.get(id=batch_id)
        order_list = RecurringEntry.objects.filter(batch__id=batch.id, is_hidden=0, company_id=company_id) \
            .exclude(code__isnull=True)\
            .select_related('batch')
    else:
        order_list = RecurringEntry.objects.none()
    records_total = order_list.count()

    if search:  # Filter data base on search
        order_list = order_list.filter(Q(update_date__icontains=search) | Q(document_date__icontains=search) | Q(
            document_number__icontains=search) | Q(customer__name__icontains=search) | Q(
            supplier__name__icontains=search) | Q(code__icontains=search) | Q(payment_amount__icontains=search) | Q(
            payment_check_number__icontains=search) | Q(perd_year__icontains=search) | Q(perd_month__icontains=search))

    # All data
    records_filtered = order_list.count()
    # Order by list_limit base on order_dir and order_column
    order_column_dict = {'status': 9, 'amount': 8, 'buyyer': 7, 'document_type': 6,
                         'document_date': 5, 'document_number': 4, 'code': 3}

    order_column = request.GET['order[0][column]']
    column_name = ""
    if order_column == "1":
        column_name = "update_date"
    elif order_column == str(order_column_dict['code']):
        column_name = "code"
    elif order_column == str(order_column_dict['document_number']):
        column_name = "document_number"
    elif order_column == str(order_column_dict['document_date']):
        column_name = "document_date"
    elif order_column == str(order_column_dict['document_type']):
        column_name = "document_type"
    elif order_column == str(order_column_dict['buyyer']):
        column_name = "customer__name" if journal_type == dict(TRANSACTION_TYPES)['AR Invoice'] else "supplier__name"
    elif order_column == str(order_column_dict['amount']):
        column_name = "amount"
    elif order_column == str(order_column_dict['status']):
        column_name = "status"
    order_dir = request.GET['order[0][dir]']

    list = []
    if order_dir == "asc":
        if column_name == 'code':
            try:
                list = sorted(order_list, key=lambda Journal: int(Journal.code))
                list = list[int(start):(int(start) + int(length))]
            except:
                list = order_list.order_by(column_name)[int(start):(int(start) + int(length))]
        else:
            list = order_list.order_by(column_name)[int(start):(int(start) + int(length))]
    elif order_dir == "desc":
        if column_name == 'code':
            try:
                list = sorted(order_list, key=lambda Journal: int(Journal.code), reverse=True)
                list = list[int(start):(int(start) + int(length))]
            except:
                list = order_list.order_by('-' + column_name)[int(start):(int(start) + int(length))]
        else:
            list = order_list.order_by('-' + column_name)[int(start):(int(start) + int(length))]

    # Create data list
    array = []
    if int(journal_type) == dict(TRANSACTION_TYPES)['AR Receipt']:
        document_type_dict = dict(RECEIPT_TRANSACTION_TYPES)
    elif int(journal_type) == dict(TRANSACTION_TYPES)['AP Payment']:
        document_type_dict = dict(PAYMENT_TRANSACTION_TYPES)
    else:
        document_type_dict = dict(DOCUMENT_TYPES)

    for field in list:
        source_amt, functional_amt = get_rec_func_source_amt(field, company_id)
        if field.document_type == DOCUMENT_TYPE_DICT['Credit Note']:
            source_amt = -1 * source_amt
            functional_amt = -1 * functional_amt
        if company.currency.is_decimal:
            functional_amt = intcomma("%.2f" % functional_amt)
        else:
            functional_amt = intcomma(int(functional_amt))
        if field.currency.is_decimal:
            source_amt = intcomma("%.2f" % source_amt)
        else:
            source_amt = intcomma(int(source_amt))
        amount = functional_amt if int(journal_type) == dict(TRANSACTION_TYPES)['GL'] else source_amt
        data = {}
        data["update_date"] = field.update_date.strftime("%d-%m-%Y")
        data["id"] = str(field.id)
        data["code"] = str(field.code) if field.code is not None else ''
        data["document_number"] = field.document_number
        data["document_date"] = str(field.start_date.strftime("%d-%m-%Y"))
        data["amount"] = amount
        data["outstanding_amount"] = intcomma("%.2f" % field.outstanding_amount) if field.outstanding_amount else '0.00'
        data["journal_type"] = field.journal_type
        data['batch_id'] = str(field.batch_id)
        data["name"] = field.name
        data["source_type"] = field.source_type
        data["currency_code"] = company_currency['currency__code'] if int(journal_type) == dict(TRANSACTION_TYPES)[
            'GL'] else ''
        data["batch_type"] = batch.batch_type
        data["cust_supp_name"] = ""
        data["cust_supp_code"] = ""
        data["check_number"] = field.payment_check_number if field.payment_check_number else ""
        data["reference"] = field.reference
        data["batch_number"] = batch.batch_no
        data["source_ledger"] = batch.source_ledger
        data["fiscal_year"] = field.perd_year
        data["fiscal_period"] = field.perd_month

        if int(journal_type) == dict(TRANSACTION_TYPES)['AR Receipt']:
            data["document_type"] = document_type_dict.get(field.transaction_type) if field.transaction_type else ''
        elif int(journal_type) == dict(TRANSACTION_TYPES)['AP Payment']:
            data["document_type"] = document_type_dict.get(field.transaction_type) if field.transaction_type else ''
        else:
            data["document_type"] = document_type_dict.get(field.document_type) if field.document_type else ''

        if int(journal_type) in (dict(TRANSACTION_TYPES)['AR Invoice'], dict(TRANSACTION_TYPES)['AR Receipt']):
            if field.customer:
                data["cust_supp_name"] = field.customer.name
                data["cust_supp_code"] = field.customer.code
        else:
            if field.supplier:
                data["cust_supp_name"] = field.supplier.name
                data["cust_supp_code"] = field.supplier.code

        array.append(data)

    content = {"draw": draw, "data": array, "recordsTotal": records_total, "recordsFiltered": records_filtered}
    json_content = json.dumps(content, ensure_ascii=False)
    return HttpResponse(json_content, content_type='application/json')


@login_required
def batch_recurring_delete(request, batch_id):
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    with transactionlib.atomic():
        try:
            batch = RecurringBatch.objects.get(pk=batch_id)
            # batch.status = STATUS_TYPE_DICT['Deleted']
            batch.is_hidden = True
            batch.save()

            list_journal = RecurringEntry.objects.filter(
                batch_id=batch_id, company_id=company_id, is_hidden=0)
            for journal in list_journal:
                journal.is_hidden = True
                journal.update_by = request.user.id
                journal.update_date = datetime.datetime.now()
                journal.save()
                # journal transactions
                transactions = RecurringEntryDetail.objects.filter(
                    company_id=company_id, is_hidden=0, rec_entry_id=journal.id)
                for trans in transactions:
                    trans.is_hidden = True
                    trans.update_date = datetime.datetime.now()
                    trans.update_by = request.user.id
                    trans.save()
                    # try:
                    #     if trans.related_invoice:
                    #         journal_id_related = Journal.objects.get(pk=trans.related_invoice_id)
                    #         journal_id_related.is_fully_paid = False
                    #         journal_id_related.save()
                    # except:
                    #     pass
        except Exception as e:
            print(e)
            messages.error(request, 'Error happened while deleting the batch')
            # logging.error(traceback.format_exc())
            transactionlib.set_rollback(True)

    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))


@login_required
def RecBatchList__asJson(request, batch_type):
    draw = request.GET['draw']
    start = request.GET['start']
    length = request.GET['length']
    search = request.GET['search[value]']
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    company = Company.objects.get(pk=company_id)
    order_list = RecurringBatch.objects.filter(is_hidden=0, company_id=company_id, batch_type=int(batch_type))
    records_total = order_list.count()

    if search:  # Filter data base on search
        if search == 'Generated':
            search_type = 1
        else:
            search_type = 2 if search == 'Enter' else search

        if search == 'Open':
            search_status = 1
        else:
            search_status = 2 if search == 'Posted' else search

        order_list = order_list.filter(
            Q(update_date__icontains=search) | Q(batch_no__icontains=search) | Q(batch_date__icontains=search)
            | Q(description__icontains=search) | Q(no_entries__icontains=search)
            | Q(batch_amount__icontains=search) | Q(status__icontains=search_status)
            | Q(input_type__icontains=search_type) | Q(posting_sequence__icontains=search_type))

    # All data
    records_filtered = order_list.count()
    # Order by list_limit base on order_dir and order_column
    order_column = request.GET['order[0][column]']
    order_column_dict = {'posting_sequence': '11', 'source_ledger': '10', 'status': '9', 'input_type': '8',
                         'batch_amount': '7', 'no_entries': '6', 'description': '5',
                         'batch_date': '4', 'batch_no': '3', 'update_date': '2'}

    if int(batch_type) == dict(TRANSACTION_TYPES)['GL']:
        order_column_dict['status'] = '11'
        order_column_dict['input_type'] = '10'
        order_column_dict['batch_amount'] = '9'
        order_column_dict['no_entries'] = '8'
        order_column_dict['posting_sequence'] = '7'
        order_column_dict['source_ledger'] = '6'

    column_name = ""
    if order_column == "0":
        column_name = "update_date"
    elif order_column == "1":
        column_name = "update_date"
    elif order_column == order_column_dict['update_date']:
        column_name = "update_date"
    elif order_column == order_column_dict['batch_no']:
        column_name = "batch_no"
    elif order_column == order_column_dict['batch_date']:
        column_name = "batch_date"
    elif order_column == order_column_dict['source_ledger']:
        column_name = "source_ledger"
    elif order_column == order_column_dict['posting_sequence']:
        column_name = "posting_sequence"
    elif order_column == order_column_dict['description']:
        column_name = "description"
    elif order_column == order_column_dict['no_entries']:
        column_name = "no_entries"
    elif order_column == order_column_dict['batch_amount']:
        column_name = "batch_amount"
    elif order_column == order_column_dict['input_type']:
        column_name = "input_type"
    elif order_column == order_column_dict['status']:
        column_name = "status"
    order_dir = request.GET['order[0][dir]']

    list = []
    if order_dir == "asc":
        if column_name == 'posting_sequence':
            list = order_list.annotate(int_posting_sequence=RawSQL('CAST(posting_sequence AS UNSIGNED)', params=[])) \
                .order_by('int_posting_sequence', '-id')[int(start):(int(start) + int(length))]
        else:
            list = order_list.order_by(column_name, '-id')[int(start):(int(start) + int(length))]
    elif order_dir == "desc":
        if column_name == 'posting_sequence':
            list = order_list.annotate(int_posting_sequence=RawSQL('CAST(posting_sequence AS UNSIGNED)', params=[])) \
                .order_by('-int_posting_sequence', '-id')[int(start):(int(start) + int(length))]
        else:
            list = order_list.order_by('-' + column_name, '-id')[int(start):(int(start) + int(length))]

    # Create data list
    array = []
    input_type_dict = dict(INPUT_TYPES)
    for field in list:
        fsc_calendar = FiscalCalendar.objects.filter(company_id=company_id, is_hidden=0,
                                                     start_date__lte=field.batch_date, end_date__gte=field.batch_date).first()
        if fsc_calendar:
            if int(field.batch_type) == dict(TRANSACTION_TYPES)['GL']:
                locked = fsc_calendar.is_gl_locked
            elif int(field.batch_type) in [dict(TRANSACTION_TYPES)['AR Invoice'], dict(TRANSACTION_TYPES)['AR Receipt']]:
                locked = fsc_calendar.is_ar_locked
            elif int(field.batch_type) in [dict(TRANSACTION_TYPES)['AP Invoice'], dict(TRANSACTION_TYPES)['AP Payment']]:
                locked = fsc_calendar.is_ap_locked
            else:
                locked = False
        else:
            locked = False

        batch_functional_amount = batch_source_amount = 0
        transaction_list = RecurringEntryDetail.objects.filter(is_hidden=False, company_id=company_id,
                                                      rec_entry__is_hidden=False, rec_entry__batch_id=field.id) \
            .select_related('rec_entry', 'rec_entry__batch')
        if int(batch_type) == dict(TRANSACTION_TYPES)['GL']:
            transactions = transaction_list.filter(is_credit_account=True).order_by('rec_entry_id')
            if not transactions:
                transactions = transaction_list.filter(is_credit_account=False).order_by('rec_entry_id')
        else:
            transactions = transaction_list.order_by('rec_entry_id')
        journal_ids = RecurringEntry.objects.filter(is_hidden=0, batch_id=field.id)\
            .select_related('batch')\
            .values_list('id', flat=True)[::1]
        journal_count = len(journal_ids)
        if transactions:
            last_j_id = 0
            for transaction in transactions:
                # src_amt = (round(float(transaction.amount + transaction.tax_amount), 2),
                #            round(float(transaction.functional_amount) / float(transaction.exchange_rate), 2))[
                #     (transaction.amount + transaction.tax_amount) <= 0]
                if last_j_id != transaction.rec_entry_id:
                    src_amt = round_number(Decimal(transaction.rec_entry.amount) + Decimal(transaction.rec_entry.tax_amount), 2)
                    last_j_id = transaction.rec_entry_id
                    if last_j_id in journal_ids:
                        journal_ids.remove(last_j_id)
                else:
                    src_amt = 0
                if transaction.rec_entry.journal_type != dict(TRANSACTION_TYPES)['GL']:
                    if transaction.rec_entry.document_type and transaction.rec_entry.document_type == DOCUMENT_TYPE_DICT['Credit Note']:
                        if transaction.is_debit_account:
                            batch_functional_amount -= round_number(float(transaction.func_debit), 2)
                        else:
                            batch_functional_amount -= round_number(float(transaction.func_credit), 2)
                        batch_source_amount -= src_amt
                    # elif transaction.rec_entry.journal_type in (dict(TRANSACTION_TYPES)['AP Payment'], dict(TRANSACTION_TYPES)['AR Receipt']) and \
                    #         transaction.related_invoice and transaction.related_invoice.document_type and \
                    #         transaction.related_invoice.document_type == DOCUMENT_TYPE_DICT['Credit Note']:
                    #     batch_functional_amount -= round_number(transaction.functional_amount, 2)
                    #     batch_source_amount += src_amt
                    else:
                        if transaction.is_debit_account:
                            batch_functional_amount += round_number(float(transaction.func_debit), 2)
                        else:
                            batch_functional_amount += round_number(float(transaction.func_credit), 2)
                        batch_source_amount += src_amt
                else:
                    if transaction.is_debit_account:
                        batch_functional_amount += round_number(float(transaction.func_debit), 2)
                    else:
                        batch_functional_amount += round_number(float(transaction.func_credit), 2)
                    batch_source_amount += src_amt
        if len(journal_ids):
            for id in journal_ids:
                journal = RecurringEntry.objects.get(pk=id)
                batch_functional_amount += round_number(Decimal(journal.amount) + Decimal(journal.tax_amount), 2)
                batch_source_amount += round_number(Decimal(journal.amount) + Decimal(journal.tax_amount), 2)

        data = {}
        data["id"] = str(field.id)
        data["locked"] = str(locked)
        data["update_date"] = field.update_date.strftime("%d-%m-%Y")
        data["batch_no"] = str(field.batch_no)
        data["batch_type"] = str(field.batch_type)
        data["batch_date"] = field.batch_date.strftime("%d-%m-%Y")
        data["description"] = field.description
        # data["no_entries"] = (field.no_entries, '0')[field.status == int(STATUS_TYPE_DICT['Deleted'])]
        data["no_entries"] = (journal_count, '0')[field.status == int(STATUS_TYPE_DICT['Deleted'])]
        data["posting_sequence"] = str(field.posting_sequence) if field.posting_sequence is not None else '0'
        data["source_ledger"] = field.source_ledger
        try:
            if field.status != int(STATUS_TYPE_DICT['Deleted']):
                if company.currency.is_decimal:
                    data["functional_amount"] = intcomma("%.2f" % batch_functional_amount) if batch_functional_amount else "0"
                else:
                    data["functional_amount"] = intcomma(int(batch_functional_amount)) if batch_functional_amount else "0"
                if int(field.batch_type) in [dict(TRANSACTION_TYPES)['AR Invoice'], dict(TRANSACTION_TYPES)['AP Invoice']]:
                    data["total_amount"] = intcomma("%.2f" % batch_source_amount) if batch_source_amount else "0"
                else:
                    if field.currency.is_decimal:
                        data["total_amount"] = intcomma("%.2f" % batch_source_amount) if batch_source_amount else "0"
                    else:
                        data["total_amount"] = intcomma(int(batch_source_amount)) if batch_source_amount else "0"
            else:
                data["total_amount"] = '0'
                data["functional_amount"] = '0'

        except Exception as e:
            print(e)
            data["total_amount"] = '0'
            data["functional_amount"] = '0'
        data["status"] = str(field.status)
        data["input_type"] = input_type_dict.get(field.input_type) if int(field.input_type) else UNDEFINED_LIST[0][0]
        array.append(data)

    content = {"draw": draw, "data": array, "recordsTotal": records_total, "recordsFiltered": records_filtered}
    json_content = json.dumps(content, ensure_ascii=False)
    return HttpResponse(json_content, content_type='application/json')


@login_required
def RecbatchDetail__asJson(request, batch_id):
    array = []
    obj = {"success": 0, "journals": []}
    try:
        batch = RecurringBatch.objects.get(id=batch_id)
        company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
        journal_list = RecurringEntry.objects. \
            filter(batch_id=batch.id,
                   company_id=company_id,
                   is_hidden=False). \
            extra(select={'code_number': 'CAST(code AS SIGNED)'}).order_by('code_number')

        if journal_list.count():
            obj['success'] = 1
            for journal in journal_list:
                source_amt, functional_amt = get_rec_func_source_amt(journal, company_id)
                if int(journal.journal_type) == dict(TRANSACTION_TYPES)['AR Receipt']:
                    document_type_dict = dict(RECEIPT_TRANSACTION_TYPES)
                elif int(journal.journal_type) == dict(TRANSACTION_TYPES)['AP Payment']:
                    document_type_dict = dict(PAYMENT_TRANSACTION_TYPES)
                else:
                    document_type_dict = dict(DOCUMENT_TYPES)
                obj_obj = {}
                obj_obj['code'] = journal.code
                obj_obj['name'] = journal.name if journal.name else ""
                obj_obj['document_number'] = journal.document_number
                obj_obj['document_date'] = journal.start_date.strftime("%d-%m-%Y")
                if int(journal.journal_type) in (
                        dict(TRANSACTION_TYPES)['AR Receipt'], dict(TRANSACTION_TYPES)['AP Payment']):
                    obj_obj['document_type'] = document_type_dict.get(
                        journal.transaction_type) if journal.transaction_type else ''
                else:
                    obj_obj['document_type'] = document_type_dict.get(
                        journal.document_type) if journal.document_type else ''
                obj_obj['currency'] = journal.currency.code
                obj_obj['invoice_number'] = journal.invoice_number
                obj_obj['reference'] = journal.reference
                obj_obj['account_set'] = journal.account_set.code if journal.account_set else ''
                obj_obj['amount'] = intcomma("%.2f" % journal.amount)
                obj_obj['tax_amount'] = intcomma("%.2f" % journal.tax_amount)
                # obj_obj['total_amount'] = intcomma("%.2f" % journal.total_amount)
                if batch.batch_type == dict(TRANSACTION_TYPES)['GL']:
                    obj_obj['total_amount'] = intcomma("%.2f" % functional_amt)
                else:
                    obj_obj['total_amount'] = intcomma("%.2f" % source_amt)
                obj_obj['document_amount'] = intcomma("%.2f" % journal.document_amount)
                obj_obj['exchange_rate'] = intcomma("%.10f" % journal.exchange_rate)
                obj_obj['source_type'] = journal.source_type
                obj_obj['perd_year'] = journal.perd_year
                obj_obj['perd_month'] = journal.perd_month
                obj_obj['journal_type'] = journal.journal_type
                obj['journals'].append(obj_obj)
            array.append(obj)
    except Exception as e:
        print(e)
        array.append(obj)

    json_content = json.dumps(array, ensure_ascii=False)
    return HttpResponse(json_content, content_type='application/json')


@login_required
def rec_entry_detail__asJson(request, id):
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    company = Company.objects.get(pk=company_id)
    array = []
    obj = {"success": 0, "trx": [], "batch_type": '0'}
    try:
        journal = RecurringEntry.objects.get(id=id)
        trx_list = RecurringEntryDetail.objects.filter(is_hidden=0, company_id=company_id, rec_entry__id=journal.id).order_by('id')
        if trx_list.count():
            obj['success'] = 1
            obj['batch_type'] = journal.batch.batch_type
            i = 1
            for trx in trx_list:
                if obj['batch_type'] == dict(TRANSACTION_TYPES)['GL']:
                    total_amount = trx.source_debit if trx.is_debit_account else source_credit
                else:
                    total_amount = trx.amount + trx.tax_amount
                source_debit = total_amount if trx.is_debit_account else 0
                source_credit = total_amount if trx.is_credit_account else 0
                functional_debit = trx.func_debit if trx.is_debit_account else 0
                functional_credit = trx.func_credit if trx.is_credit_account else 0
                obj_obj = {'line': str(i),
                           'reference': trx.reference if trx.reference else '',
                           'description': trx.description if trx.description else '',
                           'account': trx.account.code + ' - ' + trx.account.name if trx.account else '',
                           'currency': trx.currency.code,
                           'source_amount': intcomma("%.2f" % round_number(total_amount)) if trx.currency.is_decimal else intcomma(round_number(total_amount, 0)),
                           'source_debit': intcomma("%.2f" % round_number(source_debit)) if trx.currency.is_decimal else intcomma(round_number(source_debit, 0)),
                           'source_credit': intcomma("%.2f" % round_number(source_credit)) if trx.currency.is_decimal else intcomma(round_number(source_credit, 0)),
                           'exchange_rate': intcomma("%.10f" % trx.exchange_rate),
                           'functional_amount': intcomma("%.2f" % round_number(trx.total_amount)) if trx.currency.is_decimal else intcomma(round_number(trx.total_amount, 0)),
                           'functional_debit': intcomma("%.2f" % round_number(functional_debit)) if company.currency.is_decimal else intcomma(round_number(functional_debit, 0)),
                           'functional_credit': intcomma("%.2f" % round_number(functional_credit)) if company.currency.is_decimal else intcomma(round_number(functional_credit, 0))}
                i += 1
                obj['trx'].append(obj_obj)
            array.append(obj)
    except Exception as e:
        print(e)
        array.append(obj)

    json_content = json.dumps(array, ensure_ascii=False)
    return HttpResponse(json_content, content_type='application/json')


@login_required
def list_schedule_entries(request):

    try:
        company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
        schedule_entry_list = Schedule.objects.filter(company_id=company_id, is_hidden=False)

    except Exception as e:
        print(e)

    context = {'schedule_entry_list': schedule_entry_list}
    return render(request, 'SE_list.html', context)


@login_required
def add_schedule_entry(request):
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    form = ScheduleEntryForm(company_id=company_id)
    try:
        if request.method == 'POST':
            schedule = Schedule()
            schedule.code = request.POST.get('code')
            schedule.description = request.POST.get('description')
            schedule.user_mode = 0
            schedule.company_id = company_id
            schedule.update_by = request.user.id
            schedule.recur_period = int(request.POST.get('recur_period'))
            if RECURRING_PERIOD_DICT['Daily'] == schedule.recur_period:
                schedule.daily_frequency = int(request.POST.get('daily_frequency'))
            elif RECURRING_PERIOD_DICT['Weekly'] == schedule.recur_period:
                schedule.weekly_frequency = int(request.POST.get('weekly_frequency'))
                schedule.frequency_weekday_index = int(request.POST.get('week_day'))
            elif RECURRING_PERIOD_DICT['Monthly'] == schedule.recur_period:
                schedule.monthly_frequency = int(request.POST.get('monthly_frequency'))
                schedule.frequency_date = int(request.POST.get('monthly_frequency_choice'))
            elif RECURRING_PERIOD_DICT['Yearly'] == schedule.recur_period:
                schedule.frequency_month = int(request.POST.get('year_months_choice'))
                schedule.frequency_date = int(request.POST.get('year_monthly_frequency_choice'))

            schedule.save()

            return redirect('/accounting/list/SE/')

    except Exception as e:
        print(e)

    context = {'form': form}
    return render(request, 'schedule_entry.html', context)


@login_required
def edit_schedule_entry(request, id):
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    try:
        if request.method == 'POST':
            schedule = Schedule.objects.get(pk=id)
            schedule.code = request.POST.get('code')
            schedule.description = request.POST.get('description')
            schedule.user_mode = 0
            schedule.company_id = company_id
            schedule.update_by = request.user.id
            schedule.recur_period = int(request.POST.get('recur_period'))
            if RECURRING_PERIOD_DICT['Daily'] == schedule.recur_period:
                schedule.daily_frequency = int(request.POST.get('daily_frequency'))
            elif RECURRING_PERIOD_DICT['Weekly'] == schedule.recur_period:
                schedule.weekly_frequency = int(request.POST.get('weekly_frequency'))
                schedule.frequency_weekday_index = int(request.POST.get('week_day'))
            elif RECURRING_PERIOD_DICT['Monthly'] == schedule.recur_period:
                schedule.monthly_frequency = int(request.POST.get('monthly_frequency'))
                schedule.frequency_date = int(request.POST.get('monthly_frequency_choice'))
            elif RECURRING_PERIOD_DICT['Yearly'] == schedule.recur_period:
                schedule.frequency_month = int(request.POST.get('year_months_choice'))
                schedule.frequency_date = int(request.POST.get('year_monthly_frequency_choice'))

            schedule.save()

            return redirect('/accounting/list/SE/')

    except Exception as e:
        print(e)
    schedule = Schedule.objects.get(pk=id)
    form = ScheduleEntryForm(company_id=company_id, instance=schedule)
    context = {'form': form, 'schedule': schedule}
    return render(request, 'schedule_entry.html', context)


@login_required
def invoice_transactions_list_as_json(request):
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0

    if not request.is_ajax():
        return HttpResponseNotFound

    try:
        journal_id = request.GET['journal_id']

        transaction_list = Transaction.objects.filter(is_hidden=False, journal_id=journal_id)
        line_number = 1
        json_data = []

        for transaction in transaction_list:
            json_data.append({
                'id': transaction.id,
                'distribution_code_id': transaction.distribution_code_id,
                'distribution_code': transaction.distribution_code.code,
                'account_id': transaction.account.id,
                'account_name': transaction.account.name,
                'reference': transaction.reference,
                'description': transaction.description,
                'is_debit_account': transaction.is_debit_account,
                'is_credit_account': transaction.is_credit_account,
                'amount': float(round_number(float(transaction.amount), 2)),
                'line_number': line_number
            })
            line_number = line_number + 1

        json_content = json.dumps(json_data, ensure_ascii=False)
        return HttpResponse(json_content, content_type='application/json')

    except Exception as e:
        print(e)

    return HttpResponse(json.dumps([], ensure_ascii=False), content_type='application/json')


@login_required
def save_templates(request, type):
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    company = Company.objects.get(pk=company_id)
    result = 'SUCCESS'
    # if not request.is_ajax():
    #     return HttpResponseNotFound
    try:
        if type == 'PL' and 'pl_template' in request.FILES:
            if company.pl_template is not None:
                company.pl_template.delete()
            company.pl_template = request.FILES['pl_template']
            company.save()
        elif type == 'BS' and 'bs_template' in request.FILES:
            if company.bs_template is not None:
                company.bs_template.delete()
            company.bs_template = request.FILES['bs_template']
            company.save()
    except Exception as e:
        result = 'ERROR'
        print("ERROR")
        print(e)

    json_content = json.dumps(result, ensure_ascii=False)
    return HttpResponse(json_content, content_type='application/json')


@login_required
def get_fiscal_data(request):
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    company = Company.objects.get(pk=company_id)
    json_data = []

    fsc_years = FiscalCalendar.objects.filter(company_id=company_id, is_hidden=0).values_list('fiscal_year', flat=True).order_by('fiscal_year').distinct()
    if fsc_years:
        for year in fsc_years:
            fiscal_data = FiscalCalendar.objects.filter(company_id=company_id, is_hidden=0, fiscal_year=int(year))
            if fiscal_data:
                for row in fiscal_data:
                    json_data.append({
                        'year': year,
                        'period': row.period,
                        'start': row.start_date.strftime("%d-%m-%Y"),
                        'end': row.end_date.strftime("%d-%m-%Y"),
                        'status': 'Locked' if row.is_gl_locked else 'Unlocked'
                    })

        json_content = json.dumps(json_data, ensure_ascii=False)
        return HttpResponse(json_content, content_type='application/json')

    return HttpResponse(json.dumps([], ensure_ascii=False), content_type='application/json')


@login_required
def get_cls_fiscal_data(request):
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    company = Company.objects.get(pk=company_id)
    json_data = []

    fsc_years = FiscalCalendar.objects.filter(company_id=company_id, is_hidden=0).values_list('fiscal_year', flat=True).order_by('fiscal_year').distinct()
    if fsc_years:
        for year in fsc_years:
            fiscal_data = FiscalCalendar.objects.filter(company_id=company_id, is_hidden=0, fiscal_year=int(year))
            if fiscal_data:
                for row in fiscal_data:
                    json_data.append({
                        'year': year,
                        'period': row.period,
                        'start': row.start_date.strftime("%d-%m-%Y"),
                        'end': row.end_date.strftime("%d-%m-%Y"),
                        'status': 'Locked' if row.is_gl_locked else 'Unlocked'
                    })
                json_data.append({
                    'year': year,
                    'period': 'ADJ',
                    'start': fiscal_data.last().start_date.strftime("%d-%m-%Y"),
                    'end': fiscal_data.last().end_date.strftime("%d-%m-%Y"),
                    'status': 'Locked' if fiscal_data.last().is_gl_locked else 'Unlocked'
                })
                json_data.append({
                    'year': year,
                    'period': 'CLS',
                    'start': fiscal_data.last().start_date.strftime("%d-%m-%Y"),
                    'end': fiscal_data.last().end_date.strftime("%d-%m-%Y"),
                    'status': 'Locked' if fiscal_data.last().is_gl_locked else 'Unlocked'
                })

        json_content = json.dumps(json_data, ensure_ascii=False)
        return HttpResponse(json_content, content_type='application/json')

    return HttpResponse(json.dumps([], ensure_ascii=False), content_type='application/json')


@login_required
def gl_integration_edit(request, id, type):
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    if request.method == 'POST':
        try:
            if type == 'AP':
                gl_integarion = APGLIntegration.objects.get(pk=int(id))
                selection = AP_TRANSACTION_SEGMENT_TYPES_DICT
            else:
                gl_integarion = ARGLIntegration.objects.get(pk=int(id))
                selection = AR_TRANSACTION_SEGMENT_TYPES_DICT
            try:
                if type == 'AP':
                    gl_integarion_details = APGLIntegrationDetail.objects.get(parent_id=int(id))
                else:
                    gl_integarion_details = ARGLIntegrationDetail.objects.get(parent_id=int(id))
            except:
                if type == 'AP':
                    gl_integarion_details = APGLIntegrationDetail()
                else:
                    gl_integarion_details = ARGLIntegrationDetail()
                gl_integarion_details.parent_id = gl_integarion.id
            segments_list = ast.literal_eval(request.POST['selected_list_data'])
            if segments_list:
                try:
                    zero = list(selection.keys())[list(selection.values()).index(segments_list[0])]
                    gl_integarion_details.segment_0 = zero
                except:
                    gl_integarion_details.segment_0 = None
                try:
                    one = list(selection.keys())[list(selection.values()).index(segments_list[1])]
                    gl_integarion_details.segment_1 = one
                except:
                    gl_integarion_details.segment_1 = None
                try:
                    two = list(selection.keys())[list(selection.values()).index(segments_list[2])]
                    gl_integarion_details.segment_2 = two
                except:
                    gl_integarion_details.segment_2 = None
                try:
                    three = list(selection.keys())[list(selection.values()).index(segments_list[3])]
                    gl_integarion_details.segment_3 = three
                except:
                    gl_integarion_details.segment_3 = None
                try:
                    four = list(selection.keys())[list(selection.values()).index(segments_list[4])]
                    gl_integarion_details.segment_4 = four
                except:
                    gl_integarion_details.segment_4 = None
            else:
                gl_integarion_details.segment_0 = None
                gl_integarion_details.segment_1 = None
                gl_integarion_details.segment_2 = None
                gl_integarion_details.segment_3 = None
                gl_integarion_details.segment_4 = None

            gl_integarion_details.save()

        except Exception as e:
            print(e)

        if type == 'AR':
            return redirect('/accounting/ar_settings/')
        else:
            return redirect('/accounting/ap_settings/')
    if type == 'AP':
        gl_integarion = APGLIntegration.objects.get(pk=int(id))
        transaction_type = str(AP_GL_SOURCE_TYPE_DICT[gl_integarion.transaction_type])
        transaction_field = str(GL_INTEGRATION_OPTIONS_DICT[gl_integarion.transaction_field])
        segments_list = list(sorted(AP_TRANSACTION_SEGMENT_TYPES_DICT.items(), key=lambda x: x[1]))
        example = ''
        selected_list = []
        try:
            if type == 'AP':
                field_detail = APGLIntegrationDetail.objects.get(parent_id=int(id))
            else:
                field_detail = ARGLIntegrationDetail.objects.get(parent_id=int(id))
            if field_detail.segment_0:
                selected_list.append(field_detail.segment_0)
                example += str(AP_TRANSACTION_SEGMENT_TYPES_DICT[field_detail.segment_0])
            if field_detail.segment_1:
                selected_list.append(field_detail.segment_1)
                example += '-' + str(AP_TRANSACTION_SEGMENT_TYPES_DICT[field_detail.segment_1])
            if field_detail.segment_2:
                selected_list.append(field_detail.segment_2)
                example += '-' + str(AP_TRANSACTION_SEGMENT_TYPES_DICT[field_detail.segment_2])
            if field_detail.segment_3:
                selected_list.append(field_detail.segment_3)
                example += '-' + str(AP_TRANSACTION_SEGMENT_TYPES_DICT[field_detail.segment_3])
            if field_detail.segment_4:
                selected_list.append(field_detail.segment_4)
                example += '-' + str(AP_TRANSACTION_SEGMENT_TYPES_DICT[field_detail.segment_4])
        except Exception as e:
            print(e)
    else:
        gl_integarion = ARGLIntegration.objects.get(pk=int(id))
        transaction_type = str(AR_GL_SOURCE_TYPE_DICT[gl_integarion.transaction_type])
        transaction_field = str(GL_INTEGRATION_OPTIONS_DICT[gl_integarion.transaction_field])
        segments_list = list(sorted(AR_TRANSACTION_SEGMENT_TYPES_DICT.items(), key=lambda x: x[1]))
        example = ''
        selected_list = []
        try:
            if type == 'AP':
                field_detail = APGLIntegrationDetail.objects.get(parent_id=int(id))
            else:
                field_detail = ARGLIntegrationDetail.objects.get(parent_id=int(id))
            if field_detail.segment_0:
                selected_list.append(field_detail.segment_0)
                example += str(AR_TRANSACTION_SEGMENT_TYPES_DICT[field_detail.segment_0])
            if field_detail.segment_1:
                selected_list.append(field_detail.segment_1)
                example += '-' + str(AR_TRANSACTION_SEGMENT_TYPES_DICT[field_detail.segment_1])
            if field_detail.segment_2:
                selected_list.append(field_detail.segment_2)
                example += '-' + str(AR_TRANSACTION_SEGMENT_TYPES_DICT[field_detail.segment_2])
            if field_detail.segment_3:
                selected_list.append(field_detail.segment_3)
                example += '-' + str(AR_TRANSACTION_SEGMENT_TYPES_DICT[field_detail.segment_3])
            if field_detail.segment_4:
                selected_list.append(field_detail.segment_4)
                example += '-' + str(AR_TRANSACTION_SEGMENT_TYPES_DICT[field_detail.segment_4])
        except Exception as e:
            print(e)

    context = {'transaction_type': transaction_type,
               'transaction_field': transaction_field,
               'segments_list': segments_list,
               'selected_list': selected_list,
               'example': example,
               'type': type,
               'id': gl_integarion.id}

    return render(request, 'gl_integration_edit.html', context)


@login_required
def ap_options(request, active_tab_index=None):
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    active_tab_index = '0'
    ap_options = APOptions.objects.filter(company_id=company_id)
    if ap_options:
        ap_options = ap_options.last()
    else:
        ap_options = APOptions()
        ap_options.company_id = company_id
        ap_options.is_hidden = False
        ap_options.create_date = datetime.datetime.today()
        ap_options.update_date = datetime.datetime.today()
        ap_options.update_by = request.user.id
        ap_options.save()

    form = APOptionsNumberForm(instance=ap_options, company_id=company_id)
    state_form = APOptionsStatementForm(instance=ap_options, company_id=company_id)

    if request.method == 'POST':
        if request.POST['active_tab_index'] == '0':
            form = APOptionsNumberForm(data=request.POST, instance=ap_options, company_id=company_id)
            ap_option = form.save(commit=False)
            ap_option.update_date = datetime.datetime.today()
            ap_option.update_by = request.user.id
            ap_option.save()
        else:
            form = APOptionsStatementForm(data=request.POST, instance=ap_options, company_id=company_id)
            ap_option = form.save(commit=False)
            ap_option.update_date = datetime.datetime.today()
            ap_option.update_by = request.user.id
            ap_option.save()

        form = APOptionsNumberForm(instance=ap_options, company_id=company_id)
        state_form = APOptionsStatementForm(instance=ap_options, company_id=company_id)

    return render_to_response('AP-Options.html', RequestContext(request,
                                                                {'form': form,
                                                                 'state_form': state_form,
                                                                 'active_tab_index': active_tab_index}))


@login_required
def ar_options(request, active_tab_index=None):
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    active_tab_index = '0'
    ar_options = AROptions.objects.filter(company_id=company_id)
    if ar_options:
        ar_options = ar_options.last()
    else:
        ar_options = AROptions()
        ar_options.company_id = company_id
        ar_options.is_hidden = False
        ar_options.create_date = datetime.datetime.today()
        ar_options.update_date = datetime.datetime.today()
        ar_options.update_by = request.user.id
        ar_options.save()

    form = AROptionsNumberForm(instance=ar_options, company_id=company_id)
    state_form = AROptionsStatementForm(instance=ar_options, company_id=company_id)

    if request.method == 'POST':
        if request.POST['active_tab_index'] == '0':
            form = AROptionsNumberForm(data=request.POST, instance=ar_options, company_id=company_id)
            ar_option = form.save(commit=False)
            ar_option.update_date = datetime.datetime.today()
            ar_option.update_by = request.user.id
            ar_option.save()
        else:
            form = AROptionsStatementForm(data=request.POST, instance=ar_options, company_id=company_id)
            ar_option = form.save(commit=False)
            ar_option.update_date = datetime.datetime.today()
            ar_option.update_by = request.user.id
            ar_option.save()

        form = AROptionsNumberForm(instance=ar_options, company_id=company_id)
        state_form = AROptionsStatementForm(instance=ar_options, company_id=company_id)

    return render_to_response('AR-Options.html', RequestContext(request,
                                                                {'form': form,
                                                                 'state_form': state_form,
                                                                 'active_tab_index': active_tab_index}))


@login_required
def ap_gl_integration(request, active_tab_index=None):
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    type = 'AP'
    if not active_tab_index:
        active_tab_index = '0'

    return render_to_response('gl_integration_list.html', RequestContext(request, {'type': type, 'active_tab_index': active_tab_index}))


@login_required
def ar_gl_integration(request, active_tab_index=None):
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    type = 'AR'
    if not active_tab_index:
        active_tab_index = '0'

    return render_to_response('gl_integration_list.html', RequestContext(request, {'type': type, 'active_tab_index': active_tab_index}))


@login_required
def GLIntegrtionList__asJson(request, type):
    draw = request.GET['draw']
    start = request.GET['start']
    length = request.GET['length']
    search = request.GET['search[value]']
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0

    company = Company.objects.get(pk=company_id)
    if type == 'AP':
        integarion_list = APGLIntegration.objects.filter(is_hidden=0, company_id=company_id).order_by('id')
    else:
        integarion_list = ARGLIntegration.objects.filter(is_hidden=0, company_id=company_id).order_by('id')

    # if search:  # Filter data base on search
    #     integarion_list = integarion_list.filter(Q(update_date__icontains=search))

    # All data
    # integarion_list = integarion_list.order_by('id')[int(start):(int(start) + int(length))]
    # Order by list_limit base on order_dir and order_column
    # order_column_dict = {'status': 9, 'amount': 8, 'buyyer': 7, 'document_type': 6,
    #                      'document_date': 5, 'document_number': 4, 'code': 3}

    # order_column = request.GET['order[0][column]']
    # column_name = ""
    # if order_column == "1":
    #     column_name = "update_date"

    # list = []
    # order_dir = request.GET['order[0][dir]']
    # if order_dir == "asc":
    #         list = integarion_list.order_by(column_name)[int(start):(int(start) + int(length))]
    # elif order_dir == "desc":
    #         list = integarion_list.order_by('-' + column_name)[int(start):(int(start) + int(length))]

    # Create data list
    array = []

    for field in integarion_list:
        try:
            example = ''
            data = {}
            # data["update_date"] = field.update_date.strftime("%d-%m-%Y")
            data["id"] = str(field.id)
            data["transaction_field"] = str(GL_INTEGRATION_OPTIONS_DICT[field.transaction_field]) if field.transaction_field else ''
            if type == 'AP':
                data["transaction_type"] = str(AP_GL_SOURCE_TYPE_DICT[field.transaction_type]) if field.transaction_type else ''
                field_detail = APGLIntegrationDetail.objects.filter(parent_id=field.id)
                if field_detail:
                    field_detail = field_detail.last()
                    if field_detail.segment_0:
                        example += str(AP_TRANSACTION_SEGMENT_TYPES_DICT[field_detail.segment_0])
                    if field_detail.segment_1:
                        example += '-' + str(AP_TRANSACTION_SEGMENT_TYPES_DICT[field_detail.segment_1])
                    if field_detail.segment_2:
                        example += '-' + str(AP_TRANSACTION_SEGMENT_TYPES_DICT[field_detail.segment_2])
                    if field_detail.segment_3:
                        example += '-' + str(AP_TRANSACTION_SEGMENT_TYPES_DICT[field_detail.segment_3])
                    if field_detail.segment_4:
                        example += '-' + str(AP_TRANSACTION_SEGMENT_TYPES_DICT[field_detail.segment_4])
            else:
                data["transaction_type"] = str(AR_GL_SOURCE_TYPE_DICT[field.transaction_type]) if field.transaction_type else ''
                field_detail = ARGLIntegrationDetail.objects.filter(parent_id=field.id)
                if field_detail:
                    field_detail = field_detail.last()
                    if field_detail.segment_0:
                        example += str(AR_TRANSACTION_SEGMENT_TYPES_DICT[field_detail.segment_0])
                    if field_detail.segment_1:
                        example += '-' + str(AR_TRANSACTION_SEGMENT_TYPES_DICT[field_detail.segment_1])
                    if field_detail.segment_2:
                        example += '-' + str(AR_TRANSACTION_SEGMENT_TYPES_DICT[field_detail.segment_2])
                    if field_detail.segment_3:
                        example += '-' + str(AR_TRANSACTION_SEGMENT_TYPES_DICT[field_detail.segment_3])
                    if field_detail.segment_4:
                        example += '-' + str(AR_TRANSACTION_SEGMENT_TYPES_DICT[field_detail.segment_4])
            data["example"] = example
            array.append(data)
        except Exception as e:
            print(e)
    records_total = len(array)
    records_filtered = len(array)

    content = {"draw": draw, "data": array, "recordsTotal": records_total, "recordsFiltered": records_filtered}
    json_content = json.dumps(content, ensure_ascii=False)
    return HttpResponse(json_content, content_type='application/json')


def check_if_duplicate(request, type, field):
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    company = Company.objects.get(pk=company_id)
    value = request.POST.get('value')
    cust = request.POST.get('cust')
    data = {
        'is_duplicate': 0
    }
    if type == 'AR_Invoice':
        if field == 'document_number':
            # journal_type = dict(TRANSACTION_TYPES)['AR Invoice']
            if cust != '0':
                # journals = Journal.objects.raw('SELECT * FROM accounting_journal WHERE \
                #     document_number = %s AND \
                #     is_hidden=0 AND \
                #     journal_type=%s AND \
                #     company_id=%s AND \
                #     customer_id=%s \
                #     COLLATE utf8_bin', [value, journal_type, company_id, cust])
                journals = Journal.objects.filter(is_hidden=False, company_id=company_id,
                                                journal_type=dict(TRANSACTION_TYPES)['AR Invoice'],
                                                document_number=value, customer_id=cust)
            else:
                journals = Journal.objects.filter(is_hidden=False, company_id=company_id,
                                                journal_type=dict(TRANSACTION_TYPES)['AR Invoice'],
                                                document_number=value)
            if journals.exists():
                for j in journals:
                    if j.document_number == value:
                        data = {
                            'is_duplicate': 1
                        }

    elif type == 'AP_Invoice':
        if field == 'document_number':
            if cust != '0':
                journals = Journal.objects.filter(is_hidden=False, company_id=company_id,
                                                journal_type=dict(TRANSACTION_TYPES)['AP Invoice'],
                                                document_number=value, supplier_id=cust)
            else:
                journals = Journal.objects.filter(is_hidden=False, company_id=company_id,
                                                journal_type=dict(TRANSACTION_TYPES)['AP Invoice'],
                                                document_number=value)
            if journals.exists():
                for j in journals:
                    if j.document_number == value:
                        data = {
                            'is_duplicate': 1
                        }

    content = {"data": data}
    json_content = json.dumps(content, ensure_ascii=False)
    return HttpResponse(json_content, content_type='application/json')


def get_batch_entries(request, batch_type, batch_no):
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    try:
        journals = list(Journal.objects.filter(is_hidden=False, company_id=company_id,
                                        batch_id=batch_no)\
                        .exclude(reference="REVERSING ENTRY")\
                        .exclude(journal_type=dict(TRANSACTION_TYPES)['AD'])\
                        .values_list('id', 'code'))

        journals = sorted(journals, key=lambda x: int(x[1]))
    except:
        journals = []

    content = {"data": journals}
    json_content = json.dumps(content, ensure_ascii=False)
    return HttpResponse(json_content, content_type='application/json')


@csrf_exempt
@login_required
def load_applied_doc_history(request):
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    doc = request.POST.get('doc')
    type = request.POST.get('type')
    vendor_id = request.POST.get('vendor')
    list_filter = None
    array = []
    if type == 'AP':
        current_doc = Journal.objects.filter(is_hidden=0, 
                                company_id=company_id, 
                                document_number=doc, 
                                supplier_id=vendor_id,
                                journal_type__in=[dict(TRANSACTION_TYPES)['AP Payment'], dict(TRANSACTION_TYPES)['AP Invoice']])
        if current_doc:
            current_doc = current_doc.first()
            list_filter = current_doc.related_invoice.filter(journal__is_hidden=False
                # journal__status=int(STATUS_TYPE_DICT['Posted'])
            ).exclude(journal_id__isnull=True).exclude(journal__reverse_reconciliation=True
            ).exclude(journal__journal_type=dict(TRANSACTION_TYPES)['AD']
            ).exclude(journal__journal_type=dict(TRANSACTION_TYPES)['GL']).exclude(is_hidden=True).order_by('journal__document_date', 'id')
    else:
        current_doc = Journal.objects.filter(is_hidden=0, 
                                company_id=company_id, 
                                document_number=doc, 
                                customer_id=vendor_id, 
                                journal_type__in=[dict(TRANSACTION_TYPES)['AR Receipt'], dict(TRANSACTION_TYPES)['AR Invoice']])
        if current_doc:
            current_doc = current_doc.first()
            list_filter = current_doc.related_invoice.filter(journal__is_hidden=False
                # journal__status=int(STATUS_TYPE_DICT['Posted'])
            ).exclude(journal_id__isnull=True).exclude(journal__reverse_reconciliation=True
            ).exclude(journal__journal_type=dict(TRANSACTION_TYPES)['AD']
            ).exclude(journal__journal_type=dict(TRANSACTION_TYPES)['GL']).exclude(is_hidden=True).order_by('transaction_date', 'id')

    if current_doc.real_outstanding and current_doc.real_outstanding != 0:
        if current_doc.real_outstanding < 0:
            if int(current_doc.document_type) == int(DOCUMENT_TYPE_DICT['Credit Note']):
                outstanding_balance = math.fabs(current_doc.real_outstanding)
            else:
                outstanding_balance = 0
        else:
            outstanding_balance = current_doc.real_outstanding
    else:
        cut_date = request.session['session_date'].strftime(("%Y-%m-%d"))
        outstanding_balance = current_doc.has_outstanding(cut_date)[1]
    # for Applied credit or debit info
    try:
        if current_doc.document_type == DOCUMENT_TYPE_DICT['Credit Note'] or current_doc.document_type == DOCUMENT_TYPE_DICT['Debit Note']:
            trxs = Transaction.objects.filter(is_hidden=False, journal_id=current_doc.id)\
                        .exclude(related_invoice_id__isnull=True)
            if trxs.exists():
                curr_trx = trxs.first()
                related_invoice = curr_trx.related_invoice
                related_trxs = related_invoice.related_invoice.filter(journal__is_hidden=False, id__lt=curr_trx.id,
                    journal__document_type__in=[DOCUMENT_TYPE_DICT['Credit Note'], DOCUMENT_TYPE_DICT['Debit Note']],
                    journal__status=int(STATUS_TYPE_DICT['Posted'])
                ).exclude(journal_id__isnull=True).exclude(journal__reverse_reconciliation=True
                ).exclude(journal__journal_type__in=[dict(TRANSACTION_TYPES)['GL'], dict(TRANSACTION_TYPES)['AD']]).exclude(is_hidden=True).order_by('id')
                if related_trxs.exists():
                    related_trx = related_trxs.last()
                    if related_trx.related_journal_outstanding != 0:
                        data = {
                            "id": '',
                            "trnx_type": 'Applied Credit Note' if current_doc.document_type == DOCUMENT_TYPE_DICT['Credit Note'] else 'Applied Debit Note',
                            "trnx_desc": 'Applied Credit Note' if current_doc.document_type == DOCUMENT_TYPE_DICT['Credit Note'] else 'Applied Debit Note',
                            "doc_number": related_trx.journal.document_number,
                            "apply_amount": intcomma("%.2f" % round_number(related_trx.related_journal_outstanding)),
                            "check": '',
                            'posting_date': current_doc.posting_date.strftime('%d-%m-%Y'),
                            'balance': intcomma("%.2f" % outstanding_balance)
                        }
                        array.append(data)
    except:
        pass

    if list_filter:
        # Create data list
        for field in list_filter:
            trnx_type = dict(DOCUMENT_TYPES).get(str(field.journal.document_type))
            if not trnx_type:
                trnx_type = 'Adjustment'
            trnx_status = 'Posted' if field.journal.status == 2 else 'Open'
            trnx_desc = trnx_type + '-' + trnx_status
            if trnx_type == 'Debit Note':
                trnx_type = 'Debit Note Applied To'
                trnx_desc = 'Debit Note Applied To'
            if trnx_type == 'Credit Note':
                trnx_type = 'Credit Note Applied To'
                trnx_desc = 'Credit Note Applied To'
            data = {
                "id": field.id,
                "trnx_type": trnx_type,
                "trnx_desc": trnx_desc,
                "doc_number": field.journal.document_number,
                "apply_amount": intcomma("%.2f" % round_number(field.total_amount * (-1))) if trnx_type != 'Debit Note' else intcomma("%.2f" % round_number(field.total_amount)),
                "check": field.journal.payment_check_number if field.journal.payment_check_number else '',
                'posting_date': field.journal.posting_date.strftime('%d-%m-%Y'),
                'balance': intcomma("%.2f" % outstanding_balance)
            }
            array.append(data)

            if field.discount_amount:
                trnx_type = 'Discount'
                trnx_status = 'Posted' if field.journal.status == 2 else 'Open'
                trnx_desc = trnx_type + '-' + trnx_status
                data = {
                    "id": field.id,
                    "trnx_type": trnx_type,
                    "trnx_desc": trnx_desc,
                    "doc_number": field.journal.document_number,
                    "apply_amount": intcomma("%.2f" % round_number(field.discount_amount * (-1))),
                    "check": field.journal.payment_check_number if field.journal.payment_check_number else '',
                    'posting_date': field.journal.posting_date.strftime('%d-%m-%Y'),
                    'balance': intcomma("%.2f" % outstanding_balance)
                }
                array.append(data)
                
            if float(field.adjustment_amount) != 0.000000:
                trnx_type = 'Adjustment'
                trnx_status = 'Posted' if field.journal.status == 2 else 'Open'
                trnx_desc = trnx_type + '-' + trnx_status
                data = {
                    "id": field.id,
                    "trnx_type": trnx_type,
                    "trnx_desc": trnx_desc,
                    "doc_number": field.journal.document_number,
                    "apply_amount": intcomma("%.2f" % round_number(field.adjustment_amount)),
                    "check": field.journal.payment_check_number if field.journal.payment_check_number else '',
                    'posting_date': field.journal.posting_date.strftime('%d-%m-%Y'),
                    'balance': intcomma("%.2f" % outstanding_balance)
                }
                array.append(data)

    if array:
        content = {"data": array, "recordsTotal": 0, "recordsFiltered": 0}
    else:
        content = {"data": [], "recordsTotal": 0, "recordsFiltered": 0}
    json_content = json.dumps(content, ensure_ascii=False)
    return HttpResponse(json_content, content_type='application/json')


# fix payment for improving aging performance
def fix_payments_outs_amount(request, type='AR', journal_ids=[]):
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    doc_type_array = ['1', '2', '3', '4', '5', '6', '7', '8', '10']
    journal_item_list = None
    if journal_ids == None or journal_ids == 'None':
        journal_ids = []

    if len(journal_ids):
        time.sleep(2) # sleep 2 seconds to get all the new transaction
        journal_item_list = Journal.objects.prefetch_related('related_invoice').filter(id__in=journal_ids)
    else:
        if type == 'AR':
            journal_item_list = Journal.objects.select_related('customer').prefetch_related('related_invoice').filter(
                Q(journal_type=dict(TRANSACTION_TYPES)['AR Receipt'], outstanding_amount__gt=0) |
                Q(journal_type=dict(TRANSACTION_TYPES)['AR Receipt'], outstanding_amount__lt=0) |
                Q(document_type=DOCUMENT_TYPE_DICT['Unapplied Cash']) |
                Q(journal_type=dict(TRANSACTION_TYPES)['AR Invoice']),
                company_id=company_id, is_hidden=0, document_type__in=doc_type_array,
                status=int(STATUS_TYPE_DICT['Posted'])
            ).exclude(reverse_reconciliation=True)
        else:
            journal_item_list = Journal.objects.select_related('supplier', 'currency').filter(
                Q(journal_type=dict(TRANSACTION_TYPES)['AP Payment'], outstanding_amount__gt=0) |
                Q(journal_type=dict(TRANSACTION_TYPES)['AP Payment'], outstanding_amount__lt=0) |
                Q(journal_type=dict(TRANSACTION_TYPES)['AP Invoice']),
                company_id=company_id, is_hidden=0, document_type__in=doc_type_array,
                status=int(STATUS_TYPE_DICT['Posted'])
            ).exclude(reverse_reconciliation=True)
 
    if type == 'AR':
        order_date = 'transaction_date'
    else:
        order_date = 'journal__document_date'
    for journal in journal_item_list:
        # if journal.id in [14904]:
        #     print(journal.document_number)
        sp_journal = False
        full_transaction_list = journal.related_invoice.select_related('journal').filter(
            Q(journal__journal_type__in=[dict(TRANSACTION_TYPES)['AP Invoice'], dict(TRANSACTION_TYPES)['AR Invoice']], journal__status=int(STATUS_TYPE_DICT['Posted'])) | 
            Q(journal__journal_type__in=[dict(TRANSACTION_TYPES)['AP Payment'], dict(TRANSACTION_TYPES)[
              'AR Receipt'], dict(TRANSACTION_TYPES)['AD']], journal__status=int(STATUS_TYPE_DICT['Posted']))
        ).exclude(journal_id__isnull=True).exclude(journal__reverse_reconciliation=True
        ).exclude(journal__journal_type=dict(TRANSACTION_TYPES)['GL']
        ).exclude(is_hidden=True
        ).order_by(order_date, 'id')

        payment_total = 0
        if journal.journal_type in [dict(TRANSACTION_TYPES)['AR Receipt'], dict(TRANSACTION_TYPES)['AP Payment']] and journal.customer_unapplied != 0:
            total_amount = journal.customer_unapplied * (-1) if journal.customer_unapplied > 0 else journal.customer_unapplied
            sp_journal = True if journal.customer_unapplied < 0 else False
        elif journal.document_type == DOCUMENT_TYPE_DICT['Unapplied Cash']:
            total_amount = journal.total_amount * (-1)
        elif journal.document_type == DOCUMENT_TYPE_DICT['Debit Note']:
            transactions = Transaction.objects.filter(is_hidden=False, journal_id=journal.id)\
                .exclude(related_invoice_id__isnull=True).exclude(journal__journal_type=dict(TRANSACTION_TYPES)['GL'])
            if transactions.exists():
                trx = transactions.first()
                if journal.total_amount < trx.related_invoice.total_amount and trx.related_invoice.document_type != DOCUMENT_TYPE_DICT['Credit Note']:
                    journal.fully_paid_date = journal.document_date
                    journal.save()
                    total_amount = 0
                else:
                    total_amount = journal.total_amount - abs(journal.adjustment_amount) - abs(journal.discount_amount)
            else:
                total_amount = journal.total_amount - abs(journal.adjustment_amount) - abs(journal.discount_amount)
        elif journal.document_type == DOCUMENT_TYPE_DICT['Credit Note']:
            transactions = Transaction.objects.filter(is_hidden=False, journal_id=journal.id)\
                .exclude(related_invoice_id__isnull=True).exclude(journal__journal_type=dict(TRANSACTION_TYPES)['GL'])
            if transactions.exists():
                related_invoice = Journal.objects.filter(pk=transactions.first().related_invoice_id).first()
                if related_invoice.document_type != DOCUMENT_TYPE_DICT['Credit Note']:
                    # if journal.total_amount > related_invoice.document_amount:
                    #     total_amount = (journal.total_amount - related_invoice.document_amount) * (-1)
                    # else:
                    total_amount = journal.outstanding_amount
                else:
                    total_amount = journal.total_amount * (-1) + abs(journal.adjustment_amount) + abs(journal.discount_amount)
            else:
                total_amount = journal.total_amount * (-1) + abs(journal.adjustment_amount) + abs(journal.discount_amount)
        else:
            total_amount = journal.total_amount - abs(journal.adjustment_amount) - abs(journal.discount_amount)
        # if journal.id in [14904]:
        #     print('again', journal.document_number, total_amount, len(full_transaction_list))
        if (journal.document_type == DOCUMENT_TYPE_DICT['Debit Note'] or journal.document_type == DOCUMENT_TYPE_DICT['Credit Note']) \
            and len(full_transaction_list) == 0 and total_amount == 0:
            journal.fully_paid_date = journal.document_date
            journal.is_fully_paid = True
            journal.save()
        if full_transaction_list:
            if journal.customer:
                full_transaction_list = full_transaction_list.filter(journal__customer_id=journal.customer_id)
            elif journal.supplier:
                full_transaction_list = full_transaction_list.filter(journal__supplier_id=journal.supplier_id)
            
            for transaction in full_transaction_list:
                try:
                    payment_amount = 0
                    if transaction.journal.document_type == DOCUMENT_TYPE_DICT['Adjustment']:
                        if transaction.related_invoice.document_type == DOCUMENT_TYPE_DICT['Credit Note']:
                            payment_amount -= (transaction.amount + transaction.tax_amount)
                        else:
                            payment_amount += abs(transaction.amount + transaction.tax_amount)
                    elif transaction.journal.document_type == DOCUMENT_TYPE_DICT['Credit Note']:
                        # if journal.document_type == DOCUMENT_TYPE_DICT['Credit Note']:
                        #     payment_amount -= (transaction.amount + transaction.tax_amount)
                        # else:
                        payment_amount += (transaction.amount + transaction.tax_amount)
                    elif transaction.journal.document_type == DOCUMENT_TYPE_DICT['Debit Note']:
                        # if journal.document_type == DOCUMENT_TYPE_DICT['Credit Note']:
                        #     payment_amount += (transaction.amount + transaction.tax_amount)
                        # else:
                        payment_amount -= (transaction.amount + transaction.tax_amount)
                    elif journal.journal_type in [dict(TRANSACTION_TYPES)['AR Receipt'], dict(TRANSACTION_TYPES)['AP Payment']] and journal.customer_unapplied != 0:
                        payment_amount -= (transaction.amount + transaction.tax_amount)
                    elif journal.document_type == DOCUMENT_TYPE_DICT['Unapplied Cash']:
                        payment_amount -= (transaction.amount + transaction.tax_amount)
                    elif transaction.journal.journal_type in [dict(TRANSACTION_TYPES)['AR Receipt'], dict(TRANSACTION_TYPES)['AP Payment']]:
                        if journal.document_type == DOCUMENT_TYPE_DICT['Credit Note']:
                            payment_amount -= (transaction.amount + transaction.tax_amount)
                        else:
                            payment_amount += (transaction.amount + transaction.tax_amount)
                    elif transaction.journal.document_type == DOCUMENT_TYPE_DICT['Unapplied Cash']:
                        if journal.document_type == DOCUMENT_TYPE_DICT['Credit Note']:
                            payment_amount -= (transaction.amount + transaction.tax_amount)
                        else:
                            payment_amount += (transaction.amount + transaction.tax_amount)
                    else:
                        payment_amount += (transaction.amount + transaction.tax_amount)

                    # if payment_amount > 0:
                    if journal.journal_type == dict(TRANSACTION_TYPES)['AP Invoice'] and \
                        transaction.adjustment_amount != 0:
                        payment_amount -= transaction.adjustment_amount
                    payment_total += payment_amount
                    if total_amount == 0:
                        outstanding = 0
                    else:
                        outstanding = total_amount - payment_total
                    # if journal.id == 24978:
                        # print('payment_total', payment_total, outstanding)
                    if journal.journal_type in [dict(TRANSACTION_TYPES)['AR Invoice'], dict(TRANSACTION_TYPES)['AP Invoice']] and\
                        not journal.document_type == DOCUMENT_TYPE_DICT['Credit Note'] and outstanding <= 0:
                        # transaction.journal.outstanding_amount = float(
                        #     transaction.journal.outstanding_amount) + float(outstanding)
                        # if transaction.journal.outstanding_amount == 0:
                        #     transaction.journal.fully_paid_date = journal.document_date
                        # else:
                        #     transaction.journal.fully_paid_date = None
                        # transaction.journal.save()
                        outstanding = 0
                    elif journal.journal_type in [dict(TRANSACTION_TYPES)['AR Invoice'], dict(TRANSACTION_TYPES)['AP Invoice']] and\
                        journal.document_type == DOCUMENT_TYPE_DICT['Credit Note'] and outstanding >= 0:
                        transaction.journal.outstanding_amount = float(outstanding)
                        if transaction.journal.outstanding_amount == 0:
                            transaction.journal.fully_paid_date = journal.document_date
                            transaction.journal.is_fully_paid = True
                        else:
                            if journal.is_fully_paid:
                                trxs = Transaction.objects.filter(journal_id=journal.id, is_hidden=False, related_invoice_id__isnull=False)
                                if not trxs:
                                    transaction.journal.fully_paid_date = None
                                    transaction.journal.is_fully_paid = False
                        transaction.journal.save()
                        outstanding = 0
                    elif journal.journal_type in [dict(TRANSACTION_TYPES)['AR Receipt'], dict(TRANSACTION_TYPES)['AP Payment']] and\
                        sp_journal:
                        # outstanding = 0
                        outstanding = -1 * outstanding
                        if outstanding < 0:
                            total_amount += outstanding
                            payment_total -= outstanding

                    # if journal.id in [14812, 14813, 14815]:
                    #     print('journal.id', journal.id)
                    #     print('rl-transaction', transaction.id)
                    #     print('total_amount', total_amount)
                    #     print('payment_amount', payment_amount)
                    #     print('payment_total', payment_total)
                    #     print('outstanding', outstanding)
                    #     print('==========================')
                    trx = Transaction.objects.filter(journal_id=journal.id, is_hidden=False, related_invoice_id__isnull=False)
                    if not trx:
                        if outstanding == 0:
                            if type == 'AR':
                                journal.fully_paid_date = transaction.transaction_date
                            else:
                                journal.fully_paid_date = transaction.journal.document_date
                            journal.is_fully_paid = True
                        else:
                            journal.fully_paid_date = None
                            journal.is_fully_paid = False
                        journal.save()

                    transaction.related_journal_outstanding = outstanding
                    transaction.save()

                    if len(journal_ids) and outstanding != 0:
                        last_payment_trx = Transaction.objects.filter(related_invoice_id=journal.id,
                                    journal__status=int(STATUS_TYPE_DICT['Posted'])
                                ).exclude(journal_id__isnull=True).exclude(journal__reverse_reconciliation=True
                                ).exclude(journal__journal_type=dict(TRANSACTION_TYPES)['GL']
                                ).exclude(journal__journal_type=dict(TRANSACTION_TYPES)['AD']
                                ).exclude(is_hidden=True
                                ).order_by('-transaction_date', '-id')
                        for lTrx in last_payment_trx:
                            if lTrx.related_journal_outstanding == 0:
                                lTrx.related_journal_outstanding = outstanding
                                lTrx.save()


                except Exception as e:
                    print(e)
                    print('transaction', transaction.id)
                    # messages.error(request, 'ERROR Happend.')
                    # return render_to_response('page_acc.html', RequestContext(request, {}))

    if journal_ids:
        return True
    messages.success(request, 'Aging performance fixing is successfull.')
    return render_to_response('page_acc.html', RequestContext(request, {}))

# fix payment for improving aging performance
def fix_real_outs_amount(request, type='AR'):
    company_id = request.session['login_company_id'] if request.session['login_company_id'] else 0
    doc_type_array = ['1', '2', '3', '4', '5', '6', '7', '8', '10']
    journal_item_list = None
    
    if type == 'AR':
        journal_item_list = Journal.objects.select_related('customer').prefetch_related('related_invoice').filter(
            Q(journal_type=dict(TRANSACTION_TYPES)['AR Receipt'], outstanding_amount__gt=0) |
            Q(journal_type=dict(TRANSACTION_TYPES)['AR Receipt'], outstanding_amount__lt=0) |
            Q(document_type=DOCUMENT_TYPE_DICT['Unapplied Cash']) |
            Q(journal_type=dict(TRANSACTION_TYPES)['AR Invoice']),
            company_id=company_id, is_hidden=0, document_type__in=doc_type_array,
            status=int(STATUS_TYPE_DICT['Posted'])
        ).exclude(reverse_reconciliation=True)
    else:
        journal_item_list = Journal.objects.select_related('supplier', 'currency').filter(
            Q(journal_type=dict(TRANSACTION_TYPES)['AP Payment'], outstanding_amount__gt=0) |
            Q(journal_type=dict(TRANSACTION_TYPES)['AP Payment'], outstanding_amount__lt=0) |
            Q(journal_type=dict(TRANSACTION_TYPES)['AP Invoice']),
            company_id=company_id, is_hidden=0, document_type__in=doc_type_array,
            status=int(STATUS_TYPE_DICT['Posted'])
        ).exclude(reverse_reconciliation=True)
 
    if type == 'AR':
        order_date = 'transaction_date'
    else:
        order_date = 'journal__document_date'
    for journal in journal_item_list:
        # if journal.id in [14904]:
        #     print(journal.document_number)
        sp_journal = False
        full_transaction_list = journal.related_invoice.select_related('journal').filter(
            Q(journal__journal_type__in=[dict(TRANSACTION_TYPES)['AP Invoice'], dict(TRANSACTION_TYPES)['AR Invoice']]) | 
            Q(journal__journal_type__in=[dict(TRANSACTION_TYPES)['AP Payment'], dict(TRANSACTION_TYPES)[
              'AR Receipt'], dict(TRANSACTION_TYPES)['AD']])
        ).exclude(journal_id__isnull=True).exclude(journal__reverse_reconciliation=True
        ).exclude(journal__journal_type=dict(TRANSACTION_TYPES)['GL']
        ).exclude(journal__is_hidden=True
        ).exclude(is_hidden=True
        ).order_by(order_date, 'id')

        payment_total = 0
        if journal.journal_type in [dict(TRANSACTION_TYPES)['AR Receipt'], dict(TRANSACTION_TYPES)['AP Payment']] and journal.customer_unapplied != 0:
            total_amount = journal.customer_unapplied * (-1) if journal.customer_unapplied > 0 else journal.customer_unapplied
            sp_journal = True if journal.customer_unapplied < 0 else False
        elif journal.document_type == DOCUMENT_TYPE_DICT['Unapplied Cash']:
            total_amount = journal.total_amount * (-1)
        elif journal.document_type == DOCUMENT_TYPE_DICT['Debit Note']:
            transactions = Transaction.objects.filter(is_hidden=False, journal_id=journal.id)\
                .exclude(related_invoice_id__isnull=True)
            if transactions.exists():
                trx = transactions.first()
                if journal.total_amount < trx.related_invoice.total_amount and trx.related_invoice.document_type != DOCUMENT_TYPE_DICT['Credit Note']:
                    journal.fully_paid_date = journal.document_date
                    journal.save()
                    total_amount = 0
                else:
                    total_amount = journal.total_amount - abs(journal.adjustment_amount) - abs(journal.discount_amount)
            else:
                total_amount = journal.total_amount - abs(journal.adjustment_amount) - abs(journal.discount_amount)
        elif journal.document_type == DOCUMENT_TYPE_DICT['Credit Note']:
            transactions = Transaction.objects.filter(is_hidden=False, journal_id=journal.id)\
                .exclude(related_invoice_id__isnull=True)
            if transactions.exists():
                related_invoice = Journal.objects.filter(pk=transactions.first().related_invoice_id).first()
                if related_invoice.document_type != DOCUMENT_TYPE_DICT['Credit Note']:
                    # if journal.total_amount > related_invoice.document_amount:
                    #     total_amount = (journal.total_amount - related_invoice.document_amount) * (-1)
                    # else:
                    total_amount = journal.outstanding_amount
                else:
                    total_amount = journal.total_amount * (-1) + abs(journal.adjustment_amount) + abs(journal.discount_amount)
            else:
                total_amount = journal.total_amount * (-1) + abs(journal.adjustment_amount) + abs(journal.discount_amount)
        else:
            total_amount = journal.total_amount - abs(journal.adjustment_amount) - abs(journal.discount_amount)
        # if journal.id in [14904]:
        #     print('again', journal.document_number, total_amount, len(full_transaction_list))

        if full_transaction_list:
            if journal.customer:
                full_transaction_list = full_transaction_list.filter(journal__customer_id=journal.customer_id)
            elif journal.supplier:
                full_transaction_list = full_transaction_list.filter(journal__supplier_id=journal.supplier_id)
            
            for transaction in full_transaction_list:
                try:
                    payment_amount = 0
                    if transaction.journal.document_type == DOCUMENT_TYPE_DICT['Adjustment']:
                        if transaction.related_invoice.document_type == DOCUMENT_TYPE_DICT['Credit Note']:
                            payment_amount -= (transaction.amount + transaction.tax_amount)
                        else:
                            payment_amount += abs(transaction.amount + transaction.tax_amount)
                    elif transaction.journal.document_type == DOCUMENT_TYPE_DICT['Credit Note']:
                        # if journal.document_type == DOCUMENT_TYPE_DICT['Credit Note']:
                        #     payment_amount -= (transaction.amount + transaction.tax_amount)
                        # else:
                        payment_amount += (transaction.amount + transaction.tax_amount)
                    elif transaction.journal.document_type == DOCUMENT_TYPE_DICT['Debit Note']:
                        # if journal.document_type == DOCUMENT_TYPE_DICT['Credit Note']:
                        #     payment_amount += (transaction.amount + transaction.tax_amount)
                        # else:
                        payment_amount -= (transaction.amount + transaction.tax_amount)
                    elif journal.journal_type in [dict(TRANSACTION_TYPES)['AR Receipt'], dict(TRANSACTION_TYPES)['AP Payment']] and journal.customer_unapplied != 0:
                        payment_amount -= (transaction.amount + transaction.tax_amount)
                    elif journal.document_type == DOCUMENT_TYPE_DICT['Unapplied Cash']:
                        payment_amount -= (transaction.amount + transaction.tax_amount)
                    elif transaction.journal.journal_type in [dict(TRANSACTION_TYPES)['AR Receipt'], dict(TRANSACTION_TYPES)['AP Payment']]:
                        if journal.document_type == DOCUMENT_TYPE_DICT['Credit Note']:
                            payment_amount -= (transaction.amount + transaction.tax_amount)
                        else:
                            payment_amount += (transaction.amount + transaction.tax_amount)
                    elif transaction.journal.document_type == DOCUMENT_TYPE_DICT['Unapplied Cash']:
                        if journal.document_type == DOCUMENT_TYPE_DICT['Credit Note']:
                            payment_amount -= (transaction.amount + transaction.tax_amount)
                        else:
                            payment_amount += (transaction.amount + transaction.tax_amount)
                    else:
                        payment_amount += (transaction.amount + transaction.tax_amount)

                    # if payment_amount > 0:
                    if journal.journal_type == dict(TRANSACTION_TYPES)['AP Invoice'] and \
                        transaction.adjustment_amount != 0:
                        payment_amount -= transaction.adjustment_amount
                    payment_total += payment_amount
                    if total_amount == 0:
                        outstanding = 0
                    else:
                        outstanding = total_amount - payment_total
                    # if journal.id == 24978:
                        # print('payment_total', payment_total, outstanding)
                    if journal.journal_type in [dict(TRANSACTION_TYPES)['AR Invoice'], dict(TRANSACTION_TYPES)['AP Invoice']] and\
                        not journal.document_type == DOCUMENT_TYPE_DICT['Credit Note'] and outstanding <= 0:
                        # transaction.journal.outstanding_amount = float(
                        #     transaction.journal.outstanding_amount) + float(outstanding)
                        # if transaction.journal.outstanding_amount == 0:
                        #     transaction.journal.fully_paid_date = journal.document_date
                        # else:
                        #     transaction.journal.fully_paid_date = None
                        # transaction.journal.save()
                        outstanding = 0
                    elif journal.journal_type in [dict(TRANSACTION_TYPES)['AR Invoice'], dict(TRANSACTION_TYPES)['AP Invoice']] and\
                        journal.document_type == DOCUMENT_TYPE_DICT['Credit Note'] and outstanding >= 0:
                        transaction.journal.outstanding_amount = float(outstanding)
                        if transaction.journal.outstanding_amount == 0:
                            transaction.journal.fully_paid_date = journal.document_date
                            transaction.journal.is_fully_paid = True
                        else:
                            if journal.is_fully_paid:
                                trxs = Transaction.objects.filter(journal_id=journal.id, is_hidden=False, related_invoice_id__isnull=False)
                                if not trxs:
                                    transaction.journal.fully_paid_date = None
                                    transaction.journal.is_fully_paid = False
                        transaction.journal.save()
                        outstanding = 0
                    elif journal.journal_type in [dict(TRANSACTION_TYPES)['AR Receipt'], dict(TRANSACTION_TYPES)['AP Payment']]:
                        # outstanding = 0
                        if not sp_journal:
                            outstanding = -1 * outstanding
                            if outstanding < 0:
                                total_amount += outstanding
                                payment_total -= outstanding

                    # if journal.id in [14812, 14813, 14815]:
                    #     print('journal.id', journal.id)
                    #     print('rl-transaction', transaction.id)
                    #     print('total_amount', total_amount)
                    #     print('payment_amount', payment_amount)
                    #     print('payment_total', payment_total)
                    #     print('outstanding', outstanding)
                    #     print('==========================')
                    journal.real_outstanding = outstanding
                    journal.paid_amount = math.fabs(payment_total)
                    journal.save()


                except Exception as e:
                    print(e)
                    print('transaction', transaction.id)
        else:
            if journal.document_type == DOCUMENT_TYPE_DICT['Debit Note'] or journal.document_type == DOCUMENT_TYPE_DICT['Credit Note']:
                transactions = Transaction.objects.filter(is_hidden=False, journal_id=journal.id)\
                    .exclude(related_invoice_id__isnull=True)
                if transactions.exists():
                    journal.real_outstanding = 0
                    journal.paid_amount = journal.total_amount
                    # journal.outstanding_amount = 0
                    journal.fully_paid_date = journal.document_date
                    journal.is_fully_paid = True
                    journal.save()
                else:
                    journal.real_outstanding = journal.total_amount
                    journal.save()
            else:
                if journal.journal_type == dict(TRANSACTION_TYPES)['AR Receipt']:
                    journal.real_outstanding = journal.customer_unapplied
                    journal.save()
                else:
                    journal.real_outstanding = journal.total_amount
                    journal.save()
        # if payment_total != 0:
        #     journal.outstanding_amount = float(
        #         journal.outstanding_amount) - float(journal.paid_amount)
        #     journal.save()

    messages.success(request, 'Real Outstanding fixing is successfull.')
    return render_to_response('page_acc.html', RequestContext(request, {}))
